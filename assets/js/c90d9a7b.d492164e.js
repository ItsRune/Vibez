"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[348],{4683:e=>{e.exports=JSON.parse('{"functions":[{"name":"_setupCommands","desc":"Sets up the in-game commands.","params":[],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","private":true,"source":{"line":457,"path":"src/init.lua"}},{"name":"_setupGlobals","desc":"Sets up the _G API.","params":[],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","private":true,"source":{"line":587,"path":"src/init.lua"}},{"name":"_checkVersion","desc":"Gets and checks the current version to the version saved to the module.","params":[],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","tags":["Unavailable"],"since":"1.1.0","private":true,"yields":true,"source":{"line":781,"path":"src/init.lua"}},{"name":"_promisify","desc":"Uses `Promise.lua` to attempt to promisify a method. (Only applies when `usePromises` is set to true).\\n\\n:::danger BROKEN\\nAll though this method can be used, it may not result in proper responses.\\n:::","params":[{"name":"functionToBind","desc":"","lua_type":"(...any) -> ...any"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Promise | any"}],"function_type":"method","tags":["Unavailable"],"since":"1.8.0","private":true,"yields":true,"source":{"line":823,"path":"src/init.lua"}},{"name":"_http","desc":"Uses `RequestAsync` to fetch required assets to make this API wrapper work properly. Automatically handles the API key and necessary headers associated with different routes.","params":[{"name":"Route","desc":"","lua_type":"string"},{"name":"Method","desc":"","lua_type":"string?"},{"name":"Headers","desc":"","lua_type":"{ [string]: any }?"},{"name":"Body","desc":"","lua_type":"{ any }?"},{"name":"useOldApi","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"boolean, httpResponse?"}],"function_type":"method","since":"1.0.0","private":true,"yields":true,"source":{"line":846,"path":"src/init.lua"}},{"name":"_getGroupRankFromName","desc":"Fetches the group\'s role name\'s rank value.\\n\\nAllows for partial naming, example:\\n```lua\\n-- Using Frivo\'s group ID\\nlocal rankNumber = VibezAPI:_getGroupRankFromName(\\"facili\\") --\x3e Expected: 250 (Facility Developer)\\n```","params":[{"name":"groupRoleName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"number?"}],"function_type":"method","since":"1.1.0","private":true,"yields":true,"source":{"line":932,"path":"src/init.lua"}},{"name":"_getGroupFromUser","desc":"Uses roblox\'s group service to get a player\'s rank.","params":[{"name":"groupId","desc":"","lua_type":"number"},{"name":"userId","desc":"","lua_type":"number"},{"name":"force","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"{ any }"}],"function_type":"method","since":"1.1.0","private":true,"yields":true,"source":{"line":964,"path":"src/init.lua"}},{"name":"_onPlayerAdded","desc":"Handles players joining the game and checks for if commands/ui are enabled.","params":[{"name":"Player","desc":"","lua_type":"Player"}],"returns":[],"function_type":"method","since":"1.5.0","private":true,"source":{"line":1031,"path":"src/init.lua"}},{"name":"_onPlayerRemoved","desc":"Handles players leaving the game and disconnects any events.","params":[{"name":"Player","desc":"","lua_type":"Player"},{"name":"isPlayerStillInGame","desc":"","lua_type":"boolean?"}],"returns":[],"function_type":"method","since":"1.5.0","private":true,"source":{"line":1099,"path":"src/init.lua"}},{"name":"_getUserIdByName","desc":"Gets a player\'s user identifier via their username.","params":[{"name":"username","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"number?"}],"function_type":"method","since":"1.1.0","private":true,"yields":true,"source":{"line":1148,"path":"src/init.lua"}},{"name":"_fixFormattedString","desc":"Fixes a string that requires formatting.","params":[{"name":"String","desc":"","lua_type":"string"},{"name":"Player","desc":"","lua_type":"Player | { Name: string, UserId: number }?"},{"name":"Custom","desc":"","lua_type":"{ onlyApplyCustom: boolean, Codes: { { code: string, equates: string }? } }?"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","since":"1.11.4","private":true,"yields":true,"source":{"line":1166,"path":"src/init.lua"}},{"name":"_getNameById","desc":"Gets a player\'s username by their userId","params":[{"name":"userId","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"string?"}],"function_type":"method","since":"1.1.0","private":true,"yields":true,"source":{"line":1216,"path":"src/init.lua"}},{"name":"_createRemote","desc":"Creates / Fetches a remote function in replicated storage for client communication.","params":[],"returns":[{"desc":"","lua_type":"RemoteFunction"}],"function_type":"method","since":"1.1.0","private":true,"source":{"line":1234,"path":"src/init.lua"}},{"name":"_getRoleIdFromRank","desc":"Gets the role id of a rank.","params":[{"name":"rank","desc":"","lua_type":"number | string"}],"returns":[{"desc":"","lua_type":"number?"}],"function_type":"method","since":"1.2.1","private":true,"yields":true,"source":{"line":1284,"path":"src/init.lua"}},{"name":"_notifyPlayer","desc":"Gets the role id of a rank.","params":[{"name":"Player","desc":"","lua_type":"Player"},{"name":"Message","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"number?"}],"function_type":"method","since":"1.10.0","private":true,"yields":true,"source":{"line":1328,"path":"src/init.lua"}},{"name":"getUsersForCommands","desc":"Gets the closest match to a player\'s username who\'s in game.","params":[{"name":"playerWhoCalled","desc":"","lua_type":"Player"},{"name":"usernames","desc":"","lua_type":"{string}"}],"returns":[{"desc":"","lua_type":"{Player?}"}],"function_type":"method","since":"1.4.0","yields":true,"source":{"line":1347,"path":"src/init.lua"}},{"name":"_giveSticks","desc":"Gives a Player the ranking sticks.","params":[{"name":"Player","desc":"","lua_type":"Player"}],"returns":[],"function_type":"method","since":"1.9.0","private":true,"yields":true,"source":{"line":1441,"path":"src/init.lua"}},{"name":"_removeSticks","desc":"Removes ranking sticks from a player.","params":[{"name":"Player","desc":"","lua_type":"Player"}],"returns":[],"function_type":"method","since":"1.9.0","private":true,"yields":true,"source":{"line":1473,"path":"src/init.lua"}},{"name":"giveRankSticks","desc":"Gives the ranking sticks to the player. Succession depends on whether they pass permissions check OR if permissions check is turned off","params":[{"name":"User","desc":"","lua_type":"Player | string | number"},{"name":"shouldCheckPermissions","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"VibezAPI"}],"function_type":"method","tags":["Chainable"],"since":"1.9.1","yields":true,"source":{"line":1506,"path":"src/init.lua"}},{"name":"setRankStickTool","desc":"Sets the ranking stick\'s tool.","params":[{"name":"tool","desc":"","lua_type":"Tool | Model"}],"returns":[{"desc":"","lua_type":"VibezAPI"}],"function_type":"method","tags":["Chainable"],"since":"1.9.1","yields":true,"source":{"line":1538,"path":"src/init.lua"}},{"name":"_onPlayerChatted","desc":"Handles the main chatting event for commands.","params":[{"name":"Player","desc":"","lua_type":"Player"},{"name":"message","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","since":"1.1.0","private":true,"yields":true,"source":{"line":1603,"path":"src/init.lua"}},{"name":"_checkPlayerForRankChange","desc":"Disconnects and reconnects player events to fix permissions within servers.","params":[{"name":"userId","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","since":"1.8.0","private":true,"yields":true,"source":{"line":1664,"path":"src/init.lua"}},{"name":"_warn","desc":"Displays a warning with the prefix of \\"Vibez @ TIMESTAMP: Message\\"","params":[{"name":"...","desc":"","lua_type":"...string"}],"returns":[],"function_type":"method","since":"1.0.2","private":true,"source":{"line":1688,"path":"src/init.lua"}},{"name":"_addLog","desc":"Adds an entry into the in-game logs.","params":[{"name":"calledBy","desc":"","lua_type":"Player"},{"name":"Action","desc":"","lua_type":"string"},{"name":"affectedUsers","desc":"","lua_type":"{ { Name: string, UserId: number } }"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","since":"1.7.0","private":true,"source":{"line":1709,"path":"src/init.lua"}},{"name":"_buildAttributes","desc":"Builds the attributes of the settings for workspace.","params":[],"returns":[],"function_type":"method","since":"1.9.0","private":true,"source":{"line":1731,"path":"src/init.lua"}},{"name":"_playerIsValidStaff","desc":"Returns the staff member\'s cached data.","params":[{"name":"Player","desc":"","lua_type":"Player | number | string"}],"returns":[{"desc":"","lua_type":"{ Player, number } | ()"}],"function_type":"method","since":"1.3.0","private":true,"source":{"line":1785,"path":"src/init.lua"}},{"name":"_verifyUser","desc":"Ensures that the parameter returns the proper type associated to the `typeToReturn`","params":[{"name":"userId","desc":"","lua_type":"Player | number | string"},{"name":"typeToReturn","desc":"","lua_type":"\\"UserId\\" | \\"Player\\" | \\"Name\\""}],"returns":[{"desc":"","lua_type":"number | string | Player"}],"function_type":"method","since":"1.9.2","private":true,"source":{"line":1808,"path":"src/init.lua"}},{"name":"getGroupId","desc":"Fetches the group associated with the api key.","params":[],"returns":[{"desc":"","lua_type":"number | -1"}],"function_type":"method","since":"1.1.0","yields":true,"source":{"line":1835,"path":"src/init.lua"}},{"name":"getSimplified","desc":"Returns a simplified version of this API.","params":[],"returns":[{"desc":"","lua_type":"simplifiedAPI"}],"function_type":"method","since":"1.11.0","source":{"line":1876,"path":"src/init.lua"}},{"name":"setRank","desc":"Sets the rank of a player and `whoCalled` (Optional) is used for logging purposes.","params":[{"name":"userId","desc":"","lua_type":"string | number"},{"name":"rankId","desc":"","lua_type":"string | number"},{"name":"whoCalled","desc":"","lua_type":"{ userName: string, userId: number }?"}],"returns":[{"desc":"","lua_type":"rankResponse"}],"function_type":"method","since":"1.1.0","yields":true,"source":{"line":1974,"path":"src/init.lua"}},{"name":"Promote","desc":"Promotes a player and `whoCalled` (Optional) is used for logging purposes.","params":[{"name":"userId","desc":"","lua_type":"string | number"},{"name":"whoCalled","desc":"","lua_type":"{ userName: string, userId: number }?"}],"returns":[{"desc":"","lua_type":"rankResponse"}],"function_type":"method","since":"1.1.0","yields":true,"source":{"line":2035,"path":"src/init.lua"}},{"name":"Demote","desc":"Demotes a player and `whoCalled` (Optional) is used for logging purposes.","params":[{"name":"userId","desc":"","lua_type":"string | number"},{"name":"whoCalled","desc":"","lua_type":"{ userName: string, userId: number }?"}],"returns":[{"desc":"","lua_type":"rankResponse"}],"function_type":"method","since":"1.1.0","yields":true,"source":{"line":2081,"path":"src/init.lua"}},{"name":"Fire","desc":"Fires a player and `whoCalled` (Optional) is used for logging purposes.","params":[{"name":"userId","desc":"","lua_type":"string | number"},{"name":"whoCalled","desc":"","lua_type":"{ userName: string, userId: number }?"}],"returns":[{"desc":"","lua_type":"rankResponse"}],"function_type":"method","since":"1.1.0","yields":true,"source":{"line":2127,"path":"src/init.lua"}},{"name":"bulkRank","desc":"Changes the rank of bulk selection of users.","params":[{"name":"Type","desc":"","lua_type":"\\"Fire\\" | \\"Promote\\" | \\"Demote\\" | \\"SetRank\\""},{"name":"Users","desc":"","lua_type":"{Player}"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"({Player},{Player?})"}],"function_type":"method","since":"1.4.0","yields":true,"source":{"line":2174,"path":"src/init.lua"}},{"name":"addCommand","desc":"Creates a new command within our systems.","params":[{"name":"commandName","desc":"","lua_type":"string"},{"name":"commandAliases","desc":"","lua_type":"{string}?"},{"name":"commandOperation","desc":"","lua_type":"(Player: Player, Args: { string }, addLog: (calledBy: Player, Action: string, affectedUsers: {Player}?, ...any) -> { calledBy: Player, affectedUsers: { Player }?, affectedCount: number?, Metadata: any }) -> ()"}],"returns":[{"desc":"","lua_type":"VibezAPI"}],"function_type":"method","since":"1.3.1","source":{"line":2234,"path":"src/init.lua"}},{"name":"addArgumentPrefix","desc":"Adds a command operation code.\\n\\n:::caution\\nThis method will not work if there\'s already an existing operation name!\\n:::","params":[{"name":"operationName","desc":"","lua_type":"string"},{"name":"operationCode","desc":"","lua_type":"string"},{"name":"operationFunction","desc":"","lua_type":"(playerToCheck: Player, incomingArgument: string, internalFunctions: { getGroupRankFromName: (groupRoleName: string) -> number?, getGroupFromUser: (groupId: number, userId: number) -> {any}?, Http: (Route: string, Method: string?, Headers: {[string]: any}, Body: {any}) -> httpResponse, addLog: ( calledBy: Player, Action: string, affectedUsers: {{ Name: string, UserId: number }}?, ...: any) -> () }) -> boolean"},{"name":"metaData","desc":"","lua_type":"{ [string]: boolean? }?\\r\\n"}],"returns":[{"desc":"","lua_type":"VibezAPI"}],"function_type":"method","tags":["Chainable"],"since":"1.3.1","source":{"line":2304,"path":"src/init.lua"}},{"name":"removeArgumentPrefix","desc":"Removes a command operation code.\\n\\n```lua\\nVibez:removeArgumentPrefix(\\"Team\\")\\n```","params":[{"name":"operationName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"VibezAPI"}],"function_type":"method","tags":["Chainable"],"since":"1.3.1","source":{"line":2358,"path":"src/init.lua"}},{"name":"updateLoggerName","desc":"Updates the logger\'s origin name.","params":[{"name":"newTitle","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","tags":["Chainable"],"since":"1.1.0","source":{"line":2371,"path":"src/init.lua"}},{"name":"updateKey","desc":"Updates the api key.","params":[{"name":"newApiKey","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","since":"1.2.0","yields":true,"source":{"line":2386,"path":"src/init.lua"}},{"name":"isPlayerABooster","desc":"Checks if the user is currently a nitro booster. (Only specific guilds have this feature)","params":[{"name":"User","desc":"","lua_type":"number | string | Player"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","since":"1.1.1","private":true,"yields":true,"source":{"line":2423,"path":"src/init.lua"}},{"name":"Destroy","desc":"Destroys the VibezAPI class.","params":[],"returns":[],"function_type":"method","since":"1.1.0","source":{"line":2471,"path":"src/init.lua"}},{"name":"getWebhookBuilder","desc":"Initializes the Hooks class with the specified webhook.","params":[{"name":"webhook","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Webhooks"}],"function_type":"method","since":"1.5.0","source":{"line":2531,"path":"src/init.lua"}},{"name":"addBlacklist","desc":"Adds a blacklist to your api key.","params":[{"name":"userToBlacklist","desc":"","lua_type":"(Player string | number)"},{"name":"Reason","desc":"","lua_type":"string?"},{"name":"blacklistExecutedBy","desc":"","lua_type":"(Player string | number)?"}],"returns":[{"desc":"","lua_type":"blacklistResponse"}],"function_type":"method","since":"1.6.0","source":{"line":2547,"path":"src/init.lua"}},{"name":"deleteBlacklist","desc":"Deletes a blacklist from your api key.","params":[{"name":"userToDelete","desc":"","lua_type":"(Player string | number)"}],"returns":[{"desc":"","lua_type":"blacklistResponse"}],"function_type":"method","since":"1.6.0","source":{"line":2600,"path":"src/init.lua"}},{"name":"getBlacklists","desc":"Gets either a full list of blacklists or checks if a player is currently blacklisted.","params":[{"name":"userId","desc":"","lua_type":"(string | number | Player)?"}],"returns":[{"desc":"","lua_type":"blacklistResponse"}],"function_type":"method","since":"1.6.0","source":{"line":2627,"path":"src/init.lua"}},{"name":"isUserBlacklisted","desc":"Gets either a full list of blacklists or checks if a player is currently blacklisted.","params":[{"name":"userId","desc":"","lua_type":"(string | number)?"}],"returns":[{"desc":"","lua_type":"(boolean, string?)"}],"function_type":"method","since":"1.6.0","source":{"line":2675,"path":"src/init.lua"}},{"name":"waitUntilLoaded","desc":"Gets a player\'s or everyone\'s current activity","params":[],"returns":[{"desc":"","lua_type":"VibezAPI?"}],"function_type":"method","tags":["Chainable"],"since":"1.8.0","source":{"line":2700,"path":"src/init.lua"}},{"name":"getActivity","desc":"Gets a player\'s or everyone\'s current activity","params":[{"name":"userId","desc":"","lua_type":"(string | number)?"}],"returns":[{"desc":"","lua_type":"activityResponse"}],"function_type":"method","since":"1.3.0","source":{"line":2726,"path":"src/init.lua"}},{"name":"saveActivity","desc":"Saves the player\'s current activity","params":[{"name":"userId","desc":"","lua_type":"string | number"},{"name":"userRank","desc":"","lua_type":"number"},{"name":"secondsSpent","desc":"","lua_type":"number"},{"name":"messagesSent","desc":"","lua_type":"(number | { string })?"},{"name":"shouldFetchGroupRank","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"httpResponse"}],"function_type":"method","since":"1.3.0","source":{"line":2751,"path":"src/init.lua"}},{"name":"bindToAction","desc":"Binds a custom function to a specific internal method.\\n\\n:::info\\nWhen a ranking action is triggered, your custom function will run with the response.\\n:::","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"action","desc":"","lua_type":"string<Promote | Demote | Fire | Blacklist>"},{"name":"callback","desc":"","lua_type":"(result: responseBody) -> ()"}],"returns":[{"desc":"","lua_type":"VibezAPI"}],"function_type":"method","since":"1.9.0","source":{"line":2810,"path":"src/init.lua"}},{"name":"unbindFromAction","desc":"Unbinds a custom function from a method.","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"action","desc":"","lua_type":"string<Promote | Demote | Fire | Blacklist>"}],"returns":[{"desc":"","lua_type":"VibezAPI"}],"function_type":"method","since":"1.9.0","source":{"line":2852,"path":"src/init.lua"}},{"name":"_initialize","desc":"Initializes the entire module.","params":[{"name":"apiKey","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","since":"1.0.1","private":true,"source":{"line":2881,"path":"src/init.lua"}},{"name":"new","desc":":::caution Notice\\nThis method can be used as a normal function or invoke the \\".new\\" function:    \\n`require(14946453963)(\\"API Key\\")`\\n`require(14946453963).new(\\"API Key\\")`\\n:::\\n\\nConstructs the main Vibez API class.\\n\\n```lua\\nlocal myKey = \\"YOUR_API_KEY_HERE\\"\\nlocal VibezAPI = require(14946453963)\\nlocal Vibez = VibezAPI(myKey)\\n```","params":[{"name":"apiKey","desc":"Your Vibez API key.","lua_type":"string"},{"name":"extraOptions","desc":"Extra settings to configure the api to work for you.","lua_type":"extraOptionsType"}],"returns":[{"desc":"","lua_type":"VibezAPI"}],"function_type":"static","realm":["Server"],"since":"1.0.1","source":{"line":2998,"path":"src/init.lua"}},{"name":"awaitGlobals","desc":"Awaits for the Global API to be loaded.\\n\\n```lua\\nlocal globals = VibezAPI.awaitGlobals()\\n```","params":[],"returns":[{"desc":"","lua_type":"VibezAPI"}],"function_type":"static","since":"1.1.0","yields":true,"source":{"line":3413,"path":"src/init.lua"}}],"properties":[{"name":"_debug","desc":"Refrence to a table that holds useful debugging function(s).","lua_type":"vibezDebugTools","private":true,"source":{"line":447,"path":"src/init.lua"}},{"name":"Loaded","desc":"Determines whether the API has loaded.\\n\\t","lua_type":"boolean","source":{"line":3062,"path":"src/init.lua"}},{"name":"GroupId","desc":"Holds the groupId associated with the API Key.\\n\\t","lua_type":"number","source":{"line":3069,"path":"src/init.lua"}},{"name":"Settings","desc":"Holds a copy of the settings for the API.\\n\\t","lua_type":"extraOptionsType","source":{"line":3076,"path":"src/init.lua"}},{"name":"_private","desc":"From caches to simple booleans/instances/numbers, this table holds all the information necessary for this API to work. \\n\\t","lua_type":"{Event: RemoteEvent?, Function: RemoteFunction?, _initialized: boolean, _lastVersionCheck: number, recentlyChangedKey: boolean, newApiUrl: string, oldApiUrl: string, clientScriptName: string, rateLimiter: RateLimit, externalConfigCheckDelay: number, lastLoadedExternalConfig: boolean, Maid: {[number]: {RBXScriptConnection?}}, rankingCooldowns: {[number]: number}, usersWithSticks: {number}, stickTypes: string, requestCaches: {nitro: {any}, validStaff: {number}, groupInfo: {[number]: {any}?}}, commandOperations: {any}, commandOperationCodes: {[string]: {Code: string, Execute: (playerWhoFired: Player, playerToCheck: Player, incomingArgument: string) -> boolean}}, Binds: {[string]: {[string]: (...any) -> any?}}}","private":true,"source":{"line":3084,"path":"src/init.lua"}}],"types":[{"name":"extraOptionsType","desc":"","fields":[{"name":"Commands","lua_type":"{ Enabled: boolean, useDefaultNames: boolean, MinRank: number<0-255>, MaxRank: number<0-255>, Prefix: string, Alias: {string?} }","desc":""},{"name":"RankSticks","lua_type":"{ Enabled: boolean, MinRank: number<0-255>, MaxRank: number<0-255>, SticksModel: Model? }","desc":""},{"name":"Interface","lua_type":"{ Enabled: boolean, MinRank: number<0-255>, MaxRank: number<0-255> }","desc":""},{"name":"Notifications","lua_type":"{ Enabled: boolean, Font: Enum.Font, FontSize: number<1-100>, keyboardFontSizeMultiplier: number, delayUntilRemoval: number, entranceTweenInfo: {Style: Enum.EasingStyle, Direction: Enum.EasingDirection, timeItTakes: number}, exitTweenInfo: {Style: Enum.EasingStyle, Direction: Enum.EasingDirection, timeItTakes: number} }","desc":""},{"name":"ActivityTracker","lua_type":"{ Enabled: boolean, MinRank: number<0-255>, disabledWhenInStudio: boolean, disableWhenInPrivateServer: boolean, disableWhenAFK: boolean, delayBeforeMarkedAFK: number, kickIfFails: boolean, failMessage: string }","desc":""},{"name":"Misc","lua_type":"{ originLoggerText: string, ignoreWarnings: boolean, rankingCooldown: number, overrideGroupCheckForStudio: boolean, createGlobalVariables: boolean, isAsync: boolean }","desc":""}],"source":{"line":3450,"path":"src/init.lua"}},{"name":"simplifiedAPI","desc":"A simplified version of our API.","fields":[{"name":"Ranking","lua_type":"{ Set: (Player: Player | string | number, newRank: string | number) -> rankResponse, Promote: (Player: Player | string | number) -> rankResponse, Demote: (Player: Player | string | number) -> rankResponse, Fire: (Player: Player | string | number) -> rankResponse }","desc":""},{"name":"Activity","lua_type":"{ Get: (Player: Player | string | number) -> activityResponse, Save: (Player: Player | string | number, playerRank: number, secondsSpent: number, messagesSent: (number | {string})?, shouldFetchRank: boolean) -> httpResponse }","desc":""},{"name":"Commands","lua_type":"{ Add: (commandName: string, commandAlias: {string?}, commandFunction: (Player: Player, Args: {string?}, addLog: (calledBy: Player, Action: string, affectedUsers: {Player}?, ...any) -> { calledBy: Player, affectedUsers: {Player}?, affectedCount: number, Metadata: any })) -> VibezAPI, AddArgPrefix: (operationName: string, operationCode: string, operationFunction: (playerWhoCalled: Player, playerToCheck: Player, incomingArgument: string) -> boolean) -> VibezAPI, RemoveArgePrefix: (operationName: string) -> VibezAPI }","desc":""},{"name":"Notifications","lua_type":"{ Create: (Player: Player, notificationMessage: string) -> () }","desc":""},{"name":"Webhooks","lua_type":"{ Create: (webhookLink: string) -> Webhooks }","desc":""}],"source":{"line":3461,"path":"src/init.lua"}},{"name":"groupIdResponse","desc":"","fields":[{"name":"success","lua_type":"boolean","desc":""},{"name":"groupId","lua_type":"number?","desc":""}],"source":{"line":3468,"path":"src/init.lua"}},{"name":"errorResponse","desc":"","fields":[{"name":"success","lua_type":"boolean","desc":""},{"name":"errorMessage","lua_type":"string","desc":""}],"source":{"line":3475,"path":"src/init.lua"}},{"name":"rankResponse","desc":"","fields":[{"name":"success","lua_type":"boolean","desc":""},{"name":"message","lua_type":"string","desc":""},{"name":"data","lua_type":"{ newRank: { id: number, name: string, rank: number, memberCount: number }, oldRank: { id: number, name: string, rank: number, groupInformation: { id: number, name: string, memberCount: number, hasVerifiedBadge: boolean } } }","desc":""}],"source":{"line":3483,"path":"src/init.lua"}},{"name":"blacklistResponse","desc":"","fields":[{"name":"success","lua_type":"boolean","desc":""},{"name":"message","lua_type":"string","desc":""}],"source":{"line":3490,"path":"src/init.lua"}},{"name":"fullBlacklists","desc":"","fields":[{"name":"success","lua_type":"boolean","desc":""},{"name":"blacklists:","lua_type":"{ [number | string]: { reason: string, blacklistedBy: number } }","desc":""}],"source":{"line":3497,"path":"src/init.lua"}},{"name":"infoResponse","desc":"","fields":[{"name":"success","lua_type":"boolean","desc":""},{"name":"message","lua_type":"string","desc":""}],"source":{"line":3504,"path":"src/init.lua"}},{"name":"activityResponse","desc":"","fields":[{"name":"secondsUserHasSpent","lua_type":"number","desc":""},{"name":"messagesUserHasSent","lua_type":"number","desc":""},{"name":"detailsLogs","lua_type":"[ {timestampLeftAt: number, secondsUserHasSpent: number, messagesUserHasSent: number}? ]","desc":""}],"source":{"line":3512,"path":"src/init.lua"}},{"name":"responseBody","desc":"","lua_type":"groupIdResponse | errorResponse | rankResponse","source":{"line":3517,"path":"src/init.lua"}},{"name":"httpResponse","desc":"","fields":[{"name":"Body","lua_type":"responseBody","desc":""},{"name":"Headers","lua_type":"{ [string]: any }","desc":""},{"name":"StatusCode","lua_type":"number","desc":""},{"name":"StatusMessage","lua_type":"string?","desc":""},{"name":"Success","lua_type":"boolean","desc":""},{"name":"rawBody","lua_type":"string","desc":""}],"source":{"line":3528,"path":"src/init.lua"}},{"name":"vibezDebugTools","desc":"","fields":[{"name":"stringifyTableDeep","lua_type":"(tbl: { any }, tabbing: number?) -> string","desc":""}],"private":true,"source":{"line":3535,"path":"src/init.lua"}}],"name":"VibezAPI","desc":":::important\\nHey there! We recommend beginning at the introduction page! [Click Here](/docs/intro)\\n:::\\n\\t","source":{"line":3052,"path":"src/init.lua"}}')}}]);
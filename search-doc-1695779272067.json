[{"title":"Chainable","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Chainable","content":"","keywords":""},{"title":"What is chainable?​","type":1,"pageTitle":"Chainable","url":"/VibezAPI/docs/Chainable#what-is-chainable","content":"Chainablility is a feature that allows you to chain methods together. For example, instead of doing this: local VibezAPI = require(script.VibezAPI)(&quot;myApiKey&quot;) local myWebhook = VibezAPI:getWebhookBuilder(&quot;Discord Webhook Link&quot;) myWebhook:setTitle(&quot;my title&quot;) myWebhook:setDescription(&quot;my description&quot;)  You can do this: local VibezAPI = require(script.VibezAPI)(&quot;myApiKey&quot;) local myWebhook = VibezAPI:getWebhookBuilder(&quot;Discord Webhook Link&quot;) myWebhook:setTitle(&quot;my title&quot;):setDescription(&quot;my description&quot;)  For readability sake you can do: local VibezAPI = require(script.VibezAPI)(&quot;myApiKey&quot;) local myWebhook = VibezAPI:getWebhookBuilder(&quot;Discord Webhook Link&quot;) myWebhook :setTitle(&quot;my title&quot;) :setDescription(&quot;my description&quot;)  Which not only saves lines but also makes it easier to read, by preventing your eyes from jumping to different lines.  "},{"title":"How does it work?​","type":1,"pageTitle":"Chainable","url":"/VibezAPI/docs/Chainable#how-does-it-work","content":"Chainability works by returning the class instance after every method call. This allows you to call another method on the class instance without having to reuse the variable name. For example, if you wanted to remove an operation code then immediately promote someone, you could do this: local VibezAPI = require(script.VibezAPI)(&quot;myApiKey&quot;) local playerToRank = game.Players:GetPlayers()[1] VibezAPI:removeCommandOperation(&quot;Team&quot;):SetRank(playerToRank, 1)   "},{"title":"How do I know if a method is chainable?​","type":1,"pageTitle":"Chainable","url":"/VibezAPI/docs/Chainable#how-do-i-know-if-a-method-is-chainable","content":"If a method is chainable, it will be marked with a Chainable tag in the documentation. For example, the :removeCommandOperation method is chainable, so it will be marked with a Chainable tag in the documentation. "},{"title":"Webhooks","type":0,"sectionRef":"#","url":"/VibezAPI/api/Webhooks","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#new","content":"Constructor since 0.2.0 &lt;/&gt; Webhooks.new( vibezApi: vibezApi, webhook: string ) → Webhooks Creates the hook class.  "},{"title":"_createEmbedTable​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#_createEmbedTable","content":"since 0.2.0 &lt;/&gt; Webhooks._createEmbedTable() → {any?} Initializes the 'embeds' table  "},{"title":"setWebhook​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setWebhook","content":"Chainable since 0.2.0 &lt;/&gt; Webhooks:setWebhook(newWebhook: string) → Webhooks Sets the webhook to a new one.  "},{"title":"setContent​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setContent","content":"Chainable since 0.2.0 &lt;/&gt; Webhooks:setContent(content: string) → Webhooks Sets the content of the webhook.  "},{"title":"setUsername​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setUsername","content":"Chainable since 0.2.0 &lt;/&gt; Webhooks:setUsername(username: string) → Webhooks Sets the username of the webhook.  "},{"title":"addEmbedWithBuilder​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#addEmbedWithBuilder","content":"Chainable since 0.2.0 &lt;/&gt; Webhooks:addEmbedWithBuilder(handler: (embedCreator: Embed) → Embed) → Webhooks Creates an embed with the embed creator.  "},{"title":"addEmbed​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#addEmbed","content":"Chainable since 0.2.0 &lt;/&gt; Webhooks:addEmbed(data: {[string]: any}) → Webhooks Creates an embed with table data.  "},{"title":"setTTS​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setTTS","content":"Chainable since 0.2.0 &lt;/&gt; Webhooks:setTTS(override: boolean?) → Webhooks Toggles text-to-speech. Default: Disabled  "},{"title":"_parseWebhook​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#_parseWebhook","content":"since 0.2.0 &lt;/&gt; Webhooks:_parseWebhook(webhookToUse: string?) → { ID: string, Token: string } Parses the webhook into the ID and Token.  "},{"title":"Send​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#Send","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 0.2.0 &lt;/&gt; Webhooks:Send() → httpResponse "},{"title":"Types","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks##","content":""},{"title":"​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#httpResponse","content":"interface httpResponse { Body: {any} Headers: {[string]: any} StatusCode: number StatusMessage: string? Success: boolean rawBody: string }  Posts a new webhook. "},{"title":"RateLimiter","type":0,"sectionRef":"#","url":"/VibezAPI/api/RateLimiter","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#functions","content":" "},{"title":"new​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#new","content":"Constructor since 0.1.0 &lt;/&gt; RateLimiter.new( requestsPerRetry: number, retryAfter: number ) → RateLimiter "},{"title":"Types","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter##","content":""},{"title":"​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#RateLimit","content":"interface RateLimit { isLimited: boolean _retryAfter: number _counter: number _maxCounter: number _counterStartedAt: number }  Creates the rate limiting class.  "},{"title":"Check​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#Check","content":"since 0.1.0 &lt;/&gt; RateLimiter:Check() → ( boolean, string? ) Checks to see if the developer is currently being rate limited. "},{"title":"Webhooks","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Webhooks","content":"","keywords":""},{"title":"What are webhooks?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Webhooks#what-are-webhooks","content":"Webhooks are a way to send messages to Discord channels without using a bot. They can be used to send messages to channels from external sources, such as a website or a game server. You can find more information about webhooks here. "},{"title":"How do I create a webhook?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Webhooks#how-do-i-create-a-webhook","content":"You can get a webhook link by going to your Discord server settings.  Navigate to the &quot;Integrations&quot; page.  Click on &quot;Webhooks&quot; and &quot;New Webhook&quot;, customize it however you'd like and copy the webhook link.  "},{"title":"How do I send a message to a webhook?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Webhooks#how-do-i-send-a-message-to-a-webhook","content":"Using Vibez's webhook api is very simple. You just need to create a webhook builder using the webhook link you got from the previous step. local VibezAPI = require(script.Parent.VibezAPI) local myWebhook = VibezAPI:getWebhookBuilder(&quot;Discord Webhook Link&quot;)  After that you can send a test message! myWebhook:setContent(&quot;Hello World!&quot;):Send()  Please look at information about chaining to learn more about how chaining benefits you. "},{"title":"How do I send an embed to a webhook?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Webhooks#how-do-i-send-an-embed-to-a-webhook","content":"There are 2 ways to create an embed. First, you could use the built in embed builder: myWebhook:addEmbedWithBuilder(function(myEmbed) myEmbed:setTitle(&quot;my title&quot;) myEmbed:setDescription(&quot;my description&quot;) end):Send()  Or, you could create an embed using a table: myWebhook:addEmbed({ title = &quot;my title&quot;, description = &quot;my description&quot; }):Send()  "},{"title":"Why isn't my message sending?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Webhooks#why-isnt-my-message-sending","content":"If your message isn't sending, it's possibly 2 issues. You didn't call :Send() at the end of your message.If you're using embeds, you didn't set the title/description of your embed. "},{"title":"Limitations​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Webhooks#limitations","content":"There are some limitations to webhooks. For example, you can only send 10 embeds per message. You can find more information about these limitations here. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/VibezAPI/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/VibezAPI/docs/intro#installation","content":"You can install by getting the package from the roblox website and requiring the module using the ID of the module. This is the recommended way to install the module as it will automatically update the module when a new version is released. local VibezAPI = require(6949396225)  OR To install, just get the package from the roblox website and drag it into your studio place. Please make sure you parent the modulescript to ServerStorage or ServerScriptService in order to keep the module out of the hands of exploiters.  "},{"title":"Usage​","type":1,"pageTitle":"Getting Started","url":"/VibezAPI/docs/intro#usage","content":"To begin, open a new Script in ServerScriptService and require the module: local VibezAPI = require(script.Parent.VibezAPI)  From there, you can use the API to create a new Vibez instance: local myApiKey = &quot;my-api-key&quot; local Vibez = VibezAPI(myApiKey)  Our api wrapper supports extra options for when creating the class. These options can be found here. Once all that's done, you're free to use our API for any means necessary.  "},{"title":"API Settings​","type":1,"pageTitle":"Getting Started","url":"/VibezAPI/docs/intro#api-settings","content":"You can set specific settings when calling the constructor function. These settings are optional and can be found here. "},{"title":"Command Operation Codes","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Command Operation Codes","content":"","keywords":""},{"title":"What are command operation codes?​","type":1,"pageTitle":"Command Operation Codes","url":"/VibezAPI/docs/Command Operation Codes#what-are-command-operation-codes","content":"Command operation codes are shorteners that allow you to use less characters when sending commands to the API. For example, instead of saying game.Teams[&quot;myTeam&quot;] as a command argument, you can send #myTeam. Operation codes can be anything you'd like, as long as they don't conflict with any other operation codes. We'd also recommend not using commas as your operation code, as it will conflict with the command argument separator.  "},{"title":"How do they work?​","type":1,"pageTitle":"Command Operation Codes","url":"/VibezAPI/docs/Command Operation Codes#how-do-they-work","content":"Command operations work by first splitting the sent command, then checking if the first argument is an operation code. If it is, it will run the operation code function and return the result. If it isn't, it will return the command argument as is. For example, if you sent #myTeam as a command argument, it would split the command into # and myTeam. It would then check if # is an operation code, and if it is, it will run the operation code function and return the result. If it isn't, it will return the command argument as is.  "},{"title":"How to use​","type":1,"pageTitle":"Command Operation Codes","url":"/VibezAPI/docs/Command Operation Codes#how-to-use","content":"To create a new operation code, you'll use the :addCommandOperation method. This method takes three arguments: the operation name, the operation code, and the operation function. The operation function must return a boolean value, if it does not the operation will not work. local VibezAPI = require(script.VibezAPI)(&quot;myApiKey&quot;) VibezAPI:addCommandOperation(&quot;Rank&quot;, &quot;r:&quot;, function(playerToCheck: Player, incomingArgument: string) -- Operation code is automatically removed from the 'incomingArgument'. local rank, tolerance = table.unpack(string.split(incomingArgument, &quot;:&quot;)) -- Make sure the rank is a number. if not tonumber(rank) then return false end -- Make sure the tolerance is a valid tolerance. tolerance = tolerance or &quot;&lt;=&quot; local isOk, currentPlayerRank = pcall( playerToCheck.GetRankInGroup, playerToCheck, tonumber(rank) ) -- Make sure the player is in the group and their rank was fetched. if not isOk or currentPlayerRank == 0 then return false end -- Check the tolerances if tolerance == &quot;&lt;=&quot; then return currentPlayerRank &lt;= tonumber(rank) elseif tolerance == &quot;&gt;=&quot; then return currentPlayerRank &gt;= tonumber(rank) elseif tolerance == &quot;&lt;&quot; then return currentPlayerRank &lt; tonumber(rank) elseif tolerance == &quot;&gt;&quot; then return currentPlayerRank &gt; tonumber(rank) elseif tolerance == &quot;==&quot; then return currentPlayerRank == tonumber(rank) end -- If the tolerance is invalid, return false. return false end)  Now, you can use the operation code in your commands: !promote r:3:&lt;=  "},{"title":"How to remove operation codes​","type":1,"pageTitle":"Command Operation Codes","url":"/VibezAPI/docs/Command Operation Codes#how-to-remove-operation-codes","content":"To remove an operation code, you'll use the :removeCommandOperation method. This method takes one argument: the operation name. If you don't like how one operation code performs that was made by us, you can simply remove it. The default operation codes are: Name\tCode\tDescriptionTeam\t%\tChecks for a given team name Rank\tr:\tChecks the player's rank with a tolerance shortenedUsername\tNone\tChecks for a portion of a player's username VibezAPI:removeCommandOperation(&quot;Rank&quot;) -- Removes the default rank operation code.  "},{"title":"VibezAPI","type":0,"sectionRef":"#","url":"/VibezAPI/api/VibezAPI","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#types","content":" "},{"title":"groupIdResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#groupIdResponse","content":"&lt;/&gt; interface groupIdResponse { success: boolean groupId: number? }   "},{"title":"errorResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#errorResponse","content":"&lt;/&gt; interface errorResponse { success: boolean errorMessage: string }   "},{"title":"rankResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#rankResponse","content":"&lt;/&gt; interface rankResponse { success: boolean message: string data: { newRank: { id: number, name: string, rank: number, memberCount: number }, oldRank: { id: number, name: string, rank: number, groupInformation: { id: number, name: string, memberCount: number, hasVerifiedBadge: boolean } } } }   "},{"title":"infoResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#infoResponse","content":"&lt;/&gt; interface infoResponse { success: boolean message: string }   "},{"title":"responseBody​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#responseBody","content":"&lt;/&gt; type responseBody = groupIdResponse | errorResponse | rankResponse   "},{"title":"httpResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#httpResponse","content":"&lt;/&gt; interface httpResponse { Body: responseBody Headers: {[string]: any} StatusCode: number StatusMessage: string? Success: boolean rawBody: string }  "},{"title":"Functions​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#functions","content":" "},{"title":"new​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#new","content":"Constructor &lt;/&gt; VibezAPI.new( apiKey: string,-- Your Vibez API key. extraOptions: extraOptionsType-- Extra settings to configure the api to work for you. ) → VibezAPI "},{"title":"Types","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI##","content":""},{"title":"​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#extraOptionsType","content":"interface extraOptionsType { isChatCommandsEnabled: boolean isUIEnabled: boolean commandPrefix: string minRank: number maxRank: number overrideGroupCheckForStudio: boolean loggingOriginName: string ignoreWarnings: boolean }  Constructs the main Vibez API class. local myKey = &quot;YOUR_API_KEY_HERE&quot; local VibezAPI = require(script.VibezAPI) local Vibez = VibezAPI(myKey)   "},{"title":"Http​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Http","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:Http( Route: string, Method: string?, Headers: {[string]: any}?, Body: {any}?, useOldApi: boolean? ) → boolean,httpResponse? Uses RequestAsync to fetch required assets to make this API wrapper work properly. Automatically handles the API key and necessary headers associated with different routes.  "},{"title":"getGroupId​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getGroupId","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Public since 0.1.0 &lt;/&gt; VibezAPI:getGroupId() → number? Fetches the group associated with the api key.  "},{"title":"getGroupRankFromName​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getGroupRankFromName","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:getGroupRankFromName(groupRoleName: string) → number? Fetches the group's role name's rank value. Allows for partial naming, example: -- Using Frivo's group ID local rankNumber = VibezAPI:getGroupRankFromName(&quot;facili&quot;) --&gt; Expected: 250 (Facility Developer)   "},{"title":"getGroupFromUser​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getGroupFromUser","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:getGroupFromUser( groupId: number, userId: number ) → number Uses roblox's group service to get a player's rank.  "},{"title":"onPlayerAdded​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#onPlayerAdded","content":"Internal since 0.1.0 &lt;/&gt; VibezAPI:onPlayerAdded(Player: Player ) → () Handles players joining the game and checks for if commands/ui are enabled.  "},{"title":"onPlayerRemoved​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#onPlayerRemoved","content":"Internal since 0.1.0 &lt;/&gt; VibezAPI:onPlayerRemoved(Player: Player ) → () Handles players leaving the game and disconnects any events.  "},{"title":"isPlayerRankOkToProceed​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#isPlayerRankOkToProceed","content":"Internal since 0.1.0 &lt;/&gt; VibezAPI:isPlayerRankOkToProceed(playerRank: number) → boolean Compares a rank to the min/max ranks in settings for the commands/ui.  "},{"title":"getUserIdByName​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getUserIdByName","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:getUserIdByName(username: string) → number? Gets a player's user identifier via their username.  "},{"title":"getNameById​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getNameById","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:getNameById(userId: number) → string? Gets a player's username by their userId  "},{"title":"_createRemote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_createRemote","content":"Internal since 0.1.0 &lt;/&gt; VibezAPI:_createRemote() → RemoteRemoteFunction  Creates / Fetches a remote function in replicated storage for client communication.  "},{"title":"_getRoleIdFromRank​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_getRoleIdFromRank","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_getRoleIdFromRank(rank: number | string) → number? Gets the role id of a rank.  "},{"title":"_getPlayers​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_getPlayers","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_getPlayers(usernames: {string}) → {Player? } Gets the closest match to a player's username who's in game.  "},{"title":"_onPlayerChatted​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_onPlayerChatted","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_onPlayerChatted( Player: Player , message: string ) → () Handles the main chatting event for commands.  "},{"title":"_checkHttp​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_checkHttp","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_checkHttp() → boolean Checks for if HTTP is enabled  "},{"title":"_setRank​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_setRank","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_setRank( userId: string | number, rankId: string | number, whoCalled: { userName: string, userId: number } ) → rankResponse Sets the rank of a player and uses &quot;whoCalled&quot; to send a message with origin logging name.  "},{"title":"_Promote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_Promote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_Promote( userId: string | number, whoCalled: { userName: string, userId: number } ) → rankResponse Promotes a player and creates a fake &quot;whoCalled&quot; variable.  "},{"title":"_Demote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_Demote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_Demote( userId: string | number, whoCalled: { userName: string, userId: number } ) → rankResponse Demotes a player and uses &quot;whoCalled&quot;, creates one if none is added.  "},{"title":"_Fire​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_Fire","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_Fire( userId: string | number, whoCalled: { userName: string, userId: number } ) → rankResponse Fires a player and creates a fake &quot;whoCalled&quot; variable if none is supplied.  "},{"title":"_destroy​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_destroy","content":"Internal since 0.1.0 &lt;/&gt; VibezAPI:_destroy() → () Destroys the class.  "},{"title":"_warn​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_warn","content":"Internal since 0.1.0 &lt;/&gt; VibezAPI:_warn(...: ...string) → () Displays a warning with the prefix of &quot;[Vibez]&quot;  "},{"title":"SetRank​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#SetRank","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Public since 0.1.0 &lt;/&gt; VibezAPI:SetRank( userId: string | number, rankId: string | number ) → Types.rankResponse Changes the rank of a player. local userId, rankId = 1, 200 Vibez:SetRank(userId, rankId)   "},{"title":"Promote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Promote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Public since 0.1.0 &lt;/&gt; VibezAPI:Promote(userId: string | number) → Types.rankResponse Promotes a player. local userId = 1 local response = Vibez:Promote(userId)   "},{"title":"Demote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Demote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Public since 0.1.0 &lt;/&gt; VibezAPI:Demote(userId: string | number) → Types.rankResponse Demotes a player. local userId = 1 local response = Vibez:Demote(userId)   "},{"title":"Fire​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Fire","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Public since 0.1.0 &lt;/&gt; VibezAPI:Fire(userId: string | number) → Types.rankResponse Fires a player from the group.  "},{"title":"ToggleCommands​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#ToggleCommands","content":"Public since 0.1.0 &lt;/&gt; VibezAPI:ToggleCommands(override: boolean?) → nil Toggles the usage of commands within the experience.  "},{"title":"addCommandOperation​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#addCommandOperation","content":"Chainable Public since 0.1.0 &lt;/&gt; VibezAPI:addCommandOperation( operationName: string, operationCode: string, operationFunction: ( playerToCheck: Player , incomingArgument: string, internalFunctions: vibezCommandFunctions ) → boolean ) → VibezAPI "},{"title":"Types","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI##","content":""},{"title":"​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#vibezCommandFunctions","content":"interface vibezCommandFunctions { getGroupRankFromName: ( self: VibezAPI, groupRoleName: string ) → number? getGroupFromUser: ( self: VibezAPI, groupId: number, userId: number ) → {any}? Http: ( self: VibezAPI, Route: string, Method: string?, Headers: {[string]: any}, Body: {any} ) → httpResponse }  Adds a command operation code. caution This method will not work if there's already an existing operation name! -- This operation comes by default, no need to rewrite it. Vibez:addCommandOperation( &quot;Team&quot;, -- Name of the operation. &quot;%&quot;, -- Prefix before the operation argument. function(playerToCheck: Player, incomingArgument: string, internalFunctions) return playerToCheck.Team ~= nil and string.sub(string.lower(playerToCheck.Team.Name), 0, #incomingArgument) == string.lower(incomingArgument) end ) The internalFunctions parameter contains a table of functions that are meant to ease the developmental process of operations. Here's an example of one of them being used: Vibez:addCommandOperation( &quot;SHR&quot;, -- Name of the operation. &quot;shr&quot;, -- Prefix before the operation argument. function(playerToCheck: Player, incomingArgument: string, internalFunctions) local playerGroupInfo = internalFunctions .getGroupFromUser(Vibez.GroupId, playerToCheck.UserId) return playerGroupInfo.Rank &gt;= 250 end )   "},{"title":"removeCommandOperation​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#removeCommandOperation","content":"Chainable Public since 0.1.0 &lt;/&gt; VibezAPI:removeCommandOperation(operationName: string) → VibezAPI Removes a command operation code. Vibez:removeCommandOperation(&quot;Team&quot;)   "},{"title":"UpdateLoggerTitle​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#UpdateLoggerTitle","content":"Public since 0.1.0 &lt;/&gt; VibezAPI:UpdateLoggerTitle(newTitle: string) → nil Updates the logger's origin name.  "},{"title":"UpdateKey​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#UpdateKey","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Public since 0.1.0 &lt;/&gt; VibezAPI:UpdateKey(newApiKey: string) → boolean Updates the api key.  "},{"title":"Destroy​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Destroy","content":"Public since 0.1.0 &lt;/&gt; VibezAPI:Destroy() → () Destroys the VibezAPI class.  "},{"title":"ToggleUI​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#ToggleUI","content":"Public since 0.1.0 &lt;/&gt; VibezAPI:ToggleUI(override: boolean?) → nil Toggles the client promote/demote/fire UI.  "},{"title":"getWebhookBuilder​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getWebhookBuilder","content":"Public since 0.1.0 &lt;/&gt; VibezAPI:getWebhookBuilder(webhook: string) → VibezHooks Initializes the Hooks class with the specified webhook.  "},{"title":"getActivity​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getActivity","content":"Public since 0.1.0 &lt;/&gt; VibezAPI:getActivity(userId: (string | number)?) → activityResponse "},{"title":"Types","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI##","content":""},{"title":"​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#activityResponse","content":"interface activityResponse { success: boolean? message: string? [number]: ({ secondsUserHasSpent: number, messagesUserHasSent: number, detailedLogs: [{ timestampLeftAt: number, secondsUserHasSpent: number, messagesUserHasSent: number }] }})? }  Gets a player's or everyone's current activity  "},{"title":"saveActivity​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#saveActivity","content":"Public since 0.1.0 &lt;/&gt; VibezAPI:saveActivity( userId: string | number, secondsSpent: number, messagesSent: (number | {string})? ) → httpResponse Saves the player's current activity "},{"title":"EmbedBuilder","type":0,"sectionRef":"#","url":"/VibezAPI/api/EmbedBuilder","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#functions","content":" "},{"title":"new​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#new","content":"Constructor since 0.2.0 &lt;/&gt; EmbedBuilder.new() → EmbedBuilder Creates the embed class  "},{"title":"setDescription​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setDescription","content":"Required Chainable since 0.2.0 &lt;/&gt; EmbedBuilder:setDescription(description: string) → EmbedBuilder Adds a description to the embed.  "},{"title":"setTitle​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setTitle","content":"Required Chainable since 0.2.0 &lt;/&gt; EmbedBuilder:setTitle(title: string) → EmbedBuilder Adds a title to the embed.  "},{"title":"addField​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#addField","content":"Chainable since 0.2.0 &lt;/&gt; EmbedBuilder:addField( name: string, value: string, isInline: boolean ) → EmbedBuilder Adds a field to the embed.  "},{"title":"clearFields​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#clearFields","content":"Chainable since 0.2.0 &lt;/&gt; EmbedBuilder:clearFields() → EmbedBuilder Clears the fields data.  "},{"title":"setFooter​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setFooter","content":"Chainable since 0.2.0 &lt;/&gt; EmbedBuilder:setFooter( text: string, iconUrl: string? ) → EmbedBuilder Sets a footer to the embed.  "},{"title":"setThumbnail​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setThumbnail","content":"Chainable since 0.2.0 &lt;/&gt; EmbedBuilder:setThumbnail( url: string, height: number?, width: number? ) → EmbedBuilder Sets the embed thumbnail.  "},{"title":"setColor​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setColor","content":"Chainable since 0.2.0 &lt;/&gt; EmbedBuilder:setColor(color: Color3 | string | number) → EmbedBuilder Sets the color of the embed.  "},{"title":"setAuthor​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setAuthor","content":"Chainable since 0.2.0 &lt;/&gt; EmbedBuilder:setAuthor( name: string, url: string?, iconUrl: string? ) → EmbedBuilder Sets the author of the embed.  "},{"title":"setTimestamp​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setTimestamp","content":"Chainable since 0.2.0 &lt;/&gt; EmbedBuilder:setTimestamp(timeStamp: number | &quot;Auto&quot;) → EmbedBuilder Sets the timestamp of the embed.  "},{"title":"_resolve​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#_resolve","content":"Internal since 0.2.0 &lt;/&gt; EmbedBuilder:_resolve() → {any} Resolves the data within the embed to be used for webhooks. "}]
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5828],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),p=a,f=d["".concat(l,".").concat(p)]||d[p]||m[p]||o;return t?r.createElement(f,s(s({ref:n},u),{},{components:t})):r.createElement(f,s({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},887:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const o={sidebar_position:1},s=void 0,i={unversionedId:"APIs/Advanced Examples/Ranking",id:"APIs/Advanced Examples/Ranking",title:"Ranking",description:"Note: We do have our own custom admin built into the module, if you'd like to use it head to this page",source:"@site/docs/APIs/Advanced Examples/Ranking.md",sourceDirName:"APIs/Advanced Examples",slug:"/APIs/Advanced Examples/Ranking",permalink:"/VibezAPI/docs/APIs/Advanced Examples/Ranking",draft:!1,editUrl:"https://github.com/ItsRune/VibezAPI/edit/master/docs/APIs/Advanced Examples/Ranking.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Webhooks",permalink:"/VibezAPI/docs/APIs/Examples/Webhooks"},next:{title:"Webhooks",permalink:"/VibezAPI/docs/APIs/Advanced Examples/Webhooks"}},l={},c=[{value:"Setting a rank using a custom admin",id:"setting-a-rank-using-a-custom-admin",level:3}],u={toc:c},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",null,"Note: We do have our own custom admin built into the module, if you'd like to use it head to this ",(0,a.kt)("a",{href:"/VibezAPI/docs/APIs/Commands/Adding%20Commands"},"page")," "),(0,a.kt)("p",null,"These are more intermediate examples for the ",(0,a.kt)("inlineCode",{parentName:"p"},"Ranking")," system, I'm expecting you to understand basic Lua syntax / concepts."),(0,a.kt)("h3",{id:"setting-a-rank-using-a-custom-admin"},"Setting a rank using a custom admin"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--// Services \\\\--\nlocal Players = game:GetService("Players")\n\n--// Variables \\\\--\nlocal Prefix = "!"\nlocal Vibez = require(14946453963)("API Key"):waitUntilLoaded()\n\n--// Functions \\\\--\nlocal function findPlayers(Player: Player, Argument: string)\n    local args = string.split(string.lower(tostring(Argument)), ",")\n    local found = {}\n\n    -- Loop the arguments to check specific cases\n    for _, info in pairs(args) do\n        local result = nil\n        if info == "me" then\n            result = Player\n        elseif info == "all" then\n            result = Players:GetPlayers()\n        elseif info == "others" then\n            result = Players:GetPlayers()\n            table.remove(result, table.find(result, Player))\n        else\n            result = Players:FindFirstChild(info)\n        end\n\n        if typeof(result) == "Instance" then\n            table.insert(found, result)\n        elseif typeof(result) == "table" then\n            table.insert(found, table.unpack(result))\n        end\n    end\n\n    return found\nend\n\nlocal function onPlayerAdded(Player: Player)\n    -- You can also put a permission check before setting up to handle commands.\n    Player.Chatted:Connect(function(Message: string)\n        -- Permission check\n        -- Make your own permission system\n\n        -- Can be as basic as a rank check or as complex as a custom permission system\n\n        -- Prefix check\n        if string.sub(string.lower(Message), 1, #Prefix) ~= Prefix then\n            return\n        end\n\n        local command = string.split(string.lower(Message), " ")[1]\n        local funcs = {\n            ["promote"] = "Promote";\n            ["demote"] = "Demote";\n            ["fire"] = "Fire";\n            ["setrank"] = "setRank";\n        }\n\n        local methodToUse = funcs[command]\n        if not methodToUse then\n            return\n        end\n\n        local users = findPlayers(Player, string.split(Message, " ")[2])\n        for _, user in pairs(users) do\n            -- Since we\'re using \'[]\' aka \'.\' notation, we need to pass the table as the first argument\n            Vibez[methodToUse](Vibez, user.UserId, tonumber(string.split(Message, " ")[2]), Player.UserId, Player.Name)\n        end\n    end)\nend\n')))}m.isMDXComponent=!0}}]);
[{"title":"Webhooks","type":0,"sectionRef":"#","url":"/VibezAPI/api/Webhooks","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#functions","content":" "},{"title":"setWebhook​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setWebhook","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:setWebhook(newWebhook: string) → Webhooks Sets the webhook to a new one.  "},{"title":"setContent​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setContent","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:setContent(content: string) → Webhooks Sets the content of the webhook.  "},{"title":"setUsername​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setUsername","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:setUsername(username: string) → Webhooks Sets the username of the webhook.  "},{"title":"addEmbedWithBuilder​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#addEmbedWithBuilder","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:addEmbedWithBuilder(...: ...(embedCreator: Embed) → Embed) → Webhooks Creates an embed with the embed creator.  "},{"title":"addEmbed​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#addEmbed","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:addEmbed(data: {[string]: any}) → Webhooks Creates an embed with table data.  "},{"title":"setTTS​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setTTS","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:setTTS(override: boolean?) → Webhooks Toggles text-to-speech. Default: Disabled  "},{"title":"setData​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setData","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:setData(data: {any}) → Webhooks Sets the data of the webhook. (Overwriting anything specified before)  "},{"title":"Destroy​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#Destroy","content":"since 1.1.0 &lt;/&gt; Webhooks:Destroy() → nil Destroys the hook class.  "},{"title":"Send​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#Send","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.1.0 &lt;/&gt; Webhooks:Send() → httpResponse Posts a new webhook. "},{"title":"ActivityTracker","type":0,"sectionRef":"#","url":"/VibezAPI/api/ActivityTracker","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#properties","content":" "},{"title":"isLeaving​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#isLeaving","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ActivityTracker.isLeaving: boolean   "},{"title":"isAfk​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#isAfk","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ActivityTracker.isAfk: boolean  "},{"title":"Functions​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#new","content":"since 1.0.0 &lt;/&gt; ActivityTracker.new( VibezAPI: VibezAPI, forPlayer: Player ) → ActivityTracker Creates a new activity object for the player.  "},{"title":"Increment​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#Increment","content":"since 1.0.0 &lt;/&gt; ActivityTracker:Increment() → nil Increments the player's seconds.  "},{"title":"Chatted​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#Chatted","content":"since 1.0.0 &lt;/&gt; ActivityTracker:Chatted() → nil Increments the player's chat messages.  "},{"title":"Left​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#Left","content":"since 1.0.0 &lt;/&gt; ActivityTracker:Left() → nil Sets the player's state to 'Leaving'.  "},{"title":"changeAfkState​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#changeAfkState","content":"since 1.0.0 &lt;/&gt; ActivityTracker:changeAfkState(override: boolean?) → nil Toggles if the player is afk or not.  "},{"title":"Destroy​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#Destroy","content":"since 1.0.0 &lt;/&gt; ActivityTracker:Destroy() → nil Destroys the class. "},{"title":"RateLimiter","type":0,"sectionRef":"#","url":"/VibezAPI/api/RateLimiter","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#types","content":" "},{"title":"RateLimit​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#RateLimit","content":"&lt;/&gt; interface RateLimit { isLimited: boolean _retryAfter: number _counter: number _maxCounter: number _counterStartedAt: number }  "},{"title":"Functions​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#functions","content":" "},{"title":"Check​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#Check","content":"since 1.0.0 &lt;/&gt; RateLimiter:Check() → ( boolean, string? ) Checks to see if the developer is currently being rate limited. "},{"title":"Widgets","type":0,"sectionRef":"#","url":"/VibezAPI/api/Widgets","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Widgets","url":"/VibezAPI/api/Widgets#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Widgets","url":"/VibezAPI/api/Widgets#new","content":"since 2.3.7 &lt;/&gt; Widgets.new( api: VibezAPI, Type: Types.widgetTypes ) → Widgets Creates discord embed widgets when given a part. (SurfaceGui) Or a normal screen gui.  "},{"title":"addWidget​","type":1,"pageTitle":"Widgets","url":"/VibezAPI/api/Widgets#addWidget","content":"since 2.3.7 &lt;/&gt; Widgets:addWidget(base: Part | MeshPart | UnionOperation ) → boolean Adds a new widget onto the associated 'base' part.  "},{"title":"updateTheme​","type":1,"pageTitle":"Widgets","url":"/VibezAPI/api/Widgets#updateTheme","content":"since 2.3.7 &lt;/&gt; Widgets:updateTheme( backgroundColor: (Color3 | string)?, foregroundColor: (Color3 | string)?, textColor: (Color3 | string)? ) → () Changes the theme colors of the widgets.  "},{"title":"addForPlayer​","type":1,"pageTitle":"Widgets","url":"/VibezAPI/api/Widgets#addForPlayer","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 2.3.7 &lt;/&gt; Widgets:addForPlayer(Player: Player ) → () Adds a new player to show the widget to. note This method checks the player's policy to make sure games don't show widgets to users who aren't supposed to view them. Read up more on PolicyService to learn more!  "},{"title":"_updateForPlayers​","type":1,"pageTitle":"Widgets","url":"/VibezAPI/api/Widgets#_updateForPlayers","content":"since 2.3.7 &lt;/&gt; Widgets:_updateForPlayers() → () Updates for all players who have the policy allowing them to see the specified widget.  "},{"title":"Destroy​","type":1,"pageTitle":"Widgets","url":"/VibezAPI/api/Widgets#Destroy","content":"since 2.3.7 &lt;/&gt; Widgets:Destroy() → () Destroys the class and disconnects any used RBXScriptConnections. "},{"title":"EmbedBuilder","type":0,"sectionRef":"#","url":"/VibezAPI/api/EmbedBuilder","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#functions","content":" "},{"title":"setDescription​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setDescription","content":"Required Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:setDescription(description: string) → EmbedBuilder Adds a description to the embed.  "},{"title":"setTitle​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setTitle","content":"Required Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:setTitle(title: string) → EmbedBuilder Adds a title to the embed.  "},{"title":"addField​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#addField","content":"Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:addField( name: string, value: string, isInline: boolean ) → EmbedBuilder Adds a field to the embed.  "},{"title":"clearFields​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#clearFields","content":"Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:clearFields() → EmbedBuilder Clears the fields data.  "},{"title":"setFooter​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setFooter","content":"Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:setFooter( text: string, iconUrl: string? ) → EmbedBuilder Sets a footer to the embed.  "},{"title":"setThumbnail​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setThumbnail","content":"Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:setThumbnail( url: string, height: number?, width: number? ) → EmbedBuilder Sets the embed thumbnail.  "},{"title":"setColor​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setColor","content":"Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:setColor(color: Color3 | string | number) → EmbedBuilder Sets the color of the embed.  "},{"title":"setAuthor​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setAuthor","content":"Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:setAuthor( name: string, url: string?, iconUrl: string? ) → EmbedBuilder Sets the author of the embed. "},{"title":"Ranking","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Advanced Examples/Ranking","content":"","keywords":""},{"title":"Note: We do have our own custom admin built into the module, if you'd like to use it head to this page","type":1,"pageTitle":"Ranking","url":"/VibezAPI/docs/Advanced Examples/Ranking##","content":"These are more intermediate examples for the Ranking system, I'm expecting you to understand basic Lua syntax / concepts. "},{"title":"Setting a rank using a custom admin​","type":1,"pageTitle":"Ranking","url":"/VibezAPI/docs/Advanced Examples/Ranking#setting-a-rank-using-a-custom-admin","content":"--// Services \\\\-- local Players = game:GetService(&quot;Players&quot;) --// Variables \\\\-- local Prefix = &quot;!&quot; local Vibez = require(14946453963)(&quot;API Key&quot;):waitUntilLoaded() --// Functions \\\\-- local function findPlayers(Player: Player, Argument: string) local args = string.split(string.lower(tostring(Argument)), &quot;,&quot;) local found = {} -- Loop the arguments to check specific cases for _, info in pairs(args) do local result = nil if info == &quot;me&quot; then result = Player elseif info == &quot;all&quot; then result = Players:GetPlayers() elseif info == &quot;others&quot; then result = Players:GetPlayers() table.remove(result, table.find(result, Player)) else result = Players:FindFirstChild(info) end if typeof(result) == &quot;Instance&quot; then table.insert(found, result) elseif typeof(result) == &quot;table&quot; then table.insert(found, table.unpack(result)) end end return found end local function onPlayerAdded(Player: Player) -- You can also put a permission check before setting up to handle commands. Player.Chatted:Connect(function(Message: string) -- Permission check -- Make your own permission system -- Can be as basic as a rank check or as complex as a custom permission system -- Prefix check if string.sub(string.lower(Message), 1, #Prefix) ~= Prefix then return end local command = string.split(string.lower(Message), &quot; &quot;)[1] local funcs = { [&quot;promote&quot;] = &quot;Promote&quot;; [&quot;demote&quot;] = &quot;Demote&quot;; [&quot;fire&quot;] = &quot;Fire&quot;; [&quot;setrank&quot;] = &quot;setRank&quot;; } local methodToUse = funcs[command] if not methodToUse then return end local users = findPlayers(Player, string.split(Message, &quot; &quot;)[2]) for _, user in pairs(users) do -- Since we're using '[]' aka '.' notation, we need to pass the table as the first argument Vibez[methodToUse](Vibez, user.UserId, tonumber(string.split(Message, &quot; &quot;)[2]), Player.UserId, Player.Name) end end) end  "},{"title":"VibezAPI","type":0,"sectionRef":"#","url":"/VibezAPI/api/VibezAPI","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#functions","content":" "},{"title":"new​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#new","content":"Constructor &lt;/&gt; VibezAPI.new( apiKey: string,-- Your Vibez API key. extraOptions: extraOptionsType-- Extra settings to configure the api to work for you. ) → VibezAPI "},{"title":"Types","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI##","content":""},{"title":"​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#extraOptionsType","content":"interface extraOptionsType { Commands: { Enabled: boolean, useDefaultNames: boolean, MinRank: number&lt;0-255&gt;, MaxRank: number&lt;0-255&gt;, Prefix: string, Alias: {string?} } RankSticks: { Enabled: boolean, MinRank: number&lt;0-255&gt;, MaxRank: number&lt;0-255&gt;, SticksModel: Model? } Interface: { Enabled: boolean, MinRank: number&lt;0-255&gt;, MaxRank: number&lt;0-255&gt; } Notifications: { Enabled: boolean, Position: String } ActivityTracker: { Enabled: boolean, MinRank: number&lt;0-255&gt;, disabledWhenInStudio: boolean, delayBeforeMarkedAFK: number, kickIfFails: boolean, failMessage: string } Misc: { originLoggerText: string, ignoreWarnings: boolean, rankingCooldown: number, overrideGroupCheckForStudio: boolean, isAsync: boolean, usePromises: boolean } }   Notice This method can be used as a normal function or invoke the &quot;.new&quot; function: require(14946453963)(&quot;API Key&quot;) require(14946453963).new(&quot;API Key&quot;) Constructs the main Vibez API class. local myKey = &quot;YOUR_API_KEY_HERE&quot; local VibezAPI = require(14946453963) local Vibez = VibezAPI(myKey)   "},{"title":"getGroupId​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getGroupId","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.0.0 &lt;/&gt; VibezAPI:getGroupId() → number | -1 Fetches the group associated with the api key.  "},{"title":"setRankStickTool​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#setRankStickTool","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.3.0 &lt;/&gt; VibezAPI:setRankStickTool(tool: Tool | Model ) → () Sets the ranking stick's tool.  "},{"title":"setRank​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#setRank","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.0.0 &lt;/&gt; VibezAPI:setRank( userId: string | number, rankId: string | number, whoCalled: { userName: string, userId: number }? ) → rankResponse Sets the rank of a player and whoCalled (Optional) is used for logging purposes.  "},{"title":"Promote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Promote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.0.0 &lt;/&gt; VibezAPI:Promote( userId: string | number, whoCalled: { userName: string, userId: number }? ) → rankResponse Promotes a player and whoCalled (Optional) is used for logging purposes.  "},{"title":"Demote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Demote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.0.0 &lt;/&gt; VibezAPI:Demote( userId: string | number, whoCalled: { userName: string, userId: number }? ) → rankResponse Demotes a player and whoCalled (Optional) is used for logging purposes.  "},{"title":"Fire​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Fire","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.0.0 &lt;/&gt; VibezAPI:Fire( userId: string | number, whoCalled: { userName: string, userId: number }? ) → rankResponse Fires a player and whoCalled (Optional) is used for logging purposes.  "},{"title":"addCommand​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#addCommand","content":"since 2.3.6 &lt;/&gt; VibezAPI:addCommand( commandName: string, commandAliases: {string}?, commandOperation: ( Player: Player , Args: {string}, addLog: ( calledBy: Player , Action: string, affectedUsers: {Player }?, ...any ) → { calledBy: Player , affectedUsers: {Player }?, affectedCount: number?, Metadata: any } ) → () ) → VibezAPI Creates a new command within our systems.  "},{"title":"addCommandOperation​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#addCommandOperation","content":"Chainable since 1.0.0 &lt;/&gt; VibezAPI:addCommandOperation( operationName: string, operationCode: string, operationFunction: ( playerToCheck: Player , incomingArgument: string, internalFunctions: vibezCommandFunctions ) → boolean ) → VibezAPI Adds a command operation code. caution This method will not work if there's already an existing operation name! -- This operation comes by default, no need to rewrite it. Vibez:addCommandOperation( &quot;Team&quot;, -- Name of the operation. &quot;%&quot;, -- Prefix before the operation argument. function(playerToCheck: Player, incomingArgument: string, internalFunctions) return playerToCheck.Team ~= nil and string.sub(string.lower(playerToCheck.Team.Name), 0, #incomingArgument) == string.lower(incomingArgument) end ) The internalFunctions parameter contains a table of functions that are meant to ease the developmental process of operations. Here's an example of one of them being used: Vibez:addCommandOperation( &quot;SHR&quot;, -- Name of the operation. &quot;shr&quot;, -- Prefix before the operation argument. function(playerToCheck: Player, incomingArgument: string, internalFunctions) local playerGroupInfo = internalFunctions ._getGroupFromUser(Vibez, Vibez.GroupId, playerToCheck.UserId):await() return playerGroupInfo.Rank &gt;= 250 end )   "},{"title":"removeCommandOperation​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#removeCommandOperation","content":"Chainable since 1.0.0 &lt;/&gt; VibezAPI:removeCommandOperation(operationName: string) → VibezAPI Removes a command operation code. Vibez:removeCommandOperation(&quot;Team&quot;)   "},{"title":"updateLoggerName​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#updateLoggerName","content":"Chainable since 1.0.0 &lt;/&gt; VibezAPI:updateLoggerName(newTitle: string) → nil Updates the logger's origin name.  "},{"title":"updateKey​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#updateKey","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.0.0 &lt;/&gt; VibezAPI:updateKey(newApiKey: string) → boolean Updates the api key.  "},{"title":"Destroy​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Destroy","content":"since 1.0.0 &lt;/&gt; VibezAPI:Destroy() → () Destroys the VibezAPI class.  "},{"title":"toggleUI​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#toggleUI","content":"since 1.0.0 &lt;/&gt; VibezAPI:toggleUI(override: boolean?) → nil Toggles the client promote/demote/fire UI.  "},{"title":"getWebhookBuilder​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getWebhookBuilder","content":"since 1.0.0 &lt;/&gt; VibezAPI:getWebhookBuilder(webhook: string) → VibezHooks Initializes the Hooks class with the specified webhook.  "},{"title":"addBlacklist​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#addBlacklist","content":"since 1.1.0 &lt;/&gt; VibezAPI:addBlacklist( userToBlacklist: (Player string | number), Reason: string?, blacklistExecutedBy: (Player string | number)? ) → blacklistResponse Adds a blacklist to your api key.  "},{"title":"deleteBlacklist​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#deleteBlacklist","content":"since 1.1.0 &lt;/&gt; VibezAPI:deleteBlacklist(userToDelete: (Player string | number)) → blacklistResponse Deletes a blacklist from your api key.  "},{"title":"getBlacklists​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getBlacklists","content":"since 1.1.0 &lt;/&gt; VibezAPI:getBlacklists(userId: (string | number)?) → blacklistResponse Gets either a full list of blacklists or checks if a player is currently blacklisted.  "},{"title":"isUserBlacklisted​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#isUserBlacklisted","content":"since 1.1.0 &lt;/&gt; VibezAPI:isUserBlacklisted(userId: (string | number)?) → blacklistResponse Gets either a full list of blacklists or checks if a player is currently blacklisted.  "},{"title":"waitUntilLoaded​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#waitUntilLoaded","content":"Chainable since 1.0.0 &lt;/&gt; VibezAPI:waitUntilLoaded() → VibezAPI? Gets a player's or everyone's current activity  "},{"title":"getActivity​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getActivity","content":"since 1.0.0 &lt;/&gt; VibezAPI:getActivity(userId: (string | number)?) → activityResponse Gets a player's or everyone's current activity  "},{"title":"saveActivity​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#saveActivity","content":"since 1.0.0 &lt;/&gt; VibezAPI:saveActivity( userId: string | number, userRank: number, secondsSpent: number, messagesSent: (number | {string})?, shouldFetchGroupRank: boolean? ) → httpResponse Saves the player's current activity "},{"title":"Blacklists","type":0,"sectionRef":"#","url":"/VibezAPI/docs/APIs/Blacklists","content":"","keywords":""},{"title":"What does blacklisting do?​","type":1,"pageTitle":"Blacklists","url":"/VibezAPI/docs/APIs/Blacklists#what-does-blacklisting-do","content":"Blacklisting a user will prevent them from doing anything that uses your API key. This includes the usage of our application center and ranking center. This is useful in case you have a user that is causing havoc in your games. Think of this as a ban system attached to your API key. "},{"title":"How do I blacklist a user?​","type":1,"pageTitle":"Blacklists","url":"/VibezAPI/docs/APIs/Blacklists#how-do-i-blacklist-a-user","content":"To blacklist a user, you'd just require the module as normal and call the addBlacklist method. local Vibez = require(14946453963)(&quot;My API Key&quot;) Vibez:addBlacklist(1234567890) -- Adds a new blacklist with an &quot;Unknown&quot; reason Vibez:addBlacklist(1234567890, &quot;My reason.&quot;) -- Adds a new blacklist with a provided reason. Vibez:addBlacklist(1234567890, &quot;My reason.&quot;, 1) -- Adds a new blacklist with a provided reason and says ROBLOX blacklisted them.  "},{"title":"How do I remove a blacklist?​","type":1,"pageTitle":"Blacklists","url":"/VibezAPI/docs/APIs/Blacklists#how-do-i-remove-a-blacklist","content":"To remove a blacklist, you'd just call the deleteBlacklist method. local Vibez = require(14946453963)(&quot;My API Key&quot;) Vibez:deleteBlacklist(1234567890) -- Removes a blacklist with the provided user id.  "},{"title":"How do I check a blacklist?​","type":1,"pageTitle":"Blacklists","url":"/VibezAPI/docs/APIs/Blacklists#how-do-i-check-a-blacklist","content":"To check a blacklist, you'd just call the isUserBlacklisted method. local Vibez = require(14946453963)(&quot;My API Key&quot;) local isBlacklisted, blacklistReason, blacklistedBy = Vibez:isUserBlacklisted(1234567890)  "},{"title":"How do I get all blacklists?​","type":1,"pageTitle":"Blacklists","url":"/VibezAPI/docs/APIs/Blacklists#how-do-i-get-all-blacklists","content":"To get all blacklists, you'd just call the getBlacklists method. local Vibez = require(14946453963)(&quot;My API Key&quot;) local blacklists = Vibez:getBlacklists()  "},{"title":"Command Operation Codes","type":0,"sectionRef":"#","url":"/VibezAPI/docs/APIs/Commands/Command Operation Codes","content":"","keywords":""},{"title":"What are command operation codes?​","type":1,"pageTitle":"Command Operation Codes","url":"/VibezAPI/docs/APIs/Commands/Command Operation Codes#what-are-command-operation-codes","content":"Command operation codes are shorteners that allow you to use less characters when sending commands to the API. For example, instead of saying game.Teams[&quot;myTeam&quot;] as a command argument, you can send #myTeam. Operation codes can be anything you'd like, as long as they don't conflict with any other operation codes. We'd also recommend not using commas as your operation code, as it will conflict with the command argument separator.  "},{"title":"Default Codes​","type":1,"pageTitle":"Command Operation Codes","url":"/VibezAPI/docs/APIs/Commands/Command Operation Codes#default-codes","content":"Name\tCode\tDescriptionTeam\t%\tChecks for a given team name Rank\tr:\tChecks the player's rank with a tolerance shortenedUsername\tNone\tChecks for a portion of a player's username External\te:\tGets a player that is not in the server  "},{"title":"How do they work?​","type":1,"pageTitle":"Command Operation Codes","url":"/VibezAPI/docs/APIs/Commands/Command Operation Codes#how-do-they-work","content":"Command operations work by first splitting the sent command, then checking if the first argument is an operation code. If it is, it will run the operation code function and return the result. If it isn't, it will return the command argument as is. For example, if you sent %myTeam as a command argument, it would split the command into % and myTeam. It would then check if % is an operation code, and if it is, it will run the operation code function and return the result. If it isn't, it will return the command argument as is.  "},{"title":"How to use​","type":1,"pageTitle":"Command Operation Codes","url":"/VibezAPI/docs/APIs/Commands/Command Operation Codes#how-to-use","content":"To create a new operation code, you'll use the :addCommandOperation method. This method takes three arguments: the operation name, the operation prefix, and the operation function. The operation function must return a boolean value, if it does not the operation will not work. local VibezAPI = require(14946453963)(&quot;myApiKey&quot;) VibezAPI:addCommandOperation(&quot;Rank&quot;, &quot;r:&quot;, function(playerToCheck: Player, incomingArgument: string) -- Operation code is automatically removed from the 'incomingArgument'. local rank, tolerance = table.unpack(string.split(incomingArgument, &quot;:&quot;)) -- Make sure the rank is a number. if not tonumber(rank) then return false end -- Make sure the tolerance is a valid tolerance. tolerance = tolerance or &quot;&lt;=&quot; -- 'GetRankInGroup' caches when it's first called, this will not update if their rank changes. local isOk, currentPlayerRank = pcall( playerToCheck.GetRankInGroup, playerToCheck, tonumber(rank) ) -- Make sure the player is in the group and their rank was fetched. if not isOk or currentPlayerRank == 0 then return false end -- Check the tolerances if tolerance == &quot;&lt;=&quot; then return currentPlayerRank &lt;= tonumber(rank) elseif tolerance == &quot;&gt;=&quot; then return currentPlayerRank &gt;= tonumber(rank) elseif tolerance == &quot;&lt;&quot; then return currentPlayerRank &lt; tonumber(rank) elseif tolerance == &quot;&gt;&quot; then return currentPlayerRank &gt; tonumber(rank) elseif tolerance == &quot;==&quot; then return currentPlayerRank == tonumber(rank) end -- If the tolerance is invalid, return false. return false end)  Now, you can use the operation code in your commands: !promote r:3:&lt;=  "},{"title":"How to remove operation codes​","type":1,"pageTitle":"Command Operation Codes","url":"/VibezAPI/docs/APIs/Commands/Command Operation Codes#how-to-remove-operation-codes","content":"To remove an operation code, you'll use the :removeCommandOperation method. This method takes one argument: the operation name. If you don't like how one operation code performs that was made by us, you can simply remove it. VibezAPI:removeCommandOperation(&quot;Rank&quot;) -- Removes the default rank operation code.  "},{"title":"Activity Tracking","type":0,"sectionRef":"#","url":"/VibezAPI/docs/APIs/Activity Tracking","content":"","keywords":""},{"title":"How does the activity tracking work?​","type":1,"pageTitle":"Activity Tracking","url":"/VibezAPI/docs/APIs/Activity Tracking#how-does-the-activity-tracking-work","content":"The activity tracker works by using object orientated programming that creates specific functions to call upon each staff member within the game. This allows for a more efficient way of tracking staff members and their activity. The activity tracker is also able to track the amount of time a staff member has been active for, and the amount of time they have been inactive for. This allows for a more accurate representation of how active a staff member is. NOTE: Inactivity is not sent to Vibez API, it is only used for the activity tracker. "},{"title":"How do I use the activity tracker?​","type":1,"pageTitle":"Activity Tracking","url":"/VibezAPI/docs/APIs/Activity Tracking#how-do-i-use-the-activity-tracker","content":"The activity tracker is very simple to use. All you need to do is require the main module and change an option to true. local Vibez = require(14946453963)(&quot;API Key&quot;, { ActivityTracker = { Enabled = true, -- Enabled the tracker for players. MinRank = 255, -- The minimum rank that a staff member must be to be tracked. } })  In addition to this setting is a couple of other settings that you can change to your liking. These settings are as follows: Setting\tType\tDescriptionEnabled\tboolean\tWhether or not the activity tracker is enabled. MinRank\tnumber\tThe minimum rank that a staff member must be to be tracked. disableWhenInStudio\tboolean\tDisables when studio play testing. disableWhenAFK\tboolean\tDisables when player is detected as AFK. disableWhenInPrivateServer\tboolean\tDisables when player is in a private server. delayBeforeMarkedAFK\tnumber\tThe amount of seconds to wait before the player is marked AFK. kickIfFails\tboolean\tSometimes ROBLOX can mess up player initialization, when this occurs it can cause the activity tracker to not setup with the player. Would you like to kick the player when this happens? failMessage\tstring\tThe message to kick the player with when kickIfFails is enabled. "},{"title":"How do I get the activity of a staff member?​","type":1,"pageTitle":"Activity Tracking","url":"/VibezAPI/docs/APIs/Activity Tracking#how-do-i-get-the-activity-of-a-staff-member","content":"Getting the activity of a staff member is very simple. All you need to do is call the getActivity function on the Vibez object. local Vibez = require(14946453963)(&quot;API Key&quot;, { ActivityTracker = { Enabled = true, MinRank = 255, } }) local activity = Vibez:getActivity(107392833) -- 107392833 is the user id of the staff member  TIP: If you'd like to get everyone's activity... Don't put a user id in the getActivity function. "},{"title":"How do I add seconds to a specific player?​","type":1,"pageTitle":"Activity Tracking","url":"/VibezAPI/docs/APIs/Activity Tracking#how-do-i-add-seconds-to-a-specific-player","content":"Vibez allows for customization when necessary, if you're writing your own activity tracker you can achieve this with the saveActivity method that the wrapper provides. local Vibez = require(14946453963)(&quot;API Key&quot;, { ActivityTracker = { Enabled = true, MinRank = 255, } }) local function addSecondsToPlayer(UserId: number, userRank: number, secondsSpent: number, messagesSent: number) Vibez:saveActivity(UserId, userRank, secondsSpent, messagesSent) end local function addSecondsToPlayerWithoutRank(UserId: number, secondsSpent: number, messagesSent: number) Vibez:saveActivity(UserId, nil, secondsSpent, messagesSent, true) end -- Example usage -- adding 10 seconds and 5 messages addSecondsToPlayer(107392833, 250, 10, 5) addSecondsToPlayerWithoutRank(107392833, 10, 5)  "},{"title":"Adding Commands","type":0,"sectionRef":"#","url":"/VibezAPI/docs/APIs/Commands/Adding Commands","content":"Adding Commands Do our commands not fit your purpose? Well, luckily for you we made this simple to use method that allows you to create your own commands. This method is called :addCommand. This method takes three arguments: the command name, any command aliases you'd like to use, and lastyl the command's executing function. local VibezAPI = require(14946453963)(&quot;myApiKey&quot;) VibezAPI:addCommand(&quot;myCommand&quot;, {}, function(player: Player, commandArguments: {string}) -- &quot;player&quot; is the Player who ran the command -- &quot;commandArguments&quot; are the extra arguments sent with the command warn(player.Name .. &quot; ran the command with the arguments: &quot; .. table.concat(commandArguments, &quot;, &quot;)) end) Now, you can use the command in-game: !myCommand... But this command isn't really useful. let's make some changes and use a private method to get the player from the command arguments. The private method we'll be using is :_getPlayers. This method takes two arguments: the player who ran the command and the command arguments. This method will return a table of players who were found from the command arguments. If no players were found, it will return an empty table. On a side note, I can't stress this enough. There are many things in the API that are marked private, and you shouldn't use them. If you do, we are not to blame for anything you accidentally break/leak. If you do want insights on how to use private methods, you can see all private methods when on the API page by clicking the &quot;Show Private&quot; button. Anything starting with an &quot;_&quot; is a private method/variable. local VibezAPI = require(14946453963)(&quot;myApiKey&quot;) VibezAPI:addCommand(&quot;myCommand&quot;, {&quot;myCmd&quot;}, function(player: Player, commandArguments: {string}) -- &quot;player&quot; is the Player who ran the command -- &quot;commandArguments&quot; are the extra arguments sent with the command if #commandArguments == 0 then -- Returning will stop the rest of the function from running. return end -- If you want to get players from the command arguments, the method is technically -- private, but you can still use it. It's called &quot;:_getPlayers&quot;. This method will -- use the existing command operations to get players from the command arguments. -- example: -- local playersFromArgs = VibezAPI:_getPlayers(player, commandArguments) local users = VibezAPI:_getPlayers(player, commandArguments) -- Always check if the user exists before doing anything with it. if not users or not users[1] then return end local userActivity = VibezAPI:getActivity(users[1]) warn(userActivity) -- Maybe pipe to a remote? Up to you. end) Okay, !myCommand now gets any player who's in game's activity and warns it into the output... That's not really useful, but it's a start.","keywords":""},{"title":"Webhooks","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Advanced Examples/Webhooks","content":"","keywords":""},{"title":"Note: You do NOT need every example in your game, just pick and choose what you'd like.","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Advanced Examples/Webhooks##","content":""},{"title":"Logs​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Advanced Examples/Webhooks#logs","content":"For any kind of logs that require an on server start-up event, you should use :waitUntilLoaded() to ensure that the API is loaded before you try to use it. You also have to set isAsync to true in the API settings. "},{"title":"Join Logs​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Advanced Examples/Webhooks#join-logs","content":"Preview:  local Players = game:GetService(&quot;Players&quot;) local Vibez = require(14946453963)(&quot;API Key&quot;, { isAsync = true }) Players.PlayerAdded:Connect(function(Player) local api = Vibez:waitUntilLoaded() if api == nil then error(&quot;API Failed to load!&quot;) end local webhook = api:getWebhookBuilder(&quot;https://discord.com/api/webhooks/&quot;) webhook:setContent( `[**{Player.Name}**](&lt;https://roblox.com/users/{Player.UserId}/profile&gt;) has joined the game!` ):Send() end)  "},{"title":"Leave Logs​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Advanced Examples/Webhooks#leave-logs","content":"Preview:  local Players = game:GetService(&quot;Players&quot;) local Vibez = require(14946453963)(&quot;API Key&quot;, { isAsync = true }) Players.PlayerRemoving:Connect(function(Player) local api = Vibez:waitUntilLoaded() if api == nil then error(&quot;API Failed to load!&quot;) end local webhook = api:getWebhookBuilder(&quot;https://discord.com/api/webhooks/&quot;) webhook:setContent( `[**{Player.Name}**](&lt;https://roblox.com/users/{Player.UserId}/profile&gt;) has left the game!` ):Send() end)  "},{"title":"Message Logs​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Advanced Examples/Webhooks#message-logs","content":"Preview:  local Players = game:GetService(&quot;Players&quot;) local Vibez = require(14946453963)(&quot;API Key&quot;, { isAsync = true }) Players.PlayerAdded:Connect(function(Player) local api = Vibez:waitUntilLoaded() if api == nil then error(&quot;API Failed to load!&quot;) end Player.Chatted:Connect(function(Message: string) local webhook = api:getWebhookBuilder(&quot;https://discord.com/api/webhooks/&quot;) webhook:setContent( `\\[[**{Player.Name}**](&lt;https://roblox.com/users/{Player.UserId}/profile&gt;)\\]: {Message}` ):Send() end) end)  "},{"title":"Ranking","type":0,"sectionRef":"#","url":"/VibezAPI/docs/APIs/Ranking","content":"","keywords":""},{"title":"How to use​","type":1,"pageTitle":"Ranking","url":"/VibezAPI/docs/APIs/Ranking#how-to-use","content":"At the moment there are only 4 ranking actions you can perform: Promote, Demote, Fire, and SetRank. Each of these actions have the same parameters, except for SetRank which has an extra parameter. The parameters are as follows: Parameter\tType\tDescription\tsetRank OnlyPlayer\tstring or number\tThe user ID/Name of the worker you want to rank.\t❌ Rank\tstring or number\tThe rank ID/Name/RoleId you want to rank the worker to.\t✔ "},{"title":"What's the difference between Promote and promoteWithCaller?​","type":1,"pageTitle":"Ranking","url":"/VibezAPI/docs/APIs/Ranking#whats-the-difference-between-promote-and-promotewithcaller","content":"Under the hood, the Promote method uses promoteWithCaller to rank the player. When using Promote you'll receive a discord log of &quot;An automatic system has triggered a ranking action.&quot; instead of &quot;Username (UserId) has triggered a ranking action.&quot;. This is because Promote is used for automatic ranking, and promoteWithCaller is used for commands/interface/ranking-stick promotions, allowing the API to distinguish between promotions with and without a player manually firing the method. "},{"title":"Why isn't it working?​","type":1,"pageTitle":"Ranking","url":"/VibezAPI/docs/APIs/Ranking#why-isnt-it-working","content":"There's many reasons why the ranking API may fail, maybe your discord bot is offline, or maybe the worker is already ranked to the rank you're trying to rank them to. If you're having issues with the ranking API, please join our discord below and ask for help in the support channel.  "},{"title":"Application Center","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Centers/Application Center","content":"","keywords":""},{"title":"Implementation​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#implementation","content":"First things first, you'll need to download it here. Once you've done that, you'll need to open the file and publish to your group as a new game. Afterwards you're ready to customize it to your liking. "},{"title":"Customization​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#customization","content":""},{"title":"Important​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#important","content":"To use the rank center, you need to ensure you publish the game and that you have Allow Third Party Teleports enabled.  "},{"title":"Configuration​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#configuration","content":"Placeholder "},{"title":"Chainable","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Chainable","content":"","keywords":""},{"title":"What is chainable?​","type":1,"pageTitle":"Chainable","url":"/VibezAPI/docs/Chainable#what-is-chainable","content":"Chainablility is a feature that allows you to chain methods together. For example, instead of doing this: local VibezAPI = require(14946453963)(&quot;myApiKey&quot;) local myWebhook = VibezAPI:getWebhookBuilder(&quot;Discord Webhook Link&quot;) myWebhook:setTitle(&quot;my title&quot;) myWebhook:setDescription(&quot;my description&quot;)  You can do this: local VibezAPI = require(14946453963)(&quot;myApiKey&quot;) local myWebhook = VibezAPI:getWebhookBuilder(&quot;Discord Webhook Link&quot;) myWebhook :setTitle(&quot;my title&quot;) :setDescription(&quot;my description&quot;)  Which not only saves lines but also makes it easier to read!  "},{"title":"How does it work?​","type":1,"pageTitle":"Chainable","url":"/VibezAPI/docs/Chainable#how-does-it-work","content":"Chainability works by returning the class instance after every method call. This allows you to call another method on the class instance without having to reuse the variable name. For example, if you wanted to remove an operation code then immediately promote someone, you could do this: local VibezAPI = require(14946453963)(&quot;myApiKey&quot;) local playerToRank = game.Players:GetPlayers()[1] VibezAPI:updateLoggerName(&quot;Custom Rank&quot;):setRank(playerToRank, 1)   "},{"title":"How do I know if a method is chainable?​","type":1,"pageTitle":"Chainable","url":"/VibezAPI/docs/Chainable#how-do-i-know-if-a-method-is-chainable","content":"If a method is chainable, it will be marked with a Chainable tag in the documentation. For example, the updateLoggerName method is chainable, so it will be marked with a Chainable tag in the documentation. "},{"title":"Webhooks","type":0,"sectionRef":"#","url":"/VibezAPI/docs/APIs/Webhooks","content":"","keywords":""},{"title":"What are webhooks?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/APIs/Webhooks#what-are-webhooks","content":"Webhooks are a way to send messages to Discord channels without using a bot. They can be used to send messages to channels from external sources, such as a website or a game server. You can find more information about webhooks here. "},{"title":"How do I create a webhook?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/APIs/Webhooks#how-do-i-create-a-webhook","content":"You can get a webhook link by going to your Discord server settings.  Navigate to the &quot;Integrations&quot; page.  Click on &quot;Webhooks&quot; and &quot;New Webhook&quot;, customize it however you'd like and copy the webhook link.  "},{"title":"How do I send a message to a webhook?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/APIs/Webhooks#how-do-i-send-a-message-to-a-webhook","content":"Using Vibez's webhook api is very simple. You just need to create a webhook builder using the webhook link you got from the previous step. local VibezAPI = require(14946453963)(&quot;My API Key&quot;) local myWebhook = VibezAPI:getWebhookBuilder(&quot;Discord Webhook Link&quot;)  After that you can send a test message! myWebhook:setContent(&quot;Hello World!&quot;):Send()  Please look at information about chaining to learn more about how chaining benefits you. "},{"title":"How do I send an embed to a webhook?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/APIs/Webhooks#how-do-i-send-an-embed-to-a-webhook","content":"There are 2 ways to create an embed. First, you could use the built in embed builder: myWebhook:addEmbedWithBuilder(function(myEmbed) myEmbed:setTitle(&quot;my title&quot;) myEmbed:setDescription(&quot;my description&quot;) end):Send()  Or, you could create an embed using a table: myWebhook:addEmbed({ title = &quot;my title&quot;, description = &quot;my description&quot; }):Send()  "},{"title":"Why isn't my message sending?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/APIs/Webhooks#why-isnt-my-message-sending","content":"If your message isn't sending, it's possibly 2 issues. You didn't call :Send() at the end of your message.If you're using embeds, you didn't set the title/description of your embed. "},{"title":"Limitations​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/APIs/Webhooks#limitations","content":"There are some limitations to webhooks. For example, you can only send 10 embeds per message. You can find more information about these limitations here. "},{"title":"Rank Center","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Centers/Rank Center","content":"","keywords":""},{"title":"Implementation​","type":1,"pageTitle":"Rank Center","url":"/VibezAPI/docs/Centers/Rank Center#implementation","content":"First things first, you'll need to download it here. Once you've done that, you'll need to open the file and publish to your group as a new game. Afterwards you're ready to customize it to your liking. "},{"title":"Usage​","type":1,"pageTitle":"Rank Center","url":"/VibezAPI/docs/Centers/Rank Center#usage","content":""},{"title":"Important​","type":1,"pageTitle":"Rank Center","url":"/VibezAPI/docs/Centers/Rank Center#important","content":"To use the rank center, you need to ensure you publish the game and that you have Allow Third Party Teleports enabled.  "},{"title":"Configuration​","type":1,"pageTitle":"Rank Center","url":"/VibezAPI/docs/Centers/Rank Center#configuration","content":"Within ServerScriptService you'll find a ModuleScript called Configuration. This is where all the settings for the rank center are stored. You can change the settings to your liking, but make sure you don't change the names of the settings or else the rank center will revert to it's default settings. -- __ ___ _ -- \\ \\ / (_) |__ ___ ____ -- \\ \\ / /| | '_ \\ / _ \\_ / -- \\ V / | | |_) | __// / -- \\_/ |_|_.__/ \\___/___| -- You are using Vibez ranking centre v3.0 -- Scripted by ltsRune (https://www.roblox.com/users/107392833/profile) -- UI Design by Flairsed (https://www.roblox.com/users/4331079432/profile) -- In this file you can edit all the settings on how the ranking center should behave. return { [&quot;ApiKey&quot;] = &quot;&quot;, -- Vibez API Key --// Ranks \\\\-- [&quot;Ranks&quot;] = { toRankTo = 2; -- Ranks the player to this rank id. rankRequired = 1; -- Rank the player needs, tolerance: &quot;&gt;=&quot; passId = 0; -- Gamepass ID }, -- UI Customization -- This does filter the text to prevent bad actors, so be careful. [&quot;uiTitle&quot;] = &quot;Rank Center&quot;, -- 'backgroundColor' includes any ui parts that are used as non-necessary frames. -- The main game may change this slightly to make it brighter/dimmer [&quot;backgroundColor&quot;] = Color3.fromRGB(31, 31, 31), -- 'textColor' includes any text related asset's color -- The main game may change this slightly to make it brighter/dimmer [&quot;textColor&quot;] = Color3.fromRGB(255, 255, 255), -- Foreground includes Frame's background, -- The main game may change this slightly to make it brighter/dimmer [&quot;foregroundColor&quot;] = Color3.fromRGB(224, 141, 186), --// Kick Messages \\\\-- -- When a player is successfully ranked. [&quot;successfullyRankedMessage&quot;] = &quot;You were ranked sucessfully!&quot;, -- When a player isn't in your group. [&quot;notInGroupMessage&quot;] = &quot;Join the group first before trying to claim a rank.&quot;, -- When a player's rank is too high to view passes. [&quot;noPassesToLoadForUserMessage&quot;] = &quot;It appears your rank is too high to see any ranks.&quot;, -- When a player is failed to be ranked. [&quot;failedToRankMessage&quot;] = &quot;There seems to have been an issue when attempting to rank you.&quot;, -- When the API Key can't be connected to our API. [&quot;centerFailedToLoad&quot;] = &quot;API Error: Failed to startup!&quot;, }  "},{"title":"Activity","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Examples/Activity","content":"","keywords":""},{"title":"Get Activity​","type":1,"pageTitle":"Activity","url":"/VibezAPI/docs/Examples/Activity#get-activity","content":"local Vibez = require(14946453963)(&quot;API Key&quot;):waitUntilLoaded() local function getActivity(Player: Player) local activity = Vibez:getActivity(Player.UserId) return activity end  "},{"title":"Add Activity​","type":1,"pageTitle":"Activity","url":"/VibezAPI/docs/Examples/Activity#add-activity","content":"local Vibez = require(14946453963)(&quot;API Key&quot;):waitUntilLoaded() local function addActivity(playerUserId: number, secondsSpent: number, messagesSent: number) Vibez:saveActivity(playerUserId, secondsSpent, messagesSent) end addActivity(107392833, 10, 5) -- 107392833 is the user id of the staff member  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/VibezAPI/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/VibezAPI/docs/intro#installation","content":"You can install by getting the package from the roblox website and requiring the module using the ID of the module. This is the recommended way to install the module as it will automatically update the module when a new version is released. local VibezAPI = require(14946453963)(&quot;Your API Key&quot;)   "},{"title":"Usage​","type":1,"pageTitle":"Getting Started","url":"/VibezAPI/docs/intro#usage","content":"To begin, open a new Script in ServerScriptService and require the module: local VibezAPI = require(14946453963)(&quot;Your API Key&quot;)  From there, you can use the API to create a new Vibez instance: local myApiKey = &quot;my-api-key&quot; local Vibez = VibezAPI(myApiKey)(&quot;Your API Key&quot;)  Alright, now you have a Vibez instance. You can either customize this by following the other API documentation or you can use the default settings.  "},{"title":"API Settings​","type":1,"pageTitle":"Getting Started","url":"/VibezAPI/docs/intro#api-settings","content":"Our api wrapper supports extra options for when creating the class. These options can be found here. "},{"title":"Webhooks","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Examples/Webhooks","content":"","keywords":""},{"title":"Colors​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Examples/Webhooks#colors","content":"Typically you would use a hexidecimal color code for the color parameter, but you can also use a Color3 value. Only works for addEmbedWithBuilder Preview:  local Vibez = require(14946453963)(&quot;API Key&quot;, { nameOfGameForLogging = &quot;Colors Example&quot; }) local webhook = Vibez:getWebhookBuilder(&quot;https://discord.com/api/webhooks/&quot;) webhook:addEmbedWithBuilder(function(embed) return embed :setColor(Color3.fromRGB(255, 125, 255)) -- Light pink :setTitle(&quot;Color3 Example&quot;) :setDescription(&quot;This is an example of using a Color3 value for the color parameter.&quot;) end):Send()  "},{"title":"Embeds​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Examples/Webhooks#embeds","content":"Embeds are a way to format your messages in a more organized way. You can add multiple embeds to a webhook message. local Vibez = require(14946453963)(&quot;API Key&quot;):waitUntilLoaded() Vibez:getWebhookBuilder(&quot;https://discord.com/api/webhooks/&quot;) :addEmbedWithBuilder(function(embed) return embed :setColor(Color3.new(1, 1, 1)) -- White | Default color is always light pink. :setTitle(&quot;Embed Example&quot;) :setDescription(&quot;This is an example of using an embed.&quot;) end) :Send()  Multiple Embeds​ local Vibez = require(14946453963)(&quot;API Key&quot;):waitUntilLoaded() Vibez:getWebhookBuilder(&quot;https://discord.com/api/webhooks/&quot;) :addEmbedWithBuilder(function(embed) return embed :setColor(Color3.new(1, 1, 1)) -- White | Default color is always light pink. :setTitle(&quot;Embed Example&quot;) :setDescription(&quot;This is an example of using an embed.&quot;) end) :addEmbedWithBuilder(function(embed) return embed :setColor(Color3.fromRGB(155, 155, 255)) -- Light blue :setTitle(&quot;Embed Example 2&quot;) :setDescription(&quot;This is the second example of using an embed.&quot;) end) :Send()  Embeds without the builder​ local Vibez = require(14946453963)(&quot;API Key&quot;):waitUntilLoaded() Vibez:getWebhookBuilder(&quot;https://discord.com/api/webhooks/&quot;) -- Since we're not using the builder, we have to use hex values for the &quot;color&quot; property. :addEmbed({ title = &quot;Embed Example&quot;, description = &quot;This is an example of using an embed.&quot;, color = Color3.fromRGB(1, 1, 1):ToHex(), -- White | Default color is always light pink. }) :addEmbed({ title = &quot;Embed Example 2&quot;, description = &quot;This is the second example of using an embed.&quot;, color = Color3.fromRGB(155, 155, 255):ToHex(), -- Light blue }) :Send()  "},{"title":"Settings","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Settings","content":"","keywords":""},{"title":"Note: You do not need all settings to make it work, every setting attached has a default value!","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings##","content":"FUTURE WARNING Legacy Settings are planning on being removed next update, please update your settings to the new ones! When the update is released, the APIs WILL fail! Our first version of settings were... Well, clunky and messy to say the least. So, we've decided to make it a lot more simple and easier to understand. We've also added a lot more settings to make it more customizable to your needs. Every setting below or on the right are each their own table. You can look at the examples below to see how to use them. If you have any questions, feel free to join our Discord and ask in any of the general channels. We'll be happy to help you out!  "},{"title":"Example","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings##","content":"local Vibez = require(14946453963)(&quot;API KEY&quot;, { Commands = { Enabled = true, MinRank = 200, -- Max rank is optional due to it being automatically set to, 255. Prefix = &quot;;&quot;, }, Interface = { Enabled = true, MinRank = 200, }, })  "},{"title":"Types","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings##","content":"Here's a simple table to help you understand the types: Type\tExampleBoolean\ttrue OR false String\t&quot;Text&quot; OR 'Text' OR \\Text\\ Number\t-2,147,483,647 TO 2,147,483,647 Array\t{1, 2, 3} OR {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;} Array Example String&lt;whatYoureChanging&gt; → &quot;Example&quot;Array&lt;String&lt;Something&gt;&gt; → {&quot;Something1&quot;, &quot;Something2&quot;, &quot;Something2&quot;} "},{"title":"Commands​","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings#commands","content":"Setting Name\tType\tDefault Value\tDescription\tWorking?Enabled\tBoolean\tfalse\tEnables/Disables chat commands.\t✔ useDefaultNames\tBoolean\ttrue\tDetermines whether default names should be included in the alias list.\t✔ Prefix\tString\t!\tThe prefix for chat commands.\t✔ MinRank\tNumber\t255\tThe minimum rank required to use chat commands.\t✔ MaxRank\tNumber\t255\tThe maximum rank required to use chat commands.\t✔ Alias\tArray&lt;{String&lt;commandName&gt;, String&lt;commandAlias&gt;}&gt;\t{}\tThe aliases for chat commands.\t✔ "},{"title":"ActivityTracker​","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings#activitytracker","content":"Setting Name\tType\tDefault Value\tDescription\tWorking?Enabled\tBoolean\tfalse\tEnables/Disables the activity tracker.\t✔ MinRank\tNumber\t255\tThe minimum rank required to track activity.\t✔ disableInStudio\tBoolean\ttrue\tDisables activity tracking in studio.\t✔ disableWhenAFK\tBoolean\tfalse\tDisables activity tracking when a player is AFK.\t✔ delayBeforeAFK\tNumber\t30\tThe amount of time in seconds before a player is marked 'AFK'.\t✔ kickIfFails\tBoolean\tfalse\tKicks players if the activity tracker fails to initialize.\t✔ failMessage\tString\tWe were unable to initialize the activity tracker for you. Please rejoin the game.\tThe message sent when the activity tracker fails to initialize.\t✔ "},{"title":"Interface​","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings#interface","content":"Setting Name\tType\tDefault Value\tDescription\tWorking?Enabled\tBoolean\tfalse\tEnables/Disables the interface.\t✔ MinRank\tNumber\t255\tThe minimum rank required to use the interface.\t✔ MaxRank\tNumber\t255\tThe maximum rank required to use the interface.\t✔ "},{"title":"RankSticks​","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings#ranksticks","content":"Setting Name\tType\tDefault Value\tDescription\tWorking?Enabled\tBoolean\tfalse\tEnables/Disables rank sticks.\t✔ MinRank\tNumber\t255\tThe minimum rank required to use rank sticks.\t✔ MaxRank\tNumber\t255\tThe maximum rank required to use rank sticks.\t✔ sticksModel\tModel\tTool?\tThe model/tool to use as the rank sticks.\t✔ "},{"title":"Notifications​","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings#notifications","content":"Setting Name\tType\tDefault Value\tDescription\tWorking?Enabled\tBoolean\tfalse\tEnables/Disables notifications.\t❌ Position\tString\tBottom-Right\tThe position of the notifications.\t❌ "},{"title":"Misc​","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings#misc","content":"Setting Name\tType\tDefault Value\tDescription\tWorking?originLoggerText\tString\tGame\tThe text used in the origin logger.\t✔ rankingCooldown\tNumber\t30\tAmount of seconds to wait between ranking the same person again.\t✔ ignoreWarnings\tBoolean\tfalse\tIgnores warnings.\t✔ overrideGroupCheckForStudio\tBoolean\tfalse\tOverrides the group check for studio.\t✔ isAsync\tBoolean\tfalse\tToggles whether upon initialization should yield the current thread or not.\t✔ usePromises\tBoolean\tfalse\tToggles whether to use promises or not. (Long term project)\t❌ "},{"title":"Legacy Settings (To Be Removed)​","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings#legacy-settings-to-be-removed","content":"These are settings that were available in a previous version, and are now removed. They still work, but you'll receive a warning to switch to the new settings. Setting Name\tType\tDefault Value\tDescriptionisChatCommandsEnabled\tboolean\tfalse\tDetermines whether in-game commands are enabled. commandPrefix\tstring\t!\tThe prefix for commands. minRankToUseCommandsAndUI\tnumber\t255\tThe minimum rank required to use ranks and/or commands. maxRankToUseCommandsAndUI\tnumber\t255\tThe maximum rank required to use ranks and/or commands. isUIEnabled\tboolean\tfalse\tDetermines whether client-sided user interface is enabled. activityTrackingEnabled\tboolean\tfalse\tDetermines whether activity tracking is enabled. disableActivityTrackingInStudio\tboolean\ttrue\tDetermines whether activity tracking should not send to our servers when play-testing in studio. disableActivityTrackingWhenAFK\tboolean\ttrue\tDetermines whether activity tracking should stop when a player is detected as AFK. rankToStartTrackingActivityFor\tnumber\t255\tThe minimum rank required to be tracked for activity. delayBeforeMarkedAFK\tnumber\t30\tThe amount of seconds to allow a player to come back until they're marked as AFK. nameOfGameForLogging\tstring\tGame\tWhen ranking logs occur, this name will be used for the &quot;Origin&quot; field. overrideGroupCheckForStudio\tboolean\ttrue\tDetermines whether to override fetching group ranks when in studio. ignoreWarnings\tboolean\tfalse\tDetermines whether to show warnings in the output. "}]
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[376],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=i.createContext({}),l=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return i.createElement(c.Provider,{value:t},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(n),p=o,m=f["".concat(c,".").concat(p)]||f[p]||d[p]||r;return n?i.createElement(m,a(a({ref:t},u),{},{components:n})):i.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[f]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<r;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},17962:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=n(87462),o=(n(67294),n(3905));const r={sidebar_position:5},a=void 0,s={unversionedId:"Features/Notifications",id:"Features/Notifications",title:"Notifications",description:"What are notifications?",source:"@site/docs/Features/Notifications.md",sourceDirName:"Features",slug:"/Features/Notifications",permalink:"/VibezAPI/docs/Features/Notifications",draft:!1,editUrl:"https://github.com/ItsRune/VibezAPI/edit/master/docs/Features/Notifications.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"defaultSidebar",previous:{title:"Blacklists",permalink:"/VibezAPI/docs/Features/Blacklists"},next:{title:"Global API",permalink:"/VibezAPI/docs/Features/Global"}},c={},l=[{value:"What are notifications?",id:"what-are-notifications",level:3},{value:"When are notifications used?",id:"when-are-notifications-used",level:3},{value:"Can I send custom notifications?",id:"can-i-send-custom-notifications",level:3},{value:"Notification Settings",id:"notification-settings",level:3}],u={toc:l},f="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(f,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"what-are-notifications"},"What are notifications?"),(0,o.kt)("p",null,"Notifications are a way to tell the user if their request went through successfully or not. Their main purpose is to inform the user of the status of their request."),(0,o.kt)("h3",{id:"when-are-notifications-used"},"When are notifications used?"),(0,o.kt)("p",null,"Notifications are mainly used when using the: Beta UI, ",(0,o.kt)("a",{parentName:"p",href:"/VibezAPI/docs/Features/Commands/About/"},"Commands"),", or RankSticks. Notifications are intended to tell the user if their request went throught successfully or not."),(0,o.kt)("h3",{id:"can-i-send-custom-notifications"},"Can I send custom notifications?"),(0,o.kt)("p",null,"Yes, you can use our notification handler to send custom notifications. The method to do this is ",(0,o.kt)("inlineCode",{parentName:"p"},"notifyPlayer")," along with the message. ",(0,o.kt)("br",null),"\nExample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'VibezAPI:notifyPlayer(Player, "Hello there!")\n')),(0,o.kt)("h3",{id:"notification-settings"},"Notification Settings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"Enabled = true, -- Determines whether or not notifications are enabled.\n\nFont = Enum.Font.Gotham, -- The font for notifications.\nFontSize = 16, -- The default font size. (Fit for mobile users)\nkeyboardFontSizeMultiplier = 1.25, -- Multiplier for fontsize keyboard users\ndelayUntilRemoval = 20, -- The time it takes for a notification to be removed.\n\nentranceTweenInfo = { -- Tween info for when a notification enters the screen.\n    Style = Enum.EasingStyle.Quint, -- Tween easing style.\n    Direction = Enum.EasingDirection.InOut, -- Tween easing direction.\n    timeItTakes = 1, -- How long the tween takes to complete. (Seconds)\n},\n\nexitTweenInfo = { -- Tween info for when a notification exits the screen.\n    Style = Enum.EasingStyle.Quint, -- Tween easing style.\n    Direction = Enum.EasingDirection.InOut, -- Tween easing direction.\n    timeItTakes = 1, -- How long the tween takes to complete. (Seconds)\n},\n")))}d.isMDXComponent=!0}}]);
[{"title":"Rank Center","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Centers/Rank Center","content":"","keywords":""},{"title":"Implementation​","type":1,"pageTitle":"Rank Center","url":"/VibezAPI/docs/Centers/Rank Center#implementation","content":"First things first, you'll need to download it here. Once you've done that, you'll need to open the file and publish to your group as a new game. Afterwards you're ready to customize it to your liking. "},{"title":"Usage​","type":1,"pageTitle":"Rank Center","url":"/VibezAPI/docs/Centers/Rank Center#usage","content":""},{"title":"Important​","type":1,"pageTitle":"Rank Center","url":"/VibezAPI/docs/Centers/Rank Center#important","content":"To use the rank center, you need to ensure you publish the game and that you have Allow Third Party Teleports enabled.  "},{"title":"Configuration​","type":1,"pageTitle":"Rank Center","url":"/VibezAPI/docs/Centers/Rank Center#configuration","content":"Within ServerScriptService you'll find a ModuleScript called Configuration. This is where all the settings for the rank center are stored. You can change the settings to your liking, but make sure you don't change the names of the settings or else the rank center will revert to it's default settings. -- __ ___ _ -- \\ \\ / (_) |__ ___ ____ -- \\ \\ / /| | '_ \\ / _ \\_ / -- \\ V / | | |_) | __// / -- \\_/ |_|_.__/ \\___/___| -- You are using Vibez ranking centre v3.0 -- Scripted by ltsRune (https://www.roblox.com/users/107392833/profile) -- UI Design by Flairsed (https://www.roblox.com/users/4331079432/profile) -- In this file you can edit all the settings on how the ranking center should behave. return { [&quot;ApiKey&quot;] = &quot;&quot;, -- Vibez API Key --// Ranks \\\\-- [&quot;Ranks&quot;] = { toRankTo = 2; -- Ranks the player to this rank id. rankRequired = 1; -- Rank the player needs, tolerance: &quot;&gt;=&quot; passId = 0; -- Gamepass ID }, -- UI Customization -- This does filter the text to prevent bad actors, so be careful. [&quot;uiTitle&quot;] = &quot;Rank Center&quot;, -- 'backgroundColor' includes any ui parts that are used as non-necessary frames. -- The main game may change this slightly to make it brighter/dimmer [&quot;backgroundColor&quot;] = Color3.fromRGB(31, 31, 31), -- 'textColor' includes any text related asset's color -- The main game may change this slightly to make it brighter/dimmer [&quot;textColor&quot;] = Color3.fromRGB(255, 255, 255), -- Foreground includes Frame's background, -- The main game may change this slightly to make it brighter/dimmer [&quot;foregroundColor&quot;] = Color3.fromRGB(224, 141, 186), --// Kick Messages \\\\-- -- When a player is successfully ranked. [&quot;successfullyRankedMessage&quot;] = &quot;You were ranked sucessfully!&quot;, -- When a player isn't in your group. [&quot;notInGroupMessage&quot;] = &quot;Join the group first before trying to claim a rank.&quot;, -- When a player's rank is too high to view passes. [&quot;noPassesToLoadForUserMessage&quot;] = &quot;It appears your rank is too high to see any ranks.&quot;, -- When a player is failed to be ranked. [&quot;failedToRankMessage&quot;] = &quot;There seems to have been an issue when attempting to rank you.&quot;, -- When the API Key can't be connected to our API. [&quot;centerFailedToLoad&quot;] = &quot;API Error: Failed to startup!&quot;, }  "},{"title":"EmbedBuilder","type":0,"sectionRef":"#","url":"/VibezAPI/api/EmbedBuilder","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#functions","content":" "},{"title":"setDescription​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setDescription","content":"Required Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:setDescription(description: string) → EmbedBuilder Adds a description to the embed.  "},{"title":"setTitle​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setTitle","content":"Required Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:setTitle(title: string) → EmbedBuilder Adds a title to the embed.  "},{"title":"addField​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#addField","content":"Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:addField( name: string, value: string, isInline: boolean ) → EmbedBuilder Adds a field to the embed.  "},{"title":"clearFields​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#clearFields","content":"Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:clearFields() → EmbedBuilder Clears the fields data.  "},{"title":"setFooter​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setFooter","content":"Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:setFooter( text: string, iconUrl: string? ) → EmbedBuilder Sets a footer to the embed.  "},{"title":"setThumbnail​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setThumbnail","content":"Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:setThumbnail( url: string, height: number?, width: number? ) → EmbedBuilder Sets the embed thumbnail.  "},{"title":"setColor​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setColor","content":"Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:setColor(color: Color3 | string | number) → EmbedBuilder Sets the color of the embed.  "},{"title":"setAuthor​","type":1,"pageTitle":"EmbedBuilder","url":"/VibezAPI/api/EmbedBuilder#setAuthor","content":"Chainable since 1.1.0 &lt;/&gt; EmbedBuilder:setAuthor( name: string, url: string?, iconUrl: string? ) → EmbedBuilder Sets the author of the embed. "},{"title":"RateLimiter","type":0,"sectionRef":"#","url":"/VibezAPI/api/RateLimiter","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#types","content":" "},{"title":"RateLimit​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#RateLimit","content":"&lt;/&gt; interface RateLimit { isLimited: boolean _retryAfter: number _counter: number _maxCounter: number _counterStartedAt: number }  "},{"title":"Functions​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#functions","content":" "},{"title":"Check​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#Check","content":"since 1.0.0 &lt;/&gt; RateLimiter:Check() → ( boolean, string? ) Checks to see if the developer is currently being rate limited. "},{"title":"ActivityTracker","type":0,"sectionRef":"#","url":"/VibezAPI/api/ActivityTracker","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#properties","content":" "},{"title":"isLeaving​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#isLeaving","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ActivityTracker.isLeaving: boolean   "},{"title":"isAfk​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#isAfk","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ActivityTracker.isAfk: boolean  "},{"title":"Functions​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#new","content":"since 1.0.0 &lt;/&gt; ActivityTracker.new( VibezAPI: VibezAPI, forPlayer: Player ) → ActivityTracker Creates a new activity object for the player.  "},{"title":"Increment​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#Increment","content":"since 1.0.0 &lt;/&gt; ActivityTracker:Increment() → nil Increments the player's seconds.  "},{"title":"Chatted​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#Chatted","content":"since 1.0.0 &lt;/&gt; ActivityTracker:Chatted() → nil Increments the player's chat messages.  "},{"title":"Left​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#Left","content":"since 1.0.0 &lt;/&gt; ActivityTracker:Left() → nil Sets the player's state to 'Leaving'.  "},{"title":"Destroy​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#Destroy","content":"since 1.0.0 &lt;/&gt; ActivityTracker:Destroy() → nil Destroys the class.  "},{"title":"Destroy​","type":1,"pageTitle":"ActivityTracker","url":"/VibezAPI/api/ActivityTracker#Destroy","content":"since 1.0.0 &lt;/&gt; ActivityTracker:Destroy() → nil Destroys the class. "},{"title":"Webhooks","type":0,"sectionRef":"#","url":"/VibezAPI/api/Webhooks","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#functions","content":" "},{"title":"setWebhook​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setWebhook","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:setWebhook(newWebhook: string) → Webhooks Sets the webhook to a new one.  "},{"title":"setContent​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setContent","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:setContent(content: string) → Webhooks Sets the content of the webhook.  "},{"title":"setUsername​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setUsername","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:setUsername(username: string) → Webhooks Sets the username of the webhook.  "},{"title":"addEmbedWithBuilder​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#addEmbedWithBuilder","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:addEmbedWithBuilder(...: ...(embedCreator: Embed) → Embed) → Webhooks Creates an embed with the embed creator.  "},{"title":"addEmbed​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#addEmbed","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:addEmbed(data: {[string]: any}) → Webhooks Creates an embed with table data.  "},{"title":"setTTS​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setTTS","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:setTTS(override: boolean?) → Webhooks Toggles text-to-speech. Default: Disabled  "},{"title":"setData​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#setData","content":"Chainable since 1.1.0 &lt;/&gt; Webhooks:setData(data: {any}) → Webhooks Sets the data of the webhook. (Overwriting anything specified before)  "},{"title":"Destroy​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#Destroy","content":"since 1.1.0 &lt;/&gt; Webhooks:Destroy() → nil Destroys the hook class.  "},{"title":"Send​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/api/Webhooks#Send","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.1.0 &lt;/&gt; Webhooks:Send() → httpResponse Posts a new webhook. "},{"title":"Blacklists","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Features/Blacklists","content":"","keywords":""},{"title":"What does blacklisting do?​","type":1,"pageTitle":"Blacklists","url":"/VibezAPI/docs/Features/Blacklists#what-does-blacklisting-do","content":"Blacklisting a user will prevent them from doing anything that uses your API key. This includes the usage of our application center and ranking center. This is useful in case you have a user that is causing havoc in your games. Think of this as a ban system attached to your API key. "},{"title":"How do I blacklist a user?​","type":1,"pageTitle":"Blacklists","url":"/VibezAPI/docs/Features/Blacklists#how-do-i-blacklist-a-user","content":"To blacklist a user, you'd just require the module as normal and call the addBlacklist method. Vibez:addBlacklist(1234567890) -- Adds a new blacklist with an &quot;Unknown&quot; reason Vibez:addBlacklist(1234567890, &quot;My reason.&quot;) -- Adds a new blacklist with a provided reason. Vibez:addBlacklist(1234567890, &quot;My reason.&quot;, 1) -- Adds a new blacklist with a provided reason and says ROBLOX blacklisted them.  "},{"title":"How do I remove a blacklist?​","type":1,"pageTitle":"Blacklists","url":"/VibezAPI/docs/Features/Blacklists#how-do-i-remove-a-blacklist","content":"To remove a blacklist, you'd just call the deleteBlacklist method. Vibez:deleteBlacklist(1234567890) -- Removes a blacklist with the provided user id.  "},{"title":"How do I check a blacklist?​","type":1,"pageTitle":"Blacklists","url":"/VibezAPI/docs/Features/Blacklists#how-do-i-check-a-blacklist","content":"To check a blacklist, you'd just call the isUserBlacklisted method. local isBlacklisted, blacklistReason, blacklistedBy = Vibez:isUserBlacklisted(1234567890)  "},{"title":"How do I get all blacklists?​","type":1,"pageTitle":"Blacklists","url":"/VibezAPI/docs/Features/Blacklists#how-do-i-get-all-blacklists","content":"To get all blacklists, you'd just call the getBlacklists method. local blacklists = Vibez:getBlacklists()  "},{"title":"Chainable","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Chainable","content":"","keywords":""},{"title":"What is chainable?​","type":1,"pageTitle":"Chainable","url":"/VibezAPI/docs/Chainable#what-is-chainable","content":"Chainablility is a feature that allows you to chain methods together. For example, instead of doing this: local VibezAPI = require(14946453963)(&quot;myApiKey&quot;) local myWebhook = VibezAPI:getWebhookBuilder(&quot;Discord Webhook Link&quot;) myWebhook:setTitle(&quot;my title&quot;) myWebhook:setDescription(&quot;my description&quot;)  You can do this: local VibezAPI = require(14946453963)(&quot;myApiKey&quot;) local myWebhook = VibezAPI:getWebhookBuilder(&quot;Discord Webhook Link&quot;) myWebhook :setTitle(&quot;my title&quot;) :setDescription(&quot;my description&quot;)  Which not only saves lines but also makes it easier to read!  "},{"title":"How does it work?​","type":1,"pageTitle":"Chainable","url":"/VibezAPI/docs/Chainable#how-does-it-work","content":"Chainability works by returning the class instance after every method call. This allows you to call another method on the class instance without having to reuse the variable name. For example, if you wanted to remove an operation code then immediately promote someone, you could do this: local VibezAPI = require(14946453963)(&quot;myApiKey&quot;) local playerToRank = game.Players:GetPlayers()[1] VibezAPI:updateLoggerName(&quot;Custom Rank&quot;):setRank(playerToRank, 1)   "},{"title":"How do I know if a method is chainable?​","type":1,"pageTitle":"Chainable","url":"/VibezAPI/docs/Chainable#how-do-i-know-if-a-method-is-chainable","content":"If a method is chainable, it will be marked with a Chainable tag in the documentation. For example, the updateLoggerName method is chainable, so it will be marked with a Chainable tag in the documentation. "},{"title":"Binding Actions","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Features/Binding Actions","content":"","keywords":""},{"title":"What are Actions?​","type":1,"pageTitle":"Binding Actions","url":"/VibezAPI/docs/Features/Binding Actions#what-are-actions","content":"Actions are like commands that you'd use with our commands/interface/rank sticks. Every time you use one of these products, you're essentially running an action. Actions are the building blocks of our products and are what make them so powerful. "},{"title":"What's the point to binding a function to them?​","type":1,"pageTitle":"Binding Actions","url":"/VibezAPI/docs/Features/Binding Actions#whats-the-point-to-binding-a-function-to-them","content":"Binding a function to an action allows you to run a function every time the action is used. This is useful for things like logging or even just to run a function when a command is used (There's many more use cases than these). "},{"title":"How do I bind a function to an action?​","type":1,"pageTitle":"Binding Actions","url":"/VibezAPI/docs/Features/Binding Actions#how-do-i-bind-a-function-to-an-action","content":"To bind a function to an action, you'll need to use the bindToAction method. This method takes 3 parameters: a unique identifier for the bound action, the action to bind to, and the function to bind to the action. Vibez:bindToAction(&quot;uniqueIdentifier&quot;, &quot;promote&quot;, function(response) print(&quot;Promote action was used!&quot;) end)  "},{"title":"Why do I need a unique identifier?​","type":1,"pageTitle":"Binding Actions","url":"/VibezAPI/docs/Features/Binding Actions#why-do-i-need-a-unique-identifier","content":"We allow for the developer to unbind actions, and you'd pass this in with the unbindFromAction method as a parameter. This is why it's important to have a unique identifier for each bound action. "},{"title":"How do I unbind a function from an action?​","type":1,"pageTitle":"Binding Actions","url":"/VibezAPI/docs/Features/Binding Actions#how-do-i-unbind-a-function-from-an-action","content":"To unbind a function from an action, you'll need to use the unbindFromAction method. This method takes 2 parameters: the unique identifier for the bound action, and the action to unbind from. Vibez:unbindFromAction(&quot;uniqueIdentifier&quot;, &quot;promote&quot;)  "},{"title":"What actions can I bind to?​","type":1,"pageTitle":"Binding Actions","url":"/VibezAPI/docs/Features/Binding Actions#what-actions-can-i-bind-to","content":"Currently you can only bind to 4 actions: Promote, Fire, Demote &amp; Blacklist. We plan to add more actions in the future, but for now these are the only actions you can bind to. "},{"title":"Activity Tracking","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Features/Activity Tracking","content":"","keywords":""},{"title":"How does the activity tracking work?​","type":1,"pageTitle":"Activity Tracking","url":"/VibezAPI/docs/Features/Activity Tracking#how-does-the-activity-tracking-work","content":"The activity tracker works by using object orientated programming that creates specific functions to call upon each staff member within the game. This allows for a more efficient way of tracking staff members and their activity. The activity tracker is also able to track the amount of time a staff member has been active for, and the amount of time they have been inactive for. This allows for a more accurate representation of how active a staff member is. NOTE: Inactivity is not sent to Vibez API, it is only used for the activity tracker. "},{"title":"How do I use the activity tracker?​","type":1,"pageTitle":"Activity Tracking","url":"/VibezAPI/docs/Features/Activity Tracking#how-do-i-use-the-activity-tracker","content":"The activity tracker is very simple to use. All you need to do is require the main module and change an option to true. local Vibez = require(14946453963)(&quot;API Key&quot;, { ActivityTracker = { Enabled = true, -- Enabled the tracker for players. MinRank = 255, -- The minimum rank that a staff member must be to be tracked. } })  In addition to this setting is a couple of other settings that you can change to your liking. These settings are as follows: Setting\tType\tDescriptionEnabled\tboolean\tWhether or not the activity tracker is enabled. MinRank\tnumber\tThe minimum rank that a staff member must be to be tracked. disableWhenInStudio\tboolean\tDisables when studio play testing. disableWhenAFK\tboolean\tDisables when player is detected as AFK. disableWhenInPrivateServer\tboolean\tDisables when player is in a private server. delayBeforeMarkedAFK\tnumber\tThe amount of seconds to wait before the player is marked AFK. kickIfFails\tboolean\tSometimes ROBLOX can mess up player initialization, when this occurs it can cause the activity tracker to not setup with the player. Would you like to kick the player when this happens? failMessage\tstring\tThe message to kick the player with when kickIfFails is enabled. "},{"title":"How do I get the activity of a staff member?​","type":1,"pageTitle":"Activity Tracking","url":"/VibezAPI/docs/Features/Activity Tracking#how-do-i-get-the-activity-of-a-staff-member","content":"Getting the activity of a staff member is very simple. All you need to do is call the getActivity function on the Vibez object. local Vibez = require(14946453963)(&quot;API Key&quot;, { ActivityTracker = { Enabled = true, MinRank = 255, } }) local activity = Vibez:getActivity(107392833) -- 107392833 is the user id of the staff member  TIP: If you'd like to get everyone's activity... Don't put a user id in the getActivity function. "},{"title":"How do I add seconds to a specific player?​","type":1,"pageTitle":"Activity Tracking","url":"/VibezAPI/docs/Features/Activity Tracking#how-do-i-add-seconds-to-a-specific-player","content":"Vibez allows for customization when necessary, if you're writing your own activity tracker you can achieve this with the saveActivity method that the wrapper provides. local Vibez = require(14946453963)(&quot;API Key&quot;, { ActivityTracker = { Enabled = true, MinRank = 255, } }) local function addSecondsToPlayer(UserId: number, userRank: number, secondsSpent: number, messagesSent: number) Vibez:saveActivity(UserId, userRank, secondsSpent, messagesSent) end local function addSecondsToPlayerWithoutRank(UserId: number, secondsSpent: number, messagesSent: number) Vibez:saveActivity(UserId, nil, secondsSpent, messagesSent, true) end -- Example usage -- adding 10 seconds and 5 messages addSecondsToPlayer(107392833, 250, 10, 5) addSecondsToPlayerWithoutRank(107392833, 10, 5)  "},{"title":"How do I get everyone's activity?​","type":1,"pageTitle":"Activity Tracking","url":"/VibezAPI/docs/Features/Activity Tracking#how-do-i-get-everyones-activity","content":"Getting everyone's activity is very simple. All you need to do is call the getActivity function on the Vibez object without any arguments. local allPlayerActivity = Vibez:getActivity()  "},{"title":"Example Usage​","type":1,"pageTitle":"Activity Tracking","url":"/VibezAPI/docs/Features/Activity Tracking#example-usage","content":"Creating a backup of all player activity --// Services \\\\-- local DataStoreService = game:GetService(&quot;DataStoreService&quot;) --// Variables \\\\-- local Vibez = require(14946453963)(&quot;API Key&quot;):waitUntilLoaded() local backupDataStore = DataStoreService:GetDataStore(&quot;PlayerActivity&quot;) --// Functions \\\\-- local function onGameShutdown() local allActivity = Vibez:getActivity() -- Leaving this blank will invoke all player's activity. pcall(backupDataStore.SetAsync, backupDataStore, &quot;Backup&quot;, allActivity) end --// Connections \\\\-- game.OnClose:Connect(onGameShutdown)  Adding seconds to a player's activity local Vibez = require(14946453963)(&quot;API Key&quot;):waitUntilLoaded() local function addActivity(playerUserId: number, secondsSpent: number, messagesSent: number) Vibez:saveActivity(playerUserId, secondsSpent, messagesSent) end addActivity(107392833, 10, 5) -- 107392833 is the user id of the staff member  "},{"title":"Adding Commands","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Features/Commands/Adding Commands","content":"Adding Commands Do our commands not fit your purpose? Well, luckily for you we made this simple to use method that allows you to create your own commands. This method is called :addCommand. This method takes three arguments: the command name, any command aliases you'd like to use, and lastyl the command's executing function. VibezAPI:addCommand(&quot;myCommand&quot;, {}, function(player: Player, commandArguments: {string}) -- &quot;player&quot; is the Player who ran the command -- &quot;commandArguments&quot; are the extra arguments sent with the command warn(player.Name .. &quot; ran the command with the arguments: &quot; .. table.concat(commandArguments, &quot;, &quot;)) end) Now, you can use the command in-game: !myCommand... But this command isn't really useful. let's make some changes and use a private method to get the player from the command arguments. The private method we'll be using is :_getPlayers. This method takes two arguments: the player who ran the command and the command arguments. This method will return a table of players who were found from the command arguments. If no players were found, it will return an empty table. On a side note, I can't stress this enough. There are many things in the API that are marked private, and you shouldn't use them. If you do, we are not to blame for anything you accidentally break/leak. If you do want insights on how to use private methods, you can see all private methods when on the API page by clicking the &quot;Show Private&quot; button. Anything starting with an &quot;_&quot; is a private method/variable. VibezAPI:addCommand(&quot;myCommand&quot;, {&quot;myCmd&quot;}, function(player: Player, commandArguments: {string}) -- &quot;player&quot; is the Player who ran the command -- &quot;commandArguments&quot; are the extra arguments sent with the command if #commandArguments == 0 then -- Returning will stop the rest of the function from running. return end -- If you want to get players from the command arguments, the method is technically -- private, but you can still use it. It's called &quot;:_getPlayers&quot;. This method will -- use the existing command operations to get players from the command arguments. -- example: -- local playersFromArgs = VibezAPI:_getPlayers(player, commandArguments) local users = VibezAPI:_getPlayers(player, commandArguments) -- Always check if the user exists before doing anything with it. if not users or not users[1] then return end local userActivity = VibezAPI:getActivity(users[1]) warn(userActivity) -- Maybe pipe to a remote? Up to you. end) Okay, !myCommand now gets any player who's in game's activity and warns it into the output... That's not really useful, but it's a start.","keywords":""},{"title":"Application Center","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Centers/Application Center","content":"","keywords":""},{"title":"Implementation​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#implementation","content":"First things first, you'll need to download it here. Once you've done that, you'll need to open the file and publish to your group as a new game. Afterwards you're ready to customize it to your liking. "},{"title":"Important​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#important","content":"To use the application center, you need to ensure you publish the game and that you have Allow Third Party Teleports enabled.    Question types with a * are unavailable to auto ranking! "},{"title":"General Customization​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#general-customization","content":"There's a few general custimization options that you can change to make the application center more unique to your group. First the necessary option is your Vibez API key, you can generate this by running the command /keys create group-id:0. The other options are optional and can be customized to your liking. { apiKey = &quot;YOUR_API_KEY&quot;, -- Your Vibez API key autoSaveInterval = 45 -- The interval in seconds that the application will auto save the user's progress. allowBackToApplicationSelection = true, -- Whether or not to allow the user to go back to the application selection screen. timezoneToUse = &quot;EDT&quot;, -- The timezone to use for the application center. -- The timezone to use for the application center can be found here: -- https://itsrune.github.io/RoTime/docs/Timezones#defaults }  "},{"title":"UI Customization​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#ui-customization","content":"NOTE: All UI Customization is done within the UI table. "},{"title":"Colors​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#colors","content":"At the time of writing this there are currently 4 colors that can be customized. These colors are the primary, secondary, background, and text colors. { backgroundColor = Color3.fromRGB(224, 141, 186), foregroundColor = Color3.fromRGB(48, 48, 48), textColor = Color3.fromRGB(255, 255, 255), strokeColor = Color3.fromRGB(255, 147, 246) }  "},{"title":"Text​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#text","content":"You can customize the text that is displayed on the application center. This includes the application center's title and when an application hasn't been started's text. { Header = &quot;My Application Center!&quot;, -- Warning: This text gets filtered, if it detects a hashtagged word: it'll be disabled. appSelectionNotStartedText = &quot;Not Started&quot;, -- The text displayed when the player hasn't started an application yet. }  "},{"title":"Application Customization​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#application-customization","content":"This category is where you'll be able to make each application unique. { Title = &quot;My Application&quot;, -- The title of the application -- Webhooks are primarily used for logging applications when auto ranking is disabled, -- however they also will be used for notifying HR+ members when an application fails -- to rank. webhookToUse = &quot;https://discord.com/api/webhooks/1234567890/abcdefghijklmnopqrstuvwxyz&quot;, --[[ These webhook settings include a few formatting codes for customizing the webhook embed. Formatting Codes: &lt;PLAYER_NAME&gt; | A player's username &lt;PLAYER_ID&gt; | A player's user id &lt;PLAYER_DISPLAY_NAME&gt; | A player's display name &lt;APP_NAME&gt; | The name of the application &lt;TIME_TAKEN&gt; | The amount of time taken, ex: 24m 16s &lt;BEGAN_TIME&gt; | A clock time using 'timezoneToUse' and RoTime formatted HH:MM:SS which represents when a player started an application, ex: 07:11:52 &lt;BEGAN_DATE&gt; | A date formatted in MM/DD/YYYY which represents when a player started an application, ex: 01/08/2024 &lt;END_TIME&gt; | A clock time using 'timezoneToUse' and RoTime formatted HH:MM:SS which represents when a player ended the application. &lt;END_DATE&gt; | A date formatted in MM/DD/YYYY which represents when a player ended an application, ex: 01/08/2024 ]]-- webhookEmbedTitle = &quot;&lt;PLAYER_NAME&gt; &lt;APP_NAME&gt; Results&quot;, -- The title of the webhook embed webhookEmbedDescription = [[ Application Name: &lt;APP_NAME&gt; Time Taken: &lt;TIME_TAKEN&gt; Began Time: &lt;BEGAN_TIME&gt; &lt;BEGAN_DATE&gt; End Time: &lt;END_TIME&gt; &lt;END_DATE&gt; ]], durationsAndAmounts = { --[[ How long until a player can apply again. To figure this out: 60 | 1 minute 3600 | 1 hour 86400 | 1 day 86400 * 30 | 1 month 86400 * 365 | 1 year -1 | Disable, meaning they can rejoin and apply instantly ]]-- sendApplcationDuration = -1, -- Amount of applications a player can send. (-1 means disabled) amountOfApplicationsFromPlayer = -1, }, AutoRank = { Enabled = true, -- Whether or not to enable auto ranking toRankTo = 3, -- The rank to auto-rank to MinimumScore = 5, -- The minimum score required to auto rank --[[ Technical Information: Each question is worth 1 point unless it's a 'Multi Select'. If a player selects all the answers no matter what, the server will remove points for every answer that's not correct. Example: -- Setup Buttons = { { Text = &quot;Blah&quot;, isCorrect = true, }, { Text = &quot;Blah2&quot;, isCorrect = false, } } -- Selected: - Blah - Blah2 Result: 0 (cuz 1 + -1 = 0) -- Selected: - Blah2 Result: -1 ]] -- } }  "},{"title":"Question Types​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#question-types","content":""},{"title":"Short Answer *​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#short-answer-","content":"Short answer questions allow you to ask a question and have the user type in their answer into a small box. { Question = &quot;What is the capital of the United States?&quot;, -- The question you want to ask Type = &quot;Short Answer&quot;, -- The type of question Meta = { Placeholder = &quot;Type your answer here...&quot;, -- The placeholder text that will be displayed in the text box } }  "},{"title":"Long Answer *​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#long-answer-","content":"Long answer questions are similar to short answer questions, but allow the user to type in a longer response. { Question = &quot;What is the capital of the United States?&quot;, -- The question you want to ask Type = &quot;Long Answer&quot;, -- The type of question Meta = { Placeholder = &quot;Type your answer here...&quot;, -- The placeholder text that will be displayed in the text box } }  "},{"title":"Multiple Choice​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#multiple-choice","content":"Multiple choice questions are the most common type of question. They allow you to provide a question and multiple answers for the user to choose from. You can also specify the correct answer. { Question = &quot;How many states does the United States have?&quot;, -- The question you want to ask Type = &quot;Multiple Choice&quot;, -- The type of question Meta = { Buttons = { { Text = &quot;20&quot;, -- The text that will be displayed on the button isCorrect = false, -- Whether or not this is the correct answer }, { Text = &quot;50&quot;, -- The text that will be displayed on the button isCorrect = true, -- Whether or not this is the correct answer }, { Text = &quot;70&quot;, -- The text that will be displayed on the button isCorrect = false, -- Whether or not this is the correct answer }, { Text = &quot;20&quot;, -- The text that will be displayed on the button isCorrect = false, -- Whether or not this is the correct answer } } } }  Yes or No​ Behind the scenes, yes or no questions are just multiple choice questions with only two options. You can use the same format as multiple choice questions to create a yes or no question. { Question = &quot;Is the sky blue?&quot;, Type = &quot;Multiple Choice&quot;, Meta = { Buttons = { { Text = &quot;Yes&quot;, isCorrect = true, }, { Text = &quot;No&quot;, isCorrect = false, }, }, }, },  "},{"title":"Multiple Select​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#multiple-select","content":"Multiple select questions are similar to multiple choice questions, but allow the user to select multiple answers. { Question = &quot;Which of the following are colors?&quot;, -- The question you want to ask Type = &quot;Multiple Select&quot;, -- The type of question Meta = { Max = 4, -- The max amount of random questions that will be shown. (The app center can only support a max of 4 for right now.) Buttons = { { Text = &quot;Red&quot;, -- The text that will be displayed on the button isCorrect = true, -- Whether or not this is the correct answer }, { Text = &quot;Ceiling&quot;, -- The text that will be displayed on the button isCorrect = false, -- Whether or not this is the correct answer }, { Text = &quot;Floor&quot;, -- The text that will be displayed on the button isCorrect = false, -- Whether or not this is the correct answer }, { Text = &quot;Red&quot;, -- The text that will be displayed on the button isCorrect = true, -- Whether or not this is the correct answer }, } } }  "},{"title":"Scale​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#scale","content":"Scale questions allow you to ask a question and have the user select a value between a minimum and maximum value. { Question = &quot;On a scale of 1 to 10, how much do you like the color red?&quot;, -- The question you want to ask Type = &quot;Scale&quot;, -- The type of question Min = 1, -- The minimum value the user can select Max = 10, -- The maximum value the user can select Meta = { minimumRequired = 4, -- The minimum required value the user must select Tolerance = &quot;&gt;=&quot; -- The tolerance of the minimum required value. (&gt;=, &lt;=, ==, &gt;, &lt;) } }  "},{"title":"Submit​","type":1,"pageTitle":"Application Center","url":"/VibezAPI/docs/Centers/Application Center#submit","content":"This isn't a question type, but if you'd like to customize the submit text you can do so by adding your own at the end of your application. If none is supplied, the default text is shown below and will be added automatically. { Question = &quot;Are you ready to submit your application for review?&quot;, -- The question you want to ask Type = &quot;Submit&quot;, -- The type of question }  "},{"title":"Notifications","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Features/Notifications","content":"","keywords":""},{"title":"What are notifications?​","type":1,"pageTitle":"Notifications","url":"/VibezAPI/docs/Features/Notifications#what-are-notifications","content":"Notifications are a way to tell the user if their request went through successfully or not. Their main purpose is to inform the user of the status of their request, however you can trigger a notification yourself using our Global API. "},{"title":"When are notifications used?​","type":1,"pageTitle":"Notifications","url":"/VibezAPI/docs/Features/Notifications#when-are-notifications-used","content":"Notifications are mainly used when using the: UI, Commands, or RankSticks. Notifications are intended to tell the user if their request went throught successfully or not. "},{"title":"Notification Settings​","type":1,"pageTitle":"Notifications","url":"/VibezAPI/docs/Features/Notifications#notification-settings","content":"Enabled = true, -- Determines whether or not notifications are enabled. Font = Enum.Font.Gotham, -- The font for notifications. FontSize = 16, -- The default font size. (Fit for mobile users) keyboardFontSizeMultiplier = 1.25, -- Multiplier for fontsize keyboard users delayUntilRemoval = 20, -- The time it takes for a notification to be removed. entranceTweenInfo = { -- Tween info for when a notification enters the screen. Style = Enum.EasingStyle.Quint, -- Tween easing style. Direction = Enum.EasingDirection.InOut, -- Tween easing direction. timeItTakes = 1, -- How long the tween takes to complete. (Seconds) }, exitTweenInfo = { -- Tween info for when a notification exits the screen. Style = Enum.EasingStyle.Quint, -- Tween easing style. Direction = Enum.EasingDirection.InOut, -- Tween easing direction. timeItTakes = 1, -- How long the tween takes to complete. (Seconds) },  "},{"title":"Global API","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Features/Global","content":"","keywords":""},{"title":"What is a global API?​","type":1,"pageTitle":"Global API","url":"/VibezAPI/docs/Features/Global#what-is-a-global-api","content":"A global API is an API that you can use whilst in game. This means that you can use it in the command line or in a script; without having to require a new module. This is because the API is already loaded into the game and removes the need for reinitializing everything which could potentially slow down response times of certain scripts. "},{"title":"How do I use a global API?​","type":1,"pageTitle":"Global API","url":"/VibezAPI/docs/Features/Global#how-do-i-use-a-global-api","content":"Our global API is located within Roblox's _G global variable. This means that you can access it by using _G followed by the API name. For example, if you wanted to use the Ranking API, you would use _G.VibezAPI.Ranking to access it. We have neatly separated our APIs to make it easier to find and use them.  "},{"title":"What global APIs are available?​","type":1,"pageTitle":"Global API","url":"/VibezAPI/docs/Features/Global#what-global-apis-are-available","content":"We have a variety of global APIs available for you to use, each method returns function that has it's own parameters as defined below. These include: "},{"title":"Ranking","type":1,"pageTitle":"Global API","url":"/VibezAPI/docs/Features/Global##","content":"Method Name\tArguments\tDescription\tExamplePromote\tuserId: number\tIncrements a player's rank by 1.\t_G.VibezApi.Ranking:Promote(1) Demote\tuserId: number\tDecrements a player's rank by 1.\t_G.VibezApi.Ranking:Demote(1) setRank\tuserId: number, rank: number\tSets a player's rank to a specific rank.\t_G.VibezApi.Ranking:setRank(1, 0) "},{"title":"Activity","type":1,"pageTitle":"Global API","url":"/VibezAPI/docs/Features/Global##","content":"Method Name\tArguments\tDescription\tExamplegetActivity\tuserId: number\tGets the activity of a player.\t_G.VibezApi.Activity:getActivity(1) saveActivity\tuserId: number, userRank: number, seconds: number, messages: number, forceFetchRank: boolean\tSaves the activity of a player.\t_G.VibezApi.Activity:saveActivity(1, 0, 20, 0, false) "},{"title":"Hooks","type":1,"pageTitle":"Global API","url":"/VibezAPI/docs/Features/Global##","content":"Method Name\tArguments\tDescription\tExamplenew\twebhook: string\tCreates a new webhook.\t_G.VibezApi.Hooks:new(&quot;https://discord.com/api/webhooks/&quot;) "},{"title":"Notifications","type":1,"pageTitle":"Global API","url":"/VibezAPI/docs/Features/Global##","content":"Method Name\tArguments\tDescription\tExamplenew\tplayer: Player, message:string\tCreates a notification for a player.\t_G.VibezApi.Notifications:new(game.Players.ltsRune, &quot;Hello World!&quot;) "},{"title":"General","type":1,"pageTitle":"Global API","url":"/VibezAPI/docs/Features/Global##","content":"Method Name\tArguments\tDescription\tExamplegetGroup\tplayer: Player, groupId: number\tGets a group from the player's perspective.\t_G.VibezApi.General:getGroup(game.Players.ltsRune) getGroupRank\tplayer: Player, groupId:number\tGets a player's group rank.\t_G.VibezApi.General:getGroupRank(game.Players.ltsRune, 0) getGroupRole\tplayer: Player, groupId:number\tGets a player's group role.\t_G.VibezApi.General:getGroupRole(game.Players.ltsRune, 0)  "},{"title":"Examples​","type":1,"pageTitle":"Global API","url":"/VibezAPI/docs/Features/Global#examples","content":"Here are some examples of how you can use our global APIs: Welcome Message ServerScriptService/Welcome_Message.lua local function onPlayerAdded(Player: Player) local vibezGlobal = _G[&quot;VibezApi&quot;] while vibezGlobal == nil do vibezGlobal = _G[&quot;VibezApi&quot;] task.wait(.25) end vibezGlobal.Notifications:new(Player, &quot;Welcome to the game!&quot;) end game:GetService(&quot;Players&quot;).PlayerAdded:Connect(onPlayerAdded)  Join and Leave logger ServerScriptService/Join_Logger_And_Leave_Logger.lua local Players = game:GetService(&quot;Players&quot;) local function onPlayerAdded(Player: Player) local vibezGlobal = _G[&quot;VibezApi&quot;] while vibezGlobal == nil do vibezGlobal = _G[&quot;VibezApi&quot;] task.wait(.25) end local webHook = vibezGlobal.Hooks:new(&quot;https://discord.com/api/webhooks/&quot;) webHook :setContent( string.format( &quot;[**%s**](&lt;https://www.roblox.com/users/%d/profile&gt;) has joined the game!&quot;, Player.Name, Player.UserId ) ) :Send() end local function onPlayerLeft(Player: Player) local vibezGlobal = _G[&quot;VibezApi&quot;] while vibezGlobal == nil do vibezGlobal = _G[&quot;VibezApi&quot;] task.wait(.25) end local webHook = vibezGlobal.Hooks:new(&quot;https://discord.com/api/webhooks/&quot;) webHook :setContent( string.format( &quot;[**%s**](&lt;https://www.roblox.com/users/%d/profile&gt;) has left the game!&quot;, Player.Name, Player.UserId ) ) :Send() end Players.PlayerAdded:Connect(onPlayerAdded) Players.PlayerRemoving:Connect(onPlayerLeft)  "},{"title":"Argument Prefixes","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Features/Commands/Command Operation Codes","content":"","keywords":""},{"title":"What are argument prefixes?​","type":1,"pageTitle":"Argument Prefixes","url":"/VibezAPI/docs/Features/Commands/Command Operation Codes#what-are-argument-prefixes","content":"Argument prefixes are shorteners that allow you to use less characters when using commands. For example, instead of saying game.Teams[&quot;myTeam&quot;] as a command argument, you can send #myTeam. Operation codes can be anything you'd like, as long as they don't conflict with any other operation codes. We'd also recommend not using commas as your operation code, as it will conflict with the existing argument separator.  "},{"title":"Default Codes​","type":1,"pageTitle":"Argument Prefixes","url":"/VibezAPI/docs/Features/Commands/Command Operation Codes#default-codes","content":"Name\tPrefix\tDescriptionTeam\t%\tChecks for a given team name Rank\tr:\tChecks the player's rank with a tolerance shortenedUsername\tNone\tChecks for a portion of a player's username External\te:\tGets a player that is not in the server UserId\tid:\tGets a player that is not in the server  "},{"title":"How do they work?​","type":1,"pageTitle":"Argument Prefixes","url":"/VibezAPI/docs/Features/Commands/Command Operation Codes#how-do-they-work","content":"Argument prefixes work by first splitting the sent command, then checking if the first argument is an existing prefix. If it is, it will run the prefix's function and return the result. If it isn't, it will return the command argument as is.  "},{"title":"How to use​","type":1,"pageTitle":"Argument Prefixes","url":"/VibezAPI/docs/Features/Commands/Command Operation Codes#how-to-use","content":"To create a new operation code, you'll use the :addArgumentPrefix method. This method takes three arguments: the operation name, the operation prefix, and the operation function. The operation function must return a boolean value, if it does not the operation will not work. local VibezAPI = require(14946453963)(&quot;myApiKey&quot;) VibezAPI:addArgumentPrefix(&quot;Rank&quot;, &quot;r:&quot;, function(playerToCheck: Player, incomingArgument: string) -- Operation code is automatically removed from the 'incomingArgument'. -- incomeArgument would look something like this: &quot;3:&lt;=&quot; local rank, tolerance = table.unpack(string.split(incomingArgument, &quot;:&quot;)) -- Make sure the rank is a number. if not tonumber(rank) then return false end -- Make sure the tolerance is a valid tolerance. tolerance = tolerance or &quot;&lt;=&quot; -- Convert 'rank' to a number. rank = tonumber(rank) -- 'GetRankInGroup' caches when it's first called, this will not update if their rank changes. local isOk, currentPlayerRank = pcall( playerToCheck.GetRankInGroup, playerToCheck, rank ) -- Make sure the player is in the group and their rank was fetched. if not isOk or currentPlayerRank == 0 then return false end -- Check the tolerances if tolerance == &quot;&lt;=&quot; then return currentPlayerRank &lt;= rank elseif tolerance == &quot;&gt;=&quot; then return currentPlayerRank &gt;= rank elseif tolerance == &quot;&lt;&quot; then return currentPlayerRank &lt; rank elseif tolerance == &quot;&gt;&quot; then return currentPlayerRank &gt; rank elseif tolerance == &quot;==&quot; then return currentPlayerRank == rank end -- If the tolerance is invalid, return false. return false end)  Now, you can use the operation code in your commands: !promote r:3:&lt;=  "},{"title":"How to remove operation codes​","type":1,"pageTitle":"Argument Prefixes","url":"/VibezAPI/docs/Features/Commands/Command Operation Codes#how-to-remove-operation-codes","content":"To remove an operation code, you'll use the :removeArgumentPrefix method. This method takes one argument: the operation name. If you don't like how one operation code performs that was made by us, you can simply remove it. VibezAPI:removeArgumentPrefix(&quot;Rank&quot;) -- Removes the default rank operation code.  "},{"title":"Settings","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Settings","content":"","keywords":""},{"title":"Note: You do not need all settings to make it work, every setting attached has a default value!","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings##","content":"Our first version of settings were... Well, clunky and messy to say the least. So, we've decided to make it a lot more simple and easier to understand. We've also added a lot more settings to make it more customizable to your needs. Every setting below or on the right are each their own table. You can look at the examples below to see how to use them. If you have any questions, feel free to join our Discord and ask in any of the general channels. We'll be happy to help you out!  "},{"title":"Example Usage​","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings#example-usage","content":"local Vibez = require(14946453963)(&quot;API KEY&quot;, { Commands = { Enabled = true, MinRank = 200, -- Max rank is optional due to it being automatically set to, 255. Prefix = &quot;;&quot;, }, Interface = { Enabled = true, MinRank = 200, }, })  "},{"title":"Recommened Settings​","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings#recommened-settings","content":""},{"title":"Here's a simple table to help you understand the types:","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings##","content":"Type\tExampleBoolean\ttrue OR false String\t&quot;Text&quot; OR 'Text' OR `Text` Number\t-2,147,483,647 TO 2,147,483,647 Array\t{1, 2, 3} OR {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;} Array Example String&lt;whatYoureChanging&gt; → &quot;Example&quot;Array&lt;String&lt;Something&gt;&gt; → {&quot;Something1&quot;, &quot;Something2&quot;, &quot;Something2&quot;} Commands Setting Name\tType\tDefault Value\tDescription\tWorking?Enabled\tBoolean\tfalse\tEnables/Disables chat commands.\t✔ useDefaultNames\tBoolean\ttrue\tDetermines whether default names should be included in the alias list.\t✔ Prefix\tString\t!\tThe prefix for chat commands.\t✔ MinRank\tNumber\t255\tThe minimum rank required to use chat commands.\t✔ MaxRank\tNumber\t255\tThe maximum rank required to use chat commands.\t✔ Alias\tArray&lt;{String&lt;commandName&gt;, String&lt;commandAlias&gt;}&gt;\t{}\tThe aliases for chat commands.\t✔ ActivityTracker Setting Name\tType\tDefault Value\tDescription\tWorking?Enabled\tBoolean\tfalse\tEnables/Disables the activity tracker.\t✔ MinRank\tNumber\t255\tThe minimum rank required to track activity.\t✔ disableInStudio\tBoolean\ttrue\tDisables activity tracking in studio.\t✔ disableWhenAFK\tBoolean\tfalse\tDisables activity tracking when a player is AFK.\t✔ delayBeforeAFK\tNumber\t30\tThe amount of time in seconds before a player is marked 'AFK'.\t✔ kickIfFails\tBoolean\tfalse\tKicks players if the activity tracker fails to initialize.\t✔ failMessage\tString\tWe were unable to initialize the activity tracker for you. Please rejoin the game.\tThe message sent when the activity tracker fails to initialize.\t✔ Interface Setting Name\tType\tDefault Value\tDescription\tWorking?Enabled\tBoolean\tfalse\tEnables/Disables the interface.\t✔ MinRank\tNumber\t255\tThe minimum rank required to use the interface.\t✔ MaxRank\tNumber\t255\tThe maximum rank required to use the interface.\t✔ RankSticks Setting Name\tType\tDefault Value\tDescription\tWorking?Enabled\tBoolean\tfalse\tEnables/Disables rank sticks.\t✔ MinRank\tNumber\t255\tThe minimum rank required to use rank sticks.\t✔ MaxRank\tNumber\t255\tThe maximum rank required to use rank sticks.\t✔ sticksModel\tModel\tTool?\tThe model/tool to use as the rank sticks. (Optional)\t✔ Notifications Setting Name\tType\tDefault Value\tDescription\tWorking?Enabled\tBoolean\tfalse\tEnables/Disables notifications.\t✔ Font\tString\tGotham\tThe font of the notifications.\t✔ FontSize\tNumber\t16\tThe size of the content with notifications (Use sizes for mobile).\t✔ keyboardFontSizeMultiplier\tNumber\t1.25\tThe multiplier for keyboard users.\t✔ delayUntilRemoval\tNumber\t20\tThe amount of seconds each notification is shown for.\t✔ entranceTweenInfo\tArray&lt;{String&lt;Style&gt;, String&lt;Direction&gt;, Number&lt;timeItTakes&gt;}&gt;\t{Style=&quot;Quint&quot;, Direction=&quot;InOut&quot;, timeItTakes=1}\tThe information of the tween that plays when a new notification appears.\t✔ exitTweenInfo\tArray&lt;{String&lt;Style&gt;, String&lt;Direction&gt;, Number&lt;timeItTakes&gt;}&gt;\t{Style=&quot;Quint&quot;, Direction=&quot;InOut&quot;, timeItTakes=1}\tThe information of the tween that plays when a notification needs to be deleted.\t✔ Blacklists Setting Name\tType\tDefault Value\tDescription\tWorking?Enabled\tBoolean\tfalse\tEnables/Disables whether blacklists will be kicked upon joining.\t✔ userIsBlacklistedMessage\tString\tYou have been blacklisted from the game for: &lt;BLACKLIST_REASON&gt;\tThe kick message presented to the user who's blacklisted.\t✔ Misc Setting Name\tType\tDefault Value\tDescription\tWorking?originLoggerText\tString\tGame\tThe text used in the origin logger.\t✔ rankingCooldown\tNumber\t30\tAmount of seconds to wait between ranking the same person again.\t✔ ignoreWarnings\tBoolean\tfalse\tIgnores warnings.\t✔ overrideGroupCheckForStudio\tBoolean\tfalse\tOverrides the group check for studio.\t✔ isAsync\tBoolean\tfalse\tToggles whether upon initialization should yield the current thread or not.\t✔ createGlobalVariables\tBoolean\tfalse\tToggles whether upon initialization should the module create _G variables to use.\t✔ "},{"title":"Extra Information​","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings#extra-information","content":""},{"title":"Formatting Codes​","type":1,"pageTitle":"Settings","url":"/VibezAPI/docs/Settings#formatting-codes","content":"Code\tDescription\tExample(username)\tThe username of the player.\t(username) has just been ranked! (rank)\tThe player's group rank.\tUsers with the rank (rank) were given 3 extra points! (rankname)\tThe players' group rank's name.\tA (rankname) has just joined the server! (groupid)\tThe id of the group.\tThe group's ID is (groupid). (userid)\tThe user ID of the player.\tYour UserID is: (userid) (player)\tThe player object.\tgame:GetService('ROBLOX') (replicatedstorage)\tReplicatedStorage\tgame:GetService('ReplicatedStorage') (replicatedfirst)\tReplicatedFirst\tgame:GetService('ReplicatedStorage') (serverstorage)\tServerStorage\tgame:GetService('ServerStorage') (serverscriptservice)\tServerScriptService\tgame:GetService('ServerScriptService') (workspace)\tWorkspace\tgame:GetService('Workspace') (players)\tPlayers\tgame:GetService('Players') "},{"title":"Webhooks","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Features/Webhooks","content":"","keywords":""},{"title":"What are webhooks?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Features/Webhooks#what-are-webhooks","content":"Webhooks are a way to send messages to Discord channels without using a bot. They can be used to send messages to channels from external sources, such as a website or a game server. You can find more information about webhooks here. "},{"title":"How do I create a webhook?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Features/Webhooks#how-do-i-create-a-webhook","content":"You can get a webhook link by going to your Discord server settings.  Navigate to the &quot;Integrations&quot; page.  Click on &quot;Webhooks&quot; and &quot;New Webhook&quot;, customize it however you'd like and copy the webhook link.  "},{"title":"How do I send a message to a webhook?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Features/Webhooks#how-do-i-send-a-message-to-a-webhook","content":"Using Vibez's webhook api is very simple. You just need to create a webhook builder using the webhook link you got from the previous step. local VibezAPI = require(14946453963)(&quot;My API Key&quot;) local myWebhook = VibezAPI:getWebhookBuilder(&quot;Discord Webhook Link&quot;)  After that you can send a test message! myWebhook:setContent(&quot;Hello World!&quot;):Send()  Please look at information about chaining to learn more about how chaining benefits you. "},{"title":"How do I send an embed to a webhook?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Features/Webhooks#how-do-i-send-an-embed-to-a-webhook","content":"There are 2 ways to create an embed. First, you could use the built in embed builder: myWebhook:addEmbedWithBuilder(function(myEmbed) myEmbed:setTitle(&quot;my title&quot;) myEmbed:setDescription(&quot;my description&quot;) end):Send()  Or, you could create an embed using a table: myWebhook:addEmbed({ title = &quot;my title&quot;, description = &quot;my description&quot; }):Send()  "},{"title":"Why isn't my message sending?​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Features/Webhooks#why-isnt-my-message-sending","content":"If your message isn't sending, it's possibly 2 issues. You didn't call :Send() at the end of your code.If you're using embeds, you didn't set the title/description of your embed. "},{"title":"Limitations​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Features/Webhooks#limitations","content":"There are some limitations to webhooks. For example, you can only send 10 embeds per message. You can find more information about these limitations here. "},{"title":"Example Usage​","type":1,"pageTitle":"Webhooks","url":"/VibezAPI/docs/Features/Webhooks#example-usage","content":"Join/Leave Logger --// Services \\\\-- local Players = game:GetService(&quot;Players&quot;) --// Variables \\\\-- local myWebhook = &quot;Webhook_Link_Here&quot; local Vibez = require(14946453963)(&quot;API Key&quot;, { Misc = { isAsync = true } }) --// Functions \\\\-- local function sendWebhook(Player: Player, state: &quot;joined&quot; | &quot;left&quot;) local webhook = Vibez:getWebhookBuilder(myWebhook) webhook:setContent( string.format( &quot;**%s** has %s [the game.](https://roblox.com/games/%d/~)&quot;, Player.Name, state, game.PlaceId ) ):Send() end local function onPlayerAdded(Player: Player) Vibez:waitUntilLoaded() -- Await it due to it being async. sendWebhook(Player, &quot;joined&quot;) end local function onPlayerRemoving(Player: Player) Vibez:waitUntilLoaded() -- Await it due to it being async. sendWebhook(Player, &quot;left&quot;) end --// Connections \\\\-- Players.PlayerAdded:Connect(onPlayerAdded) Players.PlayerRemoving:Connect(onPlayerRemoving)  Sending an Embed using Color3 local Vibez = require(14946453963)(&quot;API Key&quot;, { nameOfGameForLogging = &quot;Colors Example&quot; }) local webhook = Vibez:getWebhookBuilder(&quot;https://discord.com/api/webhooks/&quot;) webhook:addEmbedWithBuilder(function(embed) return embed :setColor(Color3.fromRGB(255, 125, 255)) -- Light pink :setTitle(&quot;Color3 Example&quot;) :setDescription(&quot;This is an example of using a Color3 value for the color parameter.&quot;) end):Send()  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/VibezAPI/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/VibezAPI/docs/intro#installation","content":"Method 1 (Recommended)​ The main pro of this method is that you get auto-updates and you don't have to worry about updating the module yourself. Get the ModuleUse require(14946453963) to fetch the moduleDone! Method 2​ This method is recommended if you'd like more control over our module. With this method, you also get the autocomplete feature in Roblox Studio. Get the ModuleInsert the module into ServerScriptServiceUse require(game:GetService(&quot;ServerScriptService&quot;).VibezAPI) to fetch the module within your scriptDone!  "},{"title":"Usage​","type":1,"pageTitle":"Getting Started","url":"/VibezAPI/docs/intro#usage","content":"To begin, open a new Script in ServerScriptService and require the module with your preferred method: local VibezAPI = require(14946453963)  From there, you can use the API to create a new Vibez instance: local myApiKey = &quot;my-api-key&quot; local Vibez = VibezAPI(14946453963)(myApiKey)  Alright, now you have a Vibez instance. You can either customize this by following the other API documentation or you can use the default settings.  "},{"title":"API Settings​","type":1,"pageTitle":"Getting Started","url":"/VibezAPI/docs/intro#api-settings","content":"Our api wrapper supports extra options for when creating the class. These options can be found here. "},{"title":"Ranking","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Features/Ranking","content":"","keywords":""},{"title":"How to use​","type":1,"pageTitle":"Ranking","url":"/VibezAPI/docs/Features/Ranking#how-to-use","content":"At the moment there are only 4 ranking actions you can perform: Promote, Demote, Fire, and SetRank. Each of these actions have the same parameters, except for SetRank which has an extra parameter. The parameters are as follows: Parameter\tType\tDescription\tsetRank OnlyPlayer\tstring or number\tThe user ID/Name of the worker you want to rank.\t❌ Rank\tstring or number\tThe rank ID/Name/RoleId you want to rank the worker to.\t✔ "},{"title":"What's this whoCalled parameter?​","type":1,"pageTitle":"Ranking","url":"/VibezAPI/docs/Features/Ranking#whats-this-whocalled-parameter","content":"Under the hood of the API, we use the whoCalled parameter to generate logs within a Discord channel of the action, who did it, and who was affected. This is useful for auditing purposes, and to see who's abusing the API. If you supply nothing, the wrapper will automatically supply SYSTEM for the username, and the log generated will look different than with a proper user. If you supply a user's ID and name, the log will look like this:  If you supply nothing, the log will look like this:  "},{"title":"Why isn't it working?​","type":1,"pageTitle":"Ranking","url":"/VibezAPI/docs/Features/Ranking#why-isnt-it-working","content":"There's many reasons why the ranking API may fail, maybe your discord bot is offline, or maybe the worker is already ranked to the rank you're trying to rank them to. If you're having issues with the ranking API, please join our discord below and ask for help in the support channel.  "},{"title":"Examples​","type":1,"pageTitle":"Ranking","url":"/VibezAPI/docs/Features/Ranking#examples","content":"AutoRank Points There's a chance this script may not work, as it's not tested. If you have any issues, please join our discord and ask for help in the support channel. ServerScriptService/autoRankPoints.server.lua --// Configuration \\\\-- local apiKey = &quot;API_KEY&quot; local pointLocation = &quot;(player).leaderstats.Points&quot; -- Location of user's points local pointRanks = { { Rank = 0, pointsRequired = 0 } } --// Services \\\\-- local Players = game:GetService(&quot;Players&quot;) local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local DataStoreService = game:GetService(&quot;DataStoreService&quot;) --// Variables \\\\-- local vibezApi = require(14946453963)(apiKey, { Misc = { isAsync = true } }) local dataStoreToUse = DataStoreService:GetDataStore(&quot;pointRanks_&quot; .. game.PlaceId) local userCache = {} --// Functions \\\\-- local function onPlayerAdded(Player: Player) local isOk, data, connections, formattedString isOk, data = pcall(dataStoreToUse.GetAsync, dataStoreToUse, tostring(Player.UserId)) if not isOk then return end data = data or {} connections = {} vibezApi = vibezApi:waitUntilLoaded() -- Maybe I should explain what the 2 private methods do... -- This one formats a string using specific variables which can be seen -- on this page: https://itsrune.github.io/VibezAPI/docs/Settings#formatting-codes formattedString = vibezApi:_fixFormattedString(pointLocation, Player) -- This one loads the string into raw Lua code. _, pointLocation = vibezApi:_Loadstring(&quot;return &quot; .. formattedString) if typeof(pointLocation) ~= &quot;Instance&quot; then error(&quot;Invalid location of points for user &quot; .. Player.Name) return end table.insert(connections, pointLocation:GetPropertyChangedSignal(&quot;Value&quot;):Connect(function() for _, rankData in pairs(pointRanks) do if pointLocation.Value &lt; rankData.pointsRequired or data[rankData.Rank] == true then continue end local response = vibezApi:setRank(Player, rankData.Rank) if response.Success then data[rankData.Rank] = true end end end)) userCache[Player.UserId] = {connections, data} end local function onPlayerLeft(Player: Player, retry: number?) local exists = userCache[Player.UserId] if not exists then return end local isOk = pcall(dataStoreToUse.SetAsync, dataStoreToUse, tostring(Player.UserId), exists[2]) if not isOk then retry = retry or 0 if retry &gt; 3 then error(&quot;Failed to save data for user &quot; .. Player.Name) return end task.wait(3) return onPlayerLeft(Player, retry + 1) end for _, connection: RBXScriptConnection in pairs(exists[1]) do connection:Disconnect() end userCache[Player.UserId] = nil end --// Events \\\\-- Players.PlayerAdded:Connect(onPlayerAdded) Players.PlayerRemoving:Connect(onPlayerLeft)  "},{"title":"VibezAPI","type":0,"sectionRef":"#","url":"/VibezAPI/api/VibezAPI","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#types","content":" "},{"title":"simplifiedAPI​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#simplifiedAPI","content":"&lt;/&gt; interface simplifiedAPI { Ranking: { Set: ( Player: Player | string | number, newRank: string | number ) → rankResponse, Promote: (Player: Player | string | number) → rankResponse, Demote: (Player: Player | string | number) → rankResponse, Fire: (Player: Player | string | number) → rankResponse } Activity: { Get: (Player: Player | string | number) → activityResponse, Save: ( Player: Player | string | number, playerRank: number, secondsSpent: number, messagesSent: (number | {string})?, shouldFetchRank: boolean ) → httpResponse } Commands: { Add: ( commandName: string, commandAlias: {string?}, commandFunction: ( Player: Player , Args: {string?}, addLog: ( calledBy: Player , Action: string, affectedUsers: {Player }?, ...any ) → { calledBy: Player , affectedUsers: {Player }?, affectedCount: number, Metadata: any } ) ) → VibezAPI, AddArgPrefix: ( operationName: string, operationCode: string, operationFunction: ( playerWhoCalled: Player , playerToCheck: Player , incomingArgument: string ) → boolean ) → VibezAPI, RemoveArgePrefix: (operationName: string) → VibezAPI } Notifications: {Create: ( Player: Player , notificationMessage: string ) → ()} Webhooks: {Create: (webhookLink: string) → Webhooks} } A simplified version of our API.  "},{"title":"groupIdResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#groupIdResponse","content":"&lt;/&gt; interface groupIdResponse { success: boolean groupId: number? }   "},{"title":"errorResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#errorResponse","content":"&lt;/&gt; interface errorResponse { success: boolean errorMessage: string }   "},{"title":"rankResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#rankResponse","content":"&lt;/&gt; interface rankResponse { success: boolean message: string data: { newRank: { id: number, name: string, rank: number, memberCount: number }, oldRank: { id: number, name: string, rank: number, groupInformation: { id: number, name: string, memberCount: number, hasVerifiedBadge: boolean } } } }   "},{"title":"userBlacklistResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#userBlacklistResponse","content":"&lt;/&gt; interface userBlacklistResponse { success: boolean data: { blacklisted: boolean, reason: string } }   "},{"title":"fullBlacklists​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#fullBlacklists","content":"&lt;/&gt; interface fullBlacklists { success: boolean blacklists:: {[number | string]: { reason: string, blacklistedBy: number }} }   "},{"title":"httpResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#httpResponse","content":"&lt;/&gt; interface httpResponse { Body: {any} Headers: {[string]: any} StatusCode: number StatusMessage: string? Success: boolean rawBody: string }   "},{"title":"infoResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#infoResponse","content":"&lt;/&gt; interface infoResponse { success: boolean message: string }  "},{"title":"Properties​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#properties","content":" "},{"title":"Loaded​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Loaded","content":"&lt;/&gt; VibezAPI.Loaded: boolean Determines whether the API has loaded.  "},{"title":"GroupId​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#GroupId","content":"&lt;/&gt; VibezAPI.GroupId: number Holds the groupId associated with the API Key.  "},{"title":"Settings​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Settings","content":"&lt;/&gt; VibezAPI.Settings: extraOptionsType Holds a copy of the settings for the API. "},{"title":"Functions​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#functions","content":" "},{"title":"new​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#new","content":"This item only works when running on the server. Server since 1.0.1 &lt;/&gt; VibezAPI.new( apiKey: string,-- Your Vibez API key. extraOptions: extraOptionsType-- Extra settings to configure the api to work for you. ) → VibezAPI "},{"title":"Types","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI##","content":""},{"title":"​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#extraOptionsType","content":"interface extraOptionsType { Commands: { Enabled: boolean, useDefaultNames: boolean, MinRank: number&lt;0-255&gt;, MaxRank: number&lt;0-255&gt;, Prefix: string, Alias: {string?} } RankSticks: { Enabled: boolean, MinRank: number&lt;0-255&gt;, MaxRank: number&lt;0-255&gt;, SticksModel: Model? } Interface: { Enabled: boolean, MinRank: number&lt;0-255&gt;, MaxRank: number&lt;0-255&gt; } Notifications: { Enabled: boolean, Font: Enum.Font, FontSize: number&lt;1-100&gt;, keyboardFontSizeMultiplier: number, delayUntilRemoval: number, entranceTweenInfo: { Style: Enum.EasingStyle, Direction: Enum.EasingDirection, timeItTakes: number }, exitTweenInfo: { Style: Enum.EasingStyle, Direction: Enum.EasingDirection, timeItTakes: number } } ActivityTracker: { Enabled: boolean, MinRank: number&lt;0-255&gt;, disabledWhenInStudio: boolean, delayBeforeMarkedAFK: number, kickIfFails: boolean, failMessage: string } Misc: { originLoggerText: string, ignoreWarnings: boolean, rankingCooldown: number, overrideGroupCheckForStudio: boolean, createGlobalVariables: boolean, isAsync: boolean } }   Notice This method can be used as a normal function or invoke the &quot;.new&quot; function: require(14946453963)(&quot;API Key&quot;) require(14946453963).new(&quot;API Key&quot;) Constructs the main Vibez API class. local myKey = &quot;YOUR_API_KEY_HERE&quot; local VibezAPI = require(14946453963) local Vibez = VibezAPI(myKey)   "},{"title":"awaitGlobals​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#awaitGlobals","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.1.0 &lt;/&gt; VibezAPI.awaitGlobals() → VibezAPI Awaits for the Global API to be loaded. local globals = VibezAPI.awaitGlobals()   "},{"title":"getUsersForCommands​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getUsersForCommands","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.4.0 &lt;/&gt; VibezAPI:getUsersForCommands( playerWhoCalled: Player , usernames: {string} ) → {Player? } Gets the closest match to a player's username who's in game.  "},{"title":"giveRankSticks​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#giveRankSticks","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Chainable since 1.9.1 &lt;/&gt; VibezAPI:giveRankSticks( User: Player | string | number, shouldCheckPermissions: boolean? ) → VibezAPI Gives the ranking sticks to the player. Succession depends on whether they pass permissions check OR if permissions check is turned off  "},{"title":"setRankStickTool​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#setRankStickTool","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Chainable since 1.9.1 &lt;/&gt; VibezAPI:setRankStickTool(tool: Tool | Model ) → VibezAPI Sets the ranking stick's tool.  "},{"title":"getGroupId​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getGroupId","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.1.0 &lt;/&gt; VibezAPI:getGroupId() → number | -1 Fetches the group associated with the api key.  "},{"title":"getSimplified​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getSimplified","content":"since 1.11.0 &lt;/&gt; VibezAPI:getSimplified() → simplifiedAPI Returns a simplified version of this API.  "},{"title":"setRank​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#setRank","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.1.0 &lt;/&gt; VibezAPI:setRank( userId: string | number, rankId: string | number, whoCalled: { userName: string, userId: number }? ) → rankResponse Sets the rank of a player and whoCalled (Optional) is used for logging purposes.  "},{"title":"Promote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Promote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.1.0 &lt;/&gt; VibezAPI:Promote( userId: string | number, whoCalled: { userName: string, userId: number }? ) → rankResponse Promotes a player and whoCalled (Optional) is used for logging purposes.  "},{"title":"Demote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Demote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.1.0 &lt;/&gt; VibezAPI:Demote( userId: string | number, whoCalled: { userName: string, userId: number }? ) → rankResponse Demotes a player and whoCalled (Optional) is used for logging purposes.  "},{"title":"Fire​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Fire","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.1.0 &lt;/&gt; VibezAPI:Fire( userId: string | number, whoCalled: { userName: string, userId: number }? ) → rankResponse Fires a player and whoCalled (Optional) is used for logging purposes.  "},{"title":"bulkRank​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#bulkRank","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.4.0 &lt;/&gt; VibezAPI:bulkRank( Type: &quot;Fire&quot; | &quot;Promote&quot; | &quot;Demote&quot; | &quot;SetRank&quot;, Users: {Player }, ...: any ) → ( {Player }, {Player? } ) Changes the rank of bulk selection of users.  "},{"title":"addCommand​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#addCommand","content":"since 1.3.1 &lt;/&gt; VibezAPI:addCommand( commandName: string, commandAliases: {string}?, commandOperation: ( Player: Player , Args: {string}, addLog: ( calledBy: Player , Action: string, affectedUsers: {Player }?, ...any ) → { calledBy: Player , affectedUsers: {Player }?, affectedCount: number?, Metadata: any } ) → () ) → VibezAPI Creates a new command within our systems.  "},{"title":"addArgumentPrefix​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#addArgumentPrefix","content":"Chainable since 1.3.1 &lt;/&gt; VibezAPI:addArgumentPrefix( operationName: string, operationCode: string, operationFunction: ( playerToCheck: Player , incomingArgument: string, internalFunctions: { getGroupRankFromName: (groupRoleName: string) → number?, getGroupFromUser: ( groupId: number, userId: number ) → {any}?, Http: ( Route: string, Method: string?, Headers: {[string]: any}, Body: {any} ) → httpResponse, addLog: ( calledBy: Player , Action: string, affectedUsers: {{ Name: string, UserId: number }}?, ...: any ) → () } ) → boolean ) → VibezAPI Adds a command operation code. caution This method will not work if there's already an existing operation name!  "},{"title":"removeArgumentPrefix​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#removeArgumentPrefix","content":"Chainable since 1.3.1 &lt;/&gt; VibezAPI:removeArgumentPrefix(operationName: string) → VibezAPI Removes a command operation code. Vibez:removeArgumentPrefix(&quot;Team&quot;)   "},{"title":"updateLoggerName​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#updateLoggerName","content":"Chainable since 1.1.0 &lt;/&gt; VibezAPI:updateLoggerName(newTitle: string) → nil Updates the logger's origin name.  "},{"title":"updateKey​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#updateKey","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 1.2.0 &lt;/&gt; VibezAPI:updateKey(newApiKey: string) → boolean Updates the api key.  "},{"title":"Destroy​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Destroy","content":"since 1.1.0 &lt;/&gt; VibezAPI:Destroy() → () Destroys the VibezAPI class.  "},{"title":"getWebhookBuilder​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getWebhookBuilder","content":"since 1.5.0 &lt;/&gt; VibezAPI:getWebhookBuilder(webhook: string) → VibezHooks Initializes the Hooks class with the specified webhook.  "},{"title":"addBlacklist​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#addBlacklist","content":"since 1.6.0 &lt;/&gt; VibezAPI:addBlacklist( userToBlacklist: (Player string | number), Reason: string?, blacklistExecutedBy: (Player string | number)? ) → blacklistResponse Adds a blacklist to your api key.  "},{"title":"deleteBlacklist​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#deleteBlacklist","content":"since 1.6.0 &lt;/&gt; VibezAPI:deleteBlacklist(userToDelete: (Player string | number)) → blacklistResponse Deletes a blacklist from your api key.  "},{"title":"getBlacklists​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getBlacklists","content":"since 1.6.0 &lt;/&gt; VibezAPI:getBlacklists(userId: (string | number)?) → blacklistResponse Gets either a full list of blacklists or checks if a player is currently blacklisted.  "},{"title":"isUserBlacklisted​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#isUserBlacklisted","content":"since 1.6.0 &lt;/&gt; VibezAPI:isUserBlacklisted(userId: (string | number)?) → blacklistResponse Gets either a full list of blacklists or checks if a player is currently blacklisted.  "},{"title":"waitUntilLoaded​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#waitUntilLoaded","content":"Chainable since 1.8.0 &lt;/&gt; VibezAPI:waitUntilLoaded() → VibezAPI? Gets a player's or everyone's current activity  "},{"title":"getActivity​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getActivity","content":"since 1.3.0 &lt;/&gt; VibezAPI:getActivity(userId: (string | number)?) → activityResponse "},{"title":"Types","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI##","content":""},{"title":"​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#activityResponse","content":"interface activityResponse { secondsUserHasSpent: number messagesUserHasSent: number detailsLogs: [{ timestampLeftAt: number, secondsUserHasSpent: number, messagesUserHasSent: number }?] }  Gets a player's or everyone's current activity  "},{"title":"saveActivity​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#saveActivity","content":"since 1.3.0 &lt;/&gt; VibezAPI:saveActivity( userId: string | number, userRank: number, secondsSpent: number, messagesSent: (number | {string})?, shouldFetchGroupRank: boolean? ) → httpResponse Saves the player's current activity  "},{"title":"bindToAction​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#bindToAction","content":"since 1.9.0 &lt;/&gt; VibezAPI:bindToAction( name: string, action: string&lt;Promote | Demote | Fire | Blacklist&gt;, callback: (result: responseBody) → () ) → VibezAPI "},{"title":"Types","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI##","content":""},{"title":"​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#responseBody","content":"type responseBody = groupIdResponse | errorResponse | rankResponse  Binds a custom function to a specific internal method. info When a ranking action is triggered, your custom function will run with the response.  "},{"title":"unbindFromAction​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#unbindFromAction","content":"since 1.9.0 &lt;/&gt; VibezAPI:unbindFromAction( name: string, action: string&lt;Promote | Demote | Fire | Blacklist&gt; ) → VibezAPI Unbinds a custom function from a method. "},{"title":"About","type":0,"sectionRef":"#","url":"/VibezAPI/docs/Features/Commands/About","content":"","keywords":""},{"title":"Why did we make commands?​","type":1,"pageTitle":"About","url":"/VibezAPI/docs/Features/Commands/About#why-did-we-make-commands","content":"We made commands because we realized that maybe some developers aren't experienced enough to use the API, or they just want a simple way to use the API. Commands were the only way to make this possible. With our commands you can fully control the API while also being secure in doing so. "},{"title":"How do commands work?​","type":1,"pageTitle":"About","url":"/VibezAPI/docs/Features/Commands/About#how-do-commands-work","content":"Our commands work by taking the prefix, first checking that it's correct and removing it from the entire command. Then it splits the command into pieces, leaving the command's name and arguments. It then checks if the command exists, and if it does, it runs the command with the arguments. If it doesn't, it will ignore the message and it's contents. "},{"title":"Can I create my own commands?​","type":1,"pageTitle":"About","url":"/VibezAPI/docs/Features/Commands/About#can-i-create-my-own-commands","content":"Yes! You can create your own commands. Head over to the Adding Commands page to learn how to create your own commands. "},{"title":"Can I create my own shorteners?​","type":1,"pageTitle":"About","url":"/VibezAPI/docs/Features/Commands/About#can-i-create-my-own-shorteners","content":"Yes! You can create your own shorteners. Head over to the Command Operation Codes page to learn how to create your own shorteners. "},{"title":"Command Settings​","type":1,"pageTitle":"About","url":"/VibezAPI/docs/Features/Commands/About#command-settings","content":"Enabled = false, useDefaultNames = true, MinRank = 255, MaxRank = 255, Prefix = &quot;!&quot;, Alias = {},  "},{"title":"How can I use the module with another admin system?​","type":1,"pageTitle":"About","url":"/VibezAPI/docs/Features/Commands/About#how-can-i-use-the-module-with-another-admin-system","content":"We understand that many people use other admin systems that have much more complex features and would prefer to use that instead. Below we have listed a few examples of the top admin systems and how you can use the module with them. Please make sure you are using the Global API to use the module with these admin systems. Basic Admin Essentials All in one command local Plugin = function(...) local Data = { ... } -- Included Functions and Info -- local remoteEvent = Data[1][1] local remoteFunction = Data[1][2] local returnPermissions = Data[1][3] local Commands = Data[1][4] local Prefix = Data[1][5] local actionPrefix = Data[1][6] local returnPlayers = Data[1][7] local cleanData = Data[1][8] -- cleanData(Sender,Receiver,Data) -- Practical example, for a gui specifically for a player, from another player -- cleanData(Sender,Receiver,&quot;hi&quot;) -- You need receiver because it's being sent to everyone -- Or for a broadcast (something everyone sees, from one person, to nobody specific) -- cleanData(Sender,nil,&quot;hi&quot;) -- Receiver is nil because it is a broadcast -- Plugin Configuration -- local pluginName = 'rank' local pluginPrefix = Prefix local pluginLevel = 1 local pluginUsage = &quot;&lt;Type&gt; &lt;User(s)&gt;&quot; -- leave blank if the command has no arguments local pluginDescription = &quot;Promotes/Demotes/Sets a player's rank within the group.&quot; -- Example Plugin Function -- local function pluginFunction(Args) -- keep the name of the function as &quot;pluginFunction&quot; local vibezApi = nil while vibezApi == nil do vibezApi = _G[&quot;VibezApi&quot;] task.wait(.25) end local Sender = Args[1] local Type = Args[3] local Users = {{Name = Args[4], UserId = game.Players:GetUserIdFromNameAsync(Args[4])}} local succeeded, failed = {}, {} if string.sub(string.lower(Type), 1, 1) == &quot;p&quot; then Type = &quot;Promote&quot; elseif string.sub(string.lower(Type), 1, 1) == &quot;d&quot; then Type = &quot;Demote&quot; elseif string.sub(string.lower(Type), 1, 1) == &quot;f&quot; then Type = &quot;Fire&quot; elseif string.sub(string.lower(Type), 1, 1) == &quot;s&quot; then Type = &quot;setRank&quot; if not Args[5] then remoteEvent:FireClient(Sender, &quot;Hint&quot;, &quot;Error&quot;, &quot;You need to specify a rank to set the user(s) to.&quot;) return end else remoteEvent:FireClient(Sender, &quot;Hint&quot;, &quot;Error&quot;, &quot;Invalid ranking type. We expected 'Promote', 'Demote', 'Fire' or 'SetRank'.&quot;) end for _, User in pairs(Users) do local response = vibezApi.Ranking[Type]({}, User.UserId, Args[5]) if response.success or response.Success then table.insert(succeeded, User.Name) else table.insert(failed, User.Name) end end local firstNames = (#succeeded &gt; 0) and table.concat(succeeded, &quot;, &quot;, 1, math.clamp(#succeeded, 1, 3)) or &quot;&quot; local failedNames = (#failed &gt; 0) and table.concat(failed, &quot;, &quot;, 1, math.clamp(#failed, 1, 3)) or &quot;&quot; local fixedString = { [&quot;Promote&quot;] = &quot;Promoted&quot;, [&quot;Demote&quot;] = &quot;Demoted&quot;, [&quot;Fire&quot;] = &quot;Fired&quot;, [&quot;setRank&quot;] = &quot;Set The Rank Of&quot; } if #succeeded &gt; 3 then firstNames ..= &quot; (+&quot; .. #succeeded - 3 .. &quot; others)&quot; remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;Rank - &quot; .. Type, string.format( &quot;Successfully %s '%s' user(s)%s&quot;, fixedString[Type], firstNames, #failed &gt; 0 and &quot; and failed to &quot; .. string.lower(Type) .. &quot; &quot; .. #failed .. &quot; user(s)!&quot; or &quot;&quot; ) ) elseif #succeeded &lt;= 3 and #succeeded ~= 0 then remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;Rank - &quot; .. Type, &quot;Successfully &quot; .. string.lower(fixedString[Type]) .. &quot; '&quot; .. firstNames .. &quot;'!&quot; ) elseif #failed &gt; 0 then if #failed &gt; 3 then failedNames ..= &quot; (+&quot; .. #failed - 3 .. &quot; others)&quot; end remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;Rank - &quot; .. Type, &quot;Failed to &quot; .. string.lower(fixedString[Type]) .. &quot; '&quot; .. failedNames .. &quot;'!&quot; ) end end -- Return Everything to the MainModule -- local descToReturn if pluginUsage ~= &quot;&quot; then descToReturn = pluginPrefix..pluginName..' '..pluginUsage..'\\n'..pluginDescription else descToReturn = pluginPrefix..pluginName..'\\n'..pluginDescription end return pluginName,pluginFunction,pluginLevel,pluginPrefix,{pluginName,pluginUsage,pluginDescription} end return Plugin Promote local Plugin = function(...) local Data = { ... } -- Included Functions and Info -- local remoteEvent = Data[1][1] local remoteFunction = Data[1][2] local returnPermissions = Data[1][3] local Commands = Data[1][4] local Prefix = Data[1][5] local actionPrefix = Data[1][6] local returnPlayers = Data[1][7] local cleanData = Data[1][8] -- cleanData(Sender,Receiver,Data) -- Practical example, for a gui specifically for a player, from another player -- cleanData(Sender,Receiver,&quot;hi&quot;) -- You need receiver because it's being sent to everyone -- Or for a broadcast (something everyone sees, from one person, to nobody specific) -- cleanData(Sender,nil,&quot;hi&quot;) -- Receiver is nil because it is a broadcast -- Plugin Configuration -- local pluginName = 'promote' local pluginPrefix = Prefix local pluginLevel = 1 local pluginUsage = &quot;&lt;User(s)&gt;&quot; -- leave blank if the command has no arguments local pluginDescription = &quot;Promotes a player's rank within the group.&quot; -- Example Plugin Function -- local function pluginFunction(Args) -- keep the name of the function as &quot;pluginFunction&quot; local vibezApi = nil while vibezApi == nil do vibezApi = _G[&quot;VibezApi&quot;] task.wait(.25) end local Sender = Args[1] local Users = returnPlayers(Sender, Args[3]) local succeeded, failed = {}, {} if #Users == 0 then return remoteEvent:FireClient(Sender, &quot;Hint&quot;, &quot;Error&quot;, &quot;No user(s) to promote!&quot;) end for _, User in pairs(Users) do local response = vibezApi.Ranking:Promote(User.UserId, { userName = Sender.Name, userId = Sender.UserId }) if response.Success and response.Body and response.Body.success then table.insert(succeeded, User.Name) else table.insert(failed, User.Name) end end local firstNames = (#succeeded &gt; 0) and table.concat(succeeded, &quot;, &quot;, 1, math.clamp(#succeeded, 1, 3)) or &quot;&quot; local failedNames = (#failed &gt; 0) and table.concat(failed, &quot;, &quot;, 1, math.clamp(#failed, 1, 3)) or &quot;&quot; if #succeeded &gt; 3 then firstNames ..= &quot; (+&quot; .. #succeeded - 3 .. &quot; others)&quot; remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;Promotion&quot;, &quot;Successfully promoted '&quot; .. firstNames .. &quot;' user(s)&quot; .. (string.len(failed) &gt; 0 and &quot; and failed to promote &quot; .. string.len(failed) .. &quot; user(s)&quot; or &quot;&quot;) ) elseif #succeeded &lt;= 3 and #succeeded ~= 0 then remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;Promotion&quot;, &quot;Successfully promoted '&quot; .. firstNames .. &quot;'!&quot; ) elseif #failed &gt; 0 then if #failed &gt; 3 then failedNames ..= &quot; (+&quot; .. #failed - 3 .. &quot; others)&quot; end remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;Promotion&quot;, &quot;Failed to promote '&quot; .. failedNames .. &quot;'!&quot; ) end end -- Return Everything to the MainModule -- local descToReturn if pluginUsage ~= &quot;&quot; then descToReturn = pluginPrefix..pluginName..' '..pluginUsage..'\\n'..pluginDescription else descToReturn = pluginPrefix..pluginName..'\\n'..pluginDescription end return pluginName,pluginFunction,pluginLevel,pluginPrefix,{pluginName,pluginUsage,pluginDescription} end return Plugin Demote local Plugin = function(...) local Data = { ... } -- Included Functions and Info -- local remoteEvent = Data[1][1] local remoteFunction = Data[1][2] local returnPermissions = Data[1][3] local Commands = Data[1][4] local Prefix = Data[1][5] local actionPrefix = Data[1][6] local returnPlayers = Data[1][7] local cleanData = Data[1][8] -- cleanData(Sender,Receiver,Data) -- Practical example, for a gui specifically for a player, from another player -- cleanData(Sender,Receiver,&quot;hi&quot;) -- You need receiver because it's being sent to everyone -- Or for a broadcast (something everyone sees, from one person, to nobody specific) -- cleanData(Sender,nil,&quot;hi&quot;) -- Receiver is nil because it is a broadcast -- Plugin Configuration -- local pluginName = 'demote' local pluginPrefix = Prefix local pluginLevel = 1 local pluginUsage = &quot;&lt;User(s)&gt;&quot; -- leave blank if the command has no arguments local pluginDescription = &quot;Demotes a player's rank within the group.&quot; -- Example Plugin Function -- local function pluginFunction(Args) -- keep the name of the function as &quot;pluginFunction&quot; local vibezApi = nil while vibezApi == nil do vibezApi = _G[&quot;VibezApi&quot;] task.wait(.25) end local Sender = Args[1] local Users = returnPlayers(Sender, Args[3]) local succeeded, failed = {}, {} if #Users == 0 then return remoteEvent:FireClient(Sender, &quot;Hint&quot;, &quot;Error&quot;, &quot;No user(s) to demote!&quot;) end for _, User in pairs(Users) do local response = vibezApi.Ranking:Demote(User.UserId, { userName = Sender.Name, userId = Sender.UserId }) if response.success or response.Success then table.insert(succeeded, User.Name) else table.insert(failed, User.Name) end end local firstNames = (#succeeded &gt; 0) and table.concat(succeeded, &quot;, &quot;, 1, math.clamp(#succeeded, 1, 3)) or &quot;&quot; local failedNames = (#failed &gt; 0) and table.concat(failed, &quot;, &quot;, 1, math.clamp(#failed, 1, 3)) or &quot;&quot; if #succeeded &gt; 3 then firstNames ..= &quot; (+&quot; .. #succeeded - 3 .. &quot; others)&quot; remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;Demotion&quot;, &quot;Successfully demoted '&quot; .. firstNames .. &quot;' user(s)&quot; .. (string.len(failed) &gt; 0 and &quot; and failed to demote &quot; .. string.len(failed) .. &quot; user(s)&quot; or &quot;&quot;) ) elseif #succeeded &lt;= 3 and #succeeded ~= 0 then remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;Demotion&quot;, &quot;Successfully demoted '&quot; .. firstNames .. &quot;'!&quot; ) elseif #failed &gt; 0 then if #failed &gt; 3 then failedNames ..= &quot; (+&quot; .. #failed - 3 .. &quot; others)&quot; end remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;Demotion&quot;, &quot;Failed to demote '&quot; .. failedNames .. &quot;'!&quot; ) end end -- Return Everything to the MainModule -- local descToReturn if pluginUsage ~= &quot;&quot; then descToReturn = pluginPrefix..pluginName..' '..pluginUsage..'\\n'..pluginDescription else descToReturn = pluginPrefix..pluginName..'\\n'..pluginDescription end return pluginName,pluginFunction,pluginLevel,pluginPrefix,{pluginName,pluginUsage,pluginDescription} end return Plugin Fire local Plugin = function(...) local Data = { ... } -- Included Functions and Info -- local remoteEvent = Data[1][1] local remoteFunction = Data[1][2] local returnPermissions = Data[1][3] local Commands = Data[1][4] local Prefix = Data[1][5] local actionPrefix = Data[1][6] local returnPlayers = Data[1][7] local cleanData = Data[1][8] -- cleanData(Sender,Receiver,Data) -- Practical example, for a gui specifically for a player, from another player -- cleanData(Sender,Receiver,&quot;hi&quot;) -- You need receiver because it's being sent to everyone -- Or for a broadcast (something everyone sees, from one person, to nobody specific) -- cleanData(Sender,nil,&quot;hi&quot;) -- Receiver is nil because it is a broadcast -- Plugin Configuration -- local pluginName = 'fire' local pluginPrefix = Prefix local pluginLevel = 1 local pluginUsage = &quot;&lt;User(s)&gt;&quot; -- leave blank if the command has no arguments local pluginDescription = &quot;Fires a player the group.&quot; -- Example Plugin Function -- local function pluginFunction(Args) -- keep the name of the function as &quot;pluginFunction&quot; local vibezApi = nil while vibezApi == nil do vibezApi = _G[&quot;VibezApi&quot;] task.wait(.25) end local Sender = Args[1] local Users = returnPlayers(Sender, Args[3]) local succeeded, failed = {}, {} if #Users == 0 then return remoteEvent:FireClient(Sender, &quot;Hint&quot;, &quot;Error&quot;, &quot;No user(s) to fire!&quot;) end for _, User in pairs(Users) do local response = vibezApi.Ranking:Fire(User.UserId, { userName = Sender.Name, userId = Sender.UserId }) if response.success or response.Success then table.insert(succeeded, User.Name) else table.insert(failed, User.Name) end end local firstNames = (#succeeded &gt; 0) and table.concat(succeeded, &quot;, &quot;, 1, math.clamp(#succeeded, 1, 3)) or &quot;&quot; local failedNames = (#failed &gt; 0) and table.concat(failed, &quot;, &quot;, 1, math.clamp(#failed, 1, 3)) or &quot;&quot; if #succeeded &gt; 3 then firstNames ..= &quot; (+&quot; .. #succeeded - 3 .. &quot; others)&quot; remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;Fire&quot;, &quot;Successfully fired '&quot; .. firstNames .. &quot;' user(s)&quot; .. (string.len(failed) &gt; 0 and &quot; and failed to fire &quot; .. string.len(failed) .. &quot; user(s)&quot; or &quot;&quot;) ) elseif #succeeded &lt;= 3 and #succeeded ~= 0 then remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;Fire&quot;, &quot;Successfully fired '&quot; .. firstNames .. &quot;'!&quot; ) elseif #failed &gt; 0 then if #failed &gt; 3 then failedNames ..= &quot; (+&quot; .. #failed - 3 .. &quot; others)&quot; end remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;Fire&quot;, &quot;Failed to fire '&quot; .. failedNames .. &quot;'!&quot; ) end end -- Return Everything to the MainModule -- local descToReturn if pluginUsage ~= &quot;&quot; then descToReturn = pluginPrefix..pluginName..' '..pluginUsage..'\\n'..pluginDescription else descToReturn = pluginPrefix..pluginName..'\\n'..pluginDescription end return pluginName,pluginFunction,pluginLevel,pluginPrefix,{pluginName,pluginUsage,pluginDescription} end return Plugin SetRank local Plugin = function(...) local Data = { ... } -- Included Functions and Info -- local remoteEvent = Data[1][1] local remoteFunction = Data[1][2] local returnPermissions = Data[1][3] local Commands = Data[1][4] local Prefix = Data[1][5] local actionPrefix = Data[1][6] local returnPlayers = Data[1][7] local cleanData = Data[1][8] -- cleanData(Sender,Receiver,Data) -- Practical example, for a gui specifically for a player, from another player -- cleanData(Sender,Receiver,&quot;hi&quot;) -- You need receiver because it's being sent to everyone -- Or for a broadcast (something everyone sees, from one person, to nobody specific) -- cleanData(Sender,nil,&quot;hi&quot;) -- Receiver is nil because it is a broadcast -- Plugin Configuration -- local pluginName = 'setrank' local pluginPrefix = Prefix local pluginLevel = 1 local pluginUsage = &quot;&lt;User(s)&gt; &lt;NewRank&gt;&quot; -- leave blank if the command has no arguments local pluginDescription = &quot;Sets the rank of a player within the group.&quot; -- Example Plugin Function -- local function pluginFunction(Args) -- keep the name of the function as &quot;pluginFunction&quot; local vibezApi = nil while vibezApi == nil do vibezApi = _G[&quot;VibezApi&quot;] task.wait(.25) end local Sender = Args[1] local Users = returnPlayers(Sender, Args[3]) local succeeded, failed = {}, {} if #Users == 0 then return remoteEvent:FireClient(Sender, &quot;Hint&quot;, &quot;Error&quot;, &quot;No user(s) to fire!&quot;) elseif tonumber(Args[4]) == nil then return remoteEvent:FireClient(Sender, &quot;Hint&quot;, &quot;Error&quot;, &quot;'Rank' has to be of type 'number', NOT '&quot; .. typeof(Args[4]) .. &quot;'!&quot;) end for _, User in pairs(Users) do local response = vibezApi.Ranking:setRank(User.UserId, tonumber(Args[4]), { userName = Sender.Name, userId = Sender.UserId }) if response.success or response.Success then table.insert(succeeded, User.Name) else table.insert(failed, User.Name) end end local firstNames = (#succeeded &gt; 0) and table.concat(succeeded, &quot;, &quot;, 1, math.clamp(#succeeded, 1, 3)) or &quot;&quot; local failedNames = (#failed &gt; 0) and table.concat(failed, &quot;, &quot;, 1, math.clamp(#failed, 1, 3)) or &quot;&quot; if #succeeded &gt; 3 then firstNames ..= &quot; (+&quot; .. #succeeded - 3 .. &quot; others)&quot; remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;SetRank&quot;, &quot;Successfully set the rank of '&quot; .. firstNames .. &quot;' user(s)&quot; .. (string.len(failed) &gt; 0 and &quot; and failed to fire &quot; .. string.len(failed) .. &quot; user(s)&quot; or &quot;&quot;) ) elseif #succeeded &lt;= 3 and #succeeded ~= 0 then remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;SetRank&quot;, &quot;Successfully set the rank of '&quot; .. firstNames .. &quot;'!&quot; ) elseif #failed &gt; 0 then if #failed &gt; 3 then failedNames ..= &quot; (+&quot; .. #failed - 3 .. &quot; others)&quot; end remoteEvent:FireClient( Sender, &quot;Hint&quot;, &quot;SetRank&quot;, &quot;Failed to set the rank of '&quot; .. failedNames .. &quot;'!&quot; ) end end -- Return Everything to the MainModule -- local descToReturn if pluginUsage ~= &quot;&quot; then descToReturn = pluginPrefix..pluginName..' '..pluginUsage..'\\n'..pluginDescription else descToReturn = pluginPrefix..pluginName..'\\n'..pluginDescription end return pluginName,pluginFunction,pluginLevel,pluginPrefix,{pluginName,pluginUsage,pluginDescription} end return Plugin  Adonis (Untested) return function(Vargs) local server = Vargs.Server local service = Vargs.Service --// Add a new command to the Commands table at index &quot;ExampleCommand1&quot; server.Commands.Promote = { --// The index &amp; table of the command Prefix = server.Settings.Prefix; --// The prefix the command will use, this is the ':' in ':ff me' Commands = {&quot;Promote&quot;}; --// A table containing the command strings (the things you chat in-game to run the command, the 'ff' in ':ff me') Args = {&quot;playerToPromote&quot;}; --// Command arguments, these will be available in order as args[1], args[2], args[3], etc; This is the 'me' in ':ff me' Description = &quot;Promotes the rank of a player.&quot;; --// The description of the command AdminLevel = 100; -- Moderators --// The command's minimum admin level; This can also be a table containing specific levels rather than a minimum level: {124, 152, &quot;HeadAdmins&quot;, etc}; --// Alternative option: AdminLevel = &quot;Moderators&quot;; Filter = true; --// Should user supplied text passed to this command be filtered automatically? Use this if you plan to display a user-defined message to other players Fun = false; --// Is this command considered as fun? Hidden = false; --// Should this command be hidden from the command list? Disabled = false; --// Should this command be unusable? NoStudio = false; --// Should this command be blocked from being executed in a Studio environment? NonChattable = false; --// Should this command be blocked from being executed via chat? CrossServerDenied = false; --// If true, this command will not be usable via :crossserver Function = function(plr: Player, args: {string}, data: {}) --// The command's function; This is the actual code of the command which runs when you run the command --// &quot;plr&quot; is the player running the command --// &quot;args&quot; is a table containing command arguments supplied by the user --// &quot;data&quot; is a table containing information related to the command and the player running it, such as data.PlayerData.Level (the player's admin level) local vibezApi = nil while vibezApi == nil do vibezApi = _G[&quot;VibezApi&quot;] task.wait(.25) end vibezApi.Ranking:Promote(args[1], { userName = plr.Name, userId = plr.UserId }) end } server.Commands.Demote = { --// The index &amp; table of the command Prefix = server.Settings.Prefix; --// The prefix the command will use, this is the ':' in ':ff me' Commands = {&quot;Demote&quot;}; --// A table containing the command strings (the things you chat in-game to run the command, the 'ff' in ':ff me') Args = {&quot;playerToDemote&quot;}; --// Command arguments, these will be available in order as args[1], args[2], args[3], etc; This is the 'me' in ':ff me' Description = &quot;Demotes the rank of a player.&quot;; --// The description of the command AdminLevel = 100; -- Moderators --// The command's minimum admin level; This can also be a table containing specific levels rather than a minimum level: {124, 152, &quot;HeadAdmins&quot;, etc}; --// Alternative option: AdminLevel = &quot;Moderators&quot;; Filter = true; --// Should user supplied text passed to this command be filtered automatically? Use this if you plan to display a user-defined message to other players Fun = false; --// Is this command considered as fun? Hidden = false; --// Should this command be hidden from the command list? Disabled = false; --// Should this command be unusable? NoStudio = false; --// Should this command be blocked from being executed in a Studio environment? NonChattable = false; --// Should this command be blocked from being executed via chat? CrossServerDenied = false; --// If true, this command will not be usable via :crossserver Function = function(plr: Player, args: {string}, data: {}) --// The command's function; This is the actual code of the command which runs when you run the command local vibezApi = nil while vibezApi == nil do vibezApi = _G[&quot;VibezApi&quot;] task.wait(.25) end vibezApi.Ranking:Demote(args[1], { userName = plr.Name, userId = plr.UserId }) end } server.Commands.setRank = { --// The index &amp; table of the command Prefix = server.Settings.Prefix; --// The prefix the command will use, this is the ':' in ':ff me' Commands = {&quot;setRank&quot;}; --// A table containing the command strings (the things you chat in-game to run the command, the 'ff' in ':ff me') Args = {&quot;playerToSetRank&quot;, &quot;newRank&quot;}; --// Command arguments, these will be available in order as args[1], args[2], args[3], etc; This is the 'me' in ':ff me' Description = &quot;Sets the rank of a player.&quot;; --// The description of the command AdminLevel = 100; -- Moderators --// The command's minimum admin level; This can also be a table containing specific levels rather than a minimum level: {124, 152, &quot;HeadAdmins&quot;, etc}; --// Alternative option: AdminLevel = &quot;Moderators&quot;; Filter = true; --// Should user supplied text passed to this command be filtered automatically? Use this if you plan to display a user-defined message to other players Fun = false; --// Is this command considered as fun? Hidden = false; --// Should this command be hidden from the command list? Disabled = false; --// Should this command be unusable? NoStudio = false; --// Should this command be blocked from being executed in a Studio environment? NonChattable = false; --// Should this command be blocked from being executed via chat? CrossServerDenied = false; --// If true, this command will not be usable via :crossserver Function = function(plr: Player, args: {string}, data: {}) --// The command's function; This is the actual code of the command which runs when you run the command local vibezApi = nil while vibezApi == nil do vibezApi = _G[&quot;VibezApi&quot;] task.wait(.25) end vibezApi.Ranking:SetRank(args[1], args[2], { userName = plr.Name, userId = plr.UserId }) end } end  "}]
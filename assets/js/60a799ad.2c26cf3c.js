"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[616],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>f});var t=a(67294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=t.createContext({}),d=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},c=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(a),p=i,f=u["".concat(s,".").concat(p)]||u[p]||m[p]||r;return a?t.createElement(f,l(l({ref:n},c),{},{components:a})):t.createElement(f,l({ref:n},c))}));function f(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=a[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},56540:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var t=a(87462),i=(a(67294),a(3905));const r={sidebar_position:1},l=void 0,o={unversionedId:"Features/Commands/About",id:"Features/Commands/About",title:"About",description:"Why did we make commands?",source:"@site/docs/Features/Commands/About.md",sourceDirName:"Features/Commands",slug:"/Features/Commands/About",permalink:"/VibezAPI/docs/Features/Commands/About",draft:!1,editUrl:"https://github.com/ItsRune/VibezAPI/edit/master/docs/Features/Commands/About.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Binding Actions",permalink:"/VibezAPI/docs/Features/Binding Actions"},next:{title:"Adding Commands",permalink:"/VibezAPI/docs/Features/Commands/Adding Commands"}},s={},d=[{value:"Why did we make commands?",id:"why-did-we-make-commands",level:2},{value:"How do commands work?",id:"how-do-commands-work",level:2},{value:"Can I create my own commands?",id:"can-i-create-my-own-commands",level:2},{value:"Can I create my own shorteners?",id:"can-i-create-my-own-shorteners",level:2},{value:"Command Settings",id:"command-settings",level:2},{value:"How can I use the module with another admin system?",id:"how-can-i-use-the-module-with-another-admin-system",level:2}],c={toc:d},u="wrapper";function m(e){let{components:n,...a}=e;return(0,i.kt)(u,(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"why-did-we-make-commands"},"Why did we make commands?"),(0,i.kt)("p",null,"We made commands because we realized that maybe some developers aren't experienced enough to use the API, or they just want a simple way to use the API. Commands were the only way to make this possible. With our commands you can fully control the API while also being secure in doing so."),(0,i.kt)("h2",{id:"how-do-commands-work"},"How do commands work?"),(0,i.kt)("p",null,"Our commands work by taking the prefix, first checking that it's correct and removing it from the entire command. Then it splits the command into pieces, leaving the command's name and arguments. It then checks if the command exists, and if it does, it runs the command with the arguments. If it doesn't, it will ignore the message and it's contents."),(0,i.kt)("h2",{id:"can-i-create-my-own-commands"},"Can I create my own commands?"),(0,i.kt)("p",null,"Yes! You can create your own commands. Head over to the ",(0,i.kt)("a",{parentName:"p",href:"/VibezAPI/docs/Features/Commands/Adding%20Commands"},"Adding Commands")," page to learn how to create your own commands."),(0,i.kt)("h2",{id:"can-i-create-my-own-shorteners"},"Can I create my own shorteners?"),(0,i.kt)("p",null,"Yes! You can create your own shorteners. Head over to the ",(0,i.kt)("a",{parentName:"p",href:"/VibezAPI/docs/Features/Commands/Command%20Operation%20Codes"},"Command Operation Codes")," page to learn how to create your own shorteners."),(0,i.kt)("h2",{id:"command-settings"},"Command Settings"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'Enabled = false,\nuseDefaultNames = true,\n\nMinRank = 255,\nMaxRank = 255,\n\nPrefix = "!",\nAlias = {},\n')),(0,i.kt)("h2",{id:"how-can-i-use-the-module-with-another-admin-system"},"How can I use the module with another admin system?"),(0,i.kt)("p",null,"We understand that many people use other admin systems that have much more complex features and would prefer to use that instead. Below we have listed a few examples of the top\nadmin systems and how you can use the module with them. Please make sure you are using the ",(0,i.kt)("a",{parentName:"p",href:"/VibezAPI/docs/Features/Global"},"Global API")," to use the module with these admin systems."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Basic Admin Essentials"),(0,i.kt)("br",null),(0,i.kt)("details",null,(0,i.kt)("summary",null,"All in one command"),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local Plugin = function(...)\n    local Data = { ... }\n\n    -- Included Functions and Info --\n    local remoteEvent = Data[1][1]\n    local remoteFunction = Data[1][2]\n    local returnPermissions = Data[1][3]\n    local Commands = Data[1][4]\n    local Prefix = Data[1][5]\n    local actionPrefix = Data[1][6]\n    local returnPlayers = Data[1][7]\n    local cleanData = Data[1][8] -- cleanData(Sender,Receiver,Data)\n    -- Practical example, for a gui specifically for a player, from another player\n    -- cleanData(Sender,Receiver,"hi") -- You need receiver because it\'s being sent to everyone\n    -- Or for a broadcast (something everyone sees, from one person, to nobody specific)\n    -- cleanData(Sender,nil,"hi") -- Receiver is nil because it is a broadcast\n\n    -- Plugin Configuration --\n    local pluginName = \'rank\'\n    local pluginPrefix = Prefix\n    local pluginLevel = 1\n    local pluginUsage = "<Type> <User(s)>" -- leave blank if the command has no arguments\n    local pluginDescription = "Promotes/Demotes/Sets a player\'s rank within the group."\n\n    -- Example Plugin Function --\n    local function pluginFunction(Args) -- keep the name of the function as "pluginFunction"\n        local vibezApi = nil\n\n        while vibezApi == nil do\n            vibezApi = _G["VibezApi"]\n            task.wait(.25)\n        end\n\n        local Sender = Args[1]\n        local Type = Args[3]\n        local Users = {{Name = Args[4], UserId = game.Players:GetUserIdFromNameAsync(Args[4])}}\n        local succeeded, failed = {}, {}\n\n        if string.sub(string.lower(Type), 1, 1) == "p" then\n            Type = "Promote"\n        elseif string.sub(string.lower(Type), 1, 1) == "d" then\n            Type = "Demote"\n        elseif string.sub(string.lower(Type), 1, 1) == "f" then\n            Type = "Fire"\n        elseif string.sub(string.lower(Type), 1, 1) == "s" then\n            Type = "setRank"\n\n            if not Args[5] then\n                remoteEvent:FireClient(Sender, "Hint", "Error", "You need to specify a rank to set the user(s) to.")\n                return\n            end\n        else\n            remoteEvent:FireClient(Sender, "Hint", "Error", "Invalid ranking type. We expected \'Promote\', \'Demote\', \'Fire\' or \'SetRank\'.")\n        end\n\n        for _, User in pairs(Users) do\n            local response = vibezApi.Ranking[Type]({}, User.UserId, Args[5])\n\n            if response.success or response.Success then\n                table.insert(succeeded, User.Name)\n            else\n                table.insert(failed, User.Name)\n            end\n        end\n\n        local firstNames = (#succeeded > 0) and table.concat(succeeded, ", ", 1, math.clamp(#succeeded, 1, 3)) or ""\n        local failedNames = (#failed > 0) and table.concat(failed, ", ", 1, math.clamp(#failed, 1, 3)) or ""\n        local fixedString = {\n            ["Promote"] = "Promoted",\n            ["Demote"] = "Demoted",\n            ["Fire"] = "Fired",\n            ["setRank"] = "Set The Rank Of"\n        }\n\n        if #succeeded > 3 then\n            firstNames ..= " (+" .. #succeeded - 3 .. " others)"\n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "Rank - " .. Type,\n                string.format(\n                    "Successfully %s \'%s\' user(s)%s",\n                    fixedString[Type],\n                    firstNames,\n                    #failed > 0 and " and failed to " .. string.lower(Type) .. " " .. #failed .. " user(s)!" or ""\n                )\n            )\n        elseif #succeeded <= 3 and #succeeded ~= 0 then\n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "Rank - " .. Type,\n                "Successfully " .. string.lower(fixedString[Type]) .. " \'" .. firstNames .. "\'!"\n            )\n        elseif #failed > 0 then\n            if #failed > 3 then\n                failedNames ..= " (+" .. #failed - 3 .. " others)"\n            end\n\n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "Rank - " .. Type,\n                "Failed to " .. string.lower(fixedString[Type]) .. " \'" .. failedNames .. "\'!"\n            )\n        end\n    end\n\n    -- Return Everything to the MainModule --\n    local descToReturn\n    if pluginUsage ~= "" then\n        descToReturn = pluginPrefix..pluginName..\' \'..pluginUsage..\'\\n\'..pluginDescription\n    else\n        descToReturn = pluginPrefix..pluginName..\'\\n\'..pluginDescription\n    end\n\n    return pluginName,pluginFunction,pluginLevel,pluginPrefix,{pluginName,pluginUsage,pluginDescription}\nend\n\nreturn Plugin\n'))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Promote"),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local Plugin = function(...)\n    local Data = { ... }\n\n    -- Included Functions and Info --\n    local remoteEvent = Data[1][1]\n    local remoteFunction = Data[1][2]\n    local returnPermissions = Data[1][3]\n    local Commands = Data[1][4]\n    local Prefix = Data[1][5]\n    local actionPrefix = Data[1][6]\n    local returnPlayers = Data[1][7]\n    local cleanData = Data[1][8] -- cleanData(Sender,Receiver,Data)\n    -- Practical example, for a gui specifically for a player, from another player\n    -- cleanData(Sender,Receiver,"hi") -- You need receiver because it\'s being sent to everyone\n    -- Or for a broadcast (something everyone sees, from one person, to nobody specific)\n    -- cleanData(Sender,nil,"hi") -- Receiver is nil because it is a broadcast\n\n    -- Plugin Configuration --\n    local pluginName = \'promote\'\n    local pluginPrefix = Prefix\n    local pluginLevel = 1\n    local pluginUsage = "<User(s)>" -- leave blank if the command has no arguments\n    local pluginDescription = "Promotes a player\'s rank within the group."\n\n    -- Example Plugin Function --\n    local function pluginFunction(Args) -- keep the name of the function as "pluginFunction"\n        local vibezApi = nil\n\n        while vibezApi == nil do\n            vibezApi = _G["VibezApi"]\n            task.wait(.25)\n        end\n\n        local Sender = Args[1]\n        local Users = returnPlayers(Sender, Args[3])\n        local succeeded, failed = {}, {}\n\n        if #Users == 0 then\n            return remoteEvent:FireClient(Sender, "Hint", "Error", "No user(s) to promote!")\n        end\n\n        for _, User in pairs(Users) do\n            local response = vibezApi.Ranking:Promote(User.UserId, {\n                userName = Sender.Name,\n                userId = Sender.UserId\n            })\n\n            if response.Success and response.Body and response.Body.success then\n                table.insert(succeeded, User.Name)\n            else\n                table.insert(failed, User.Name)\n            end\n        end\n\n        local firstNames = (#succeeded > 0) and table.concat(succeeded, ", ", 1, math.clamp(#succeeded, 1, 3)) or ""\n        local failedNames = (#failed > 0) and table.concat(failed, ", ", 1, math.clamp(#failed, 1, 3)) or ""\n\n        if #succeeded > 3 then\n            firstNames ..= " (+" .. #succeeded - 3 .. " others)"\n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "Promotion",\n                "Successfully promoted \'" .. firstNames .. "\' user(s)" .. (string.len(failed) > 0 and " and failed to promote " .. string.len(failed) .. " user(s)" or "")\n            )\n        elseif #succeeded <= 3 and #succeeded ~= 0 then\n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "Promotion",\n                "Successfully promoted \'" .. firstNames .. "\'!"\n            )\n        elseif #failed > 0 then\n            if #failed > 3 then\n                failedNames ..= " (+" .. #failed - 3 .. " others)"\n            end\n        \n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "Promotion",\n                "Failed to promote \'" .. failedNames .. "\'!"\n            )\n        end\n    end\n\n    -- Return Everything to the MainModule --\n    local descToReturn\n    if pluginUsage ~= "" then\n        descToReturn = pluginPrefix..pluginName..\' \'..pluginUsage..\'\\n\'..pluginDescription\n    else\n        descToReturn = pluginPrefix..pluginName..\'\\n\'..pluginDescription\n    end\n\n    return pluginName,pluginFunction,pluginLevel,pluginPrefix,{pluginName,pluginUsage,pluginDescription}\nend\n\nreturn Plugin\n'))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Demote"),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local Plugin = function(...)\n    local Data = { ... }\n\n    -- Included Functions and Info --\n    local remoteEvent = Data[1][1]\n    local remoteFunction = Data[1][2]\n    local returnPermissions = Data[1][3]\n    local Commands = Data[1][4]\n    local Prefix = Data[1][5]\n    local actionPrefix = Data[1][6]\n    local returnPlayers = Data[1][7]\n    local cleanData = Data[1][8] -- cleanData(Sender,Receiver,Data)\n    -- Practical example, for a gui specifically for a player, from another player\n    -- cleanData(Sender,Receiver,"hi") -- You need receiver because it\'s being sent to everyone\n    -- Or for a broadcast (something everyone sees, from one person, to nobody specific)\n    -- cleanData(Sender,nil,"hi") -- Receiver is nil because it is a broadcast\n\n    -- Plugin Configuration --\n    local pluginName = \'demote\'\n    local pluginPrefix = Prefix\n    local pluginLevel = 1\n    local pluginUsage = "<User(s)>" -- leave blank if the command has no arguments\n    local pluginDescription = "Demotes a player\'s rank within the group."\n\n    -- Example Plugin Function --\n    local function pluginFunction(Args) -- keep the name of the function as "pluginFunction"\n        local vibezApi = nil\n\n        while vibezApi == nil do\n            vibezApi = _G["VibezApi"]\n            task.wait(.25)\n        end\n\n        local Sender = Args[1]\n        local Users = returnPlayers(Sender, Args[3])\n        local succeeded, failed = {}, {}\n\n        if #Users == 0 then\n            return remoteEvent:FireClient(Sender, "Hint", "Error", "No user(s) to demote!")\n        end\n\n        for _, User in pairs(Users) do\n            local response = vibezApi.Ranking:Demote(User.UserId, {\n                userName = Sender.Name,\n                userId = Sender.UserId\n            })\n\n            if response.success or response.Success then\n                table.insert(succeeded, User.Name)\n            else\n                table.insert(failed, User.Name)\n            end\n        end\n\n        local firstNames = (#succeeded > 0) and table.concat(succeeded, ", ", 1, math.clamp(#succeeded, 1, 3)) or ""\n        local failedNames = (#failed > 0) and table.concat(failed, ", ", 1, math.clamp(#failed, 1, 3)) or ""\n\n        if #succeeded > 3 then\n            firstNames ..= " (+" .. #succeeded - 3 .. " others)"\n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "Demotion",\n                "Successfully demoted \'" .. firstNames .. "\' user(s)" .. (string.len(failed) > 0 and " and failed to demote " .. string.len(failed) .. " user(s)" or "")\n            )\n        elseif #succeeded <= 3 and #succeeded ~= 0 then\n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "Demotion",\n                "Successfully demoted \'" .. firstNames .. "\'!"\n            )\n        elseif #failed > 0 then\n            if #failed > 3 then\n                failedNames ..= " (+" .. #failed - 3 .. " others)"\n            end\n        \n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "Demotion",\n                "Failed to demote \'" .. failedNames .. "\'!"\n            )\n        end\n    end\n\n    -- Return Everything to the MainModule --\n    local descToReturn\n    if pluginUsage ~= "" then\n        descToReturn = pluginPrefix..pluginName..\' \'..pluginUsage..\'\\n\'..pluginDescription\n    else\n        descToReturn = pluginPrefix..pluginName..\'\\n\'..pluginDescription\n    end\n\n    return pluginName,pluginFunction,pluginLevel,pluginPrefix,{pluginName,pluginUsage,pluginDescription}\nend\n\nreturn Plugin\n'))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Fire"),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local Plugin = function(...)\n    local Data = { ... }\n\n    -- Included Functions and Info --\n    local remoteEvent = Data[1][1]\n    local remoteFunction = Data[1][2]\n    local returnPermissions = Data[1][3]\n    local Commands = Data[1][4]\n    local Prefix = Data[1][5]\n    local actionPrefix = Data[1][6]\n    local returnPlayers = Data[1][7]\n    local cleanData = Data[1][8] -- cleanData(Sender,Receiver,Data)\n    -- Practical example, for a gui specifically for a player, from another player\n    -- cleanData(Sender,Receiver,"hi") -- You need receiver because it\'s being sent to everyone\n    -- Or for a broadcast (something everyone sees, from one person, to nobody specific)\n    -- cleanData(Sender,nil,"hi") -- Receiver is nil because it is a broadcast\n\n    -- Plugin Configuration --\n    local pluginName = \'fire\'\n    local pluginPrefix = Prefix\n    local pluginLevel = 1\n    local pluginUsage = "<User(s)>" -- leave blank if the command has no arguments\n    local pluginDescription = "Fires a player the group."\n\n    -- Example Plugin Function --\n    local function pluginFunction(Args) -- keep the name of the function as "pluginFunction"\n        local vibezApi = nil\n\n        while vibezApi == nil do\n            vibezApi = _G["VibezApi"]\n            task.wait(.25)\n        end\n        \n        local Sender = Args[1]\n        local Users = returnPlayers(Sender, Args[3])\n        local succeeded, failed = {}, {}\n\n        if #Users == 0 then\n            return remoteEvent:FireClient(Sender, "Hint", "Error", "No user(s) to fire!")\n        end\n\n        for _, User in pairs(Users) do\n            local response = vibezApi.Ranking:Fire(User.UserId, {\n                userName = Sender.Name,\n                userId = Sender.UserId\n            })\n\n            if response.success or response.Success then\n                table.insert(succeeded, User.Name)\n            else\n                table.insert(failed, User.Name)\n            end\n        end\n\n        local firstNames = (#succeeded > 0) and table.concat(succeeded, ", ", 1, math.clamp(#succeeded, 1, 3)) or ""\n        local failedNames = (#failed > 0) and table.concat(failed, ", ", 1, math.clamp(#failed, 1, 3)) or ""\n\n        if #succeeded > 3 then\n            firstNames ..= " (+" .. #succeeded - 3 .. " others)"\n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "Fire",\n                "Successfully fired \'" .. firstNames .. "\' user(s)" .. (string.len(failed) > 0 and " and failed to fire " .. string.len(failed) .. " user(s)" or "")\n            )\n        elseif #succeeded <= 3 and #succeeded ~= 0 then\n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "Fire",\n                "Successfully fired \'" .. firstNames .. "\'!"\n            )\n        elseif #failed > 0 then\n            if #failed > 3 then\n                failedNames ..= " (+" .. #failed - 3 .. " others)"\n            end\n        \n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "Fire",\n                "Failed to fire \'" .. failedNames .. "\'!"\n            )\n        end\n    end\n\n    -- Return Everything to the MainModule --\n    local descToReturn\n    if pluginUsage ~= "" then\n        descToReturn = pluginPrefix..pluginName..\' \'..pluginUsage..\'\\n\'..pluginDescription\n    else\n        descToReturn = pluginPrefix..pluginName..\'\\n\'..pluginDescription\n    end\n\n    return pluginName,pluginFunction,pluginLevel,pluginPrefix,{pluginName,pluginUsage,pluginDescription}\nend\n\nreturn Plugin\n'))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"SetRank"),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local Plugin = function(...)\n    local Data = { ... }\n\n    -- Included Functions and Info --\n    local remoteEvent = Data[1][1]\n    local remoteFunction = Data[1][2]\n    local returnPermissions = Data[1][3]\n    local Commands = Data[1][4]\n    local Prefix = Data[1][5]\n    local actionPrefix = Data[1][6]\n    local returnPlayers = Data[1][7]\n    local cleanData = Data[1][8] -- cleanData(Sender,Receiver,Data)\n    -- Practical example, for a gui specifically for a player, from another player\n    -- cleanData(Sender,Receiver,"hi") -- You need receiver because it\'s being sent to everyone\n    -- Or for a broadcast (something everyone sees, from one person, to nobody specific)\n    -- cleanData(Sender,nil,"hi") -- Receiver is nil because it is a broadcast\n\n    -- Plugin Configuration --\n    local pluginName = \'setrank\'\n    local pluginPrefix = Prefix\n    local pluginLevel = 1\n    local pluginUsage = "<User(s)> <NewRank>" -- leave blank if the command has no arguments\n    local pluginDescription = "Sets the rank of a player within the group."\n\n    -- Example Plugin Function --\n    local function pluginFunction(Args) -- keep the name of the function as "pluginFunction"\n        local vibezApi = nil\n\n        while vibezApi == nil do\n            vibezApi = _G["VibezApi"]\n            task.wait(.25)\n        end\n\n        local Sender = Args[1]\n        local Users = returnPlayers(Sender, Args[3])\n        local succeeded, failed = {}, {}\n\n        if #Users == 0 then\n            return remoteEvent:FireClient(Sender, "Hint", "Error", "No user(s) to fire!")\n        elseif tonumber(Args[4]) == nil then\n            return remoteEvent:FireClient(Sender, "Hint", "Error", "\'Rank\' has to be of type \'number\', NOT \'" .. typeof(Args[4]) .. "\'!")\n        end\n\n        for _, User in pairs(Users) do\n            local response = vibezApi.Ranking:setRank(User.UserId, tonumber(Args[4]), {\n                userName = Sender.Name,\n                userId = Sender.UserId\n            })\n\n            if response.success or response.Success then\n                table.insert(succeeded, User.Name)\n            else\n                table.insert(failed, User.Name)\n            end\n        end\n\n        local firstNames = (#succeeded > 0) and table.concat(succeeded, ", ", 1, math.clamp(#succeeded, 1, 3)) or ""\n        local failedNames = (#failed > 0) and table.concat(failed, ", ", 1, math.clamp(#failed, 1, 3)) or ""\n\n        if #succeeded > 3 then\n            firstNames ..= " (+" .. #succeeded - 3 .. " others)"\n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "SetRank",\n                "Successfully set the rank of \'" .. firstNames .. "\' user(s)" .. (string.len(failed) > 0 and " and failed to fire " .. string.len(failed) .. " user(s)" or "")\n            )\n        elseif #succeeded <= 3 and #succeeded ~= 0 then\n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "SetRank",\n                "Successfully set the rank of \'" .. firstNames .. "\'!"\n            )\n        elseif #failed > 0 then\n            if #failed > 3 then\n                failedNames ..= " (+" .. #failed - 3 .. " others)"\n            end\n        \n            remoteEvent:FireClient(\n                Sender,\n                "Hint",\n                "SetRank",\n                "Failed to set the rank of \'" .. failedNames .. "\'!"\n            )\n        end\n    end\n\n    -- Return Everything to the MainModule --\n    local descToReturn\n    if pluginUsage ~= "" then\n        descToReturn = pluginPrefix..pluginName..\' \'..pluginUsage..\'\\n\'..pluginDescription\n    else\n        descToReturn = pluginPrefix..pluginName..\'\\n\'..pluginDescription\n    end\n\n    return pluginName,pluginFunction,pluginLevel,pluginPrefix,{pluginName,pluginUsage,pluginDescription}\nend\n\nreturn Plugin\n')))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Adonis (Untested)"),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'return function(Vargs)\n    local server = Vargs.Server\n    local service = Vargs.Service\n\n        --// Add a new command to the Commands table at index "ExampleCommand1"\n    server.Commands.Promote = {                     --// The index & table of the command\n        Prefix = server.Settings.Prefix;                    --// The prefix the command will use, this is the \':\' in \':ff me\'\n        Commands = {"Promote"}; --// A table containing the command strings (the things you chat in-game to run the command, the \'ff\' in \':ff me\')\n        Args = {"playerToPromote"};                     --// Command arguments, these will be available in order as args[1], args[2], args[3], etc; This is the \'me\' in \':ff me\'\n        Description = "Promotes the rank of a player.";                 --// The description of the command\n        AdminLevel = 100; -- Moderators                     --// The command\'s minimum admin level; This can also be a table containing specific levels rather than a minimum level: {124, 152, "HeadAdmins", etc};\n        --// Alternative option: AdminLevel = "Moderators";\n        Filter = true;                              --// Should user supplied text passed to this command be filtered automatically? Use this if you plan to display a user-defined message to other players\n        Fun = false;                                --// Is this command considered as fun?\n        Hidden = false;                             --// Should this command be hidden from the command list?\n        Disabled = false;                           --// Should this command be unusable?\n        NoStudio = false;                           --// Should this command be blocked from being executed in a Studio environment?\n        NonChattable = false;                           --// Should this command be blocked from being executed via chat?\n        CrossServerDenied = false;                      --// If true, this command will not be usable via :crossserver\n        Function = function(plr: Player, args: {string}, data: {})      --// The command\'s function; This is the actual code of the command which runs when you run the command\n            --// "plr" is the player running the command\n            --// "args" is a table containing command arguments supplied by the user\n            --// "data" is a table containing information related to the command and the player running it, such as data.PlayerData.Level (the player\'s admin level)\n            local vibezApi = nil\n\n            while vibezApi == nil do\n                vibezApi = _G["VibezApi"]\n                task.wait(.25)\n            end\n\n            vibezApi.Ranking:Promote(args[1], { userName = plr.Name, userId = plr.UserId })\n        end\n    }\n\n    server.Commands.Demote = {                      --// The index & table of the command\n        Prefix = server.Settings.Prefix;                    --// The prefix the command will use, this is the \':\' in \':ff me\'\n        Commands = {"Demote"};  --// A table containing the command strings (the things you chat in-game to run the command, the \'ff\' in \':ff me\')\n        Args = {"playerToDemote"};                      --// Command arguments, these will be available in order as args[1], args[2], args[3], etc; This is the \'me\' in \':ff me\'\n        Description = "Demotes the rank of a player.";                  --// The description of the command\n        AdminLevel = 100; -- Moderators                     --// The command\'s minimum admin level; This can also be a table containing specific levels rather than a minimum level: {124, 152, "HeadAdmins", etc};\n        --// Alternative option: AdminLevel = "Moderators";\n        Filter = true;                              --// Should user supplied text passed to this command be filtered automatically? Use this if you plan to display a user-defined message to other players\n        Fun = false;                                --// Is this command considered as fun?\n        Hidden = false;                             --// Should this command be hidden from the command list?\n        Disabled = false;                           --// Should this command be unusable?\n        NoStudio = false;                           --// Should this command be blocked from being executed in a Studio environment?\n        NonChattable = false;                           --// Should this command be blocked from being executed via chat?\n        CrossServerDenied = false;                      --// If true, this command will not be usable via :crossserver\n        Function = function(plr: Player, args: {string}, data: {})      --// The command\'s function; This is the actual code of the command which runs when you run the command\n            local vibezApi = nil\n\n            while vibezApi == nil do\n                vibezApi = _G["VibezApi"]\n                task.wait(.25)\n            end\n\n            vibezApi.Ranking:Demote(args[1], { userName = plr.Name, userId = plr.UserId })\n        end\n    }\n\n    server.Commands.setRank = {                     --// The index & table of the command\n        Prefix = server.Settings.Prefix;                    --// The prefix the command will use, this is the \':\' in \':ff me\'\n        Commands = {"setRank"}; --// A table containing the command strings (the things you chat in-game to run the command, the \'ff\' in \':ff me\')\n        Args = {"playerToSetRank", "newRank"};                      --// Command arguments, these will be available in order as args[1], args[2], args[3], etc; This is the \'me\' in \':ff me\'\n        Description = "Sets the rank of a player.";                 --// The description of the command\n        AdminLevel = 100; -- Moderators                     --// The command\'s minimum admin level; This can also be a table containing specific levels rather than a minimum level: {124, 152, "HeadAdmins", etc};\n        --// Alternative option: AdminLevel = "Moderators";\n        Filter = true;                              --// Should user supplied text passed to this command be filtered automatically? Use this if you plan to display a user-defined message to other players\n        Fun = false;                                --// Is this command considered as fun?\n        Hidden = false;                             --// Should this command be hidden from the command list?\n        Disabled = false;                           --// Should this command be unusable?\n        NoStudio = false;                           --// Should this command be blocked from being executed in a Studio environment?\n        NonChattable = false;                           --// Should this command be blocked from being executed via chat?\n        CrossServerDenied = false;                      --// If true, this command will not be usable via :crossserver\n        Function = function(plr: Player, args: {string}, data: {})      --// The command\'s function; This is the actual code of the command which runs when you run the command\n            local vibezApi = nil\n\n            while vibezApi == nil do\n                vibezApi = _G["VibezApi"]\n                task.wait(.25)\n            end\n\n            vibezApi.Ranking:SetRank(args[1], args[2], { userName = plr.Name, userId = plr.UserId })\n        end\n    }\nend\n'))))}m.isMDXComponent=!0}}]);
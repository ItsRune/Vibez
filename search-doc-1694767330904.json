[{"title":"RateLimiter","type":0,"sectionRef":"#","url":"/VibezAPI/api/RateLimiter","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#functions","content":" "},{"title":"new​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#new","content":"since 0.1.0 &lt;/&gt; RateLimiter.new( requestsPerRetry: number, retryAfter: number ) → RateLimiter "},{"title":"Types","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter##","content":""},{"title":"​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#RateLimit","content":"interface RateLimit { isLimited: boolean _retryAfter: number _counter: number _maxCounter: number _counterStartedAt: number }  Creates the rate limiting class.  "},{"title":"Check​","type":1,"pageTitle":"RateLimiter","url":"/VibezAPI/api/RateLimiter#Check","content":"since 0.1.0 &lt;/&gt; RateLimiter:Check() → ( boolean, string? ) Checks to see if the developer is currently being rate limited. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/VibezAPI/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/VibezAPI/docs/intro#installation","content":"You can install by getting the package from the roblox website and requiring the module using the ID of the module. This is the recommended way to install the module as it will automatically update the module when a new version is released. local VibezAPI = require(6949396225)  OR To install, just get the package from the roblox website and drag it into your studio place. Please make sure you parent the modulescript to ServerStorage or ServerScriptService in order to keep the module out of the hands of exploiters. "},{"title":"Usage​","type":1,"pageTitle":"Getting Started","url":"/VibezAPI/docs/intro#usage","content":"To begin, open a new Script in ServerScriptService and require the module: local VibezAPI = require(script.Parent.VibezAPI)  From there, you can use the API to create a new Vibez instance: local myApiKey = &quot;my-api-key&quot; local Vibez = VibezAPI(myApiKey)  Our api wrapper supports extra options for when creating the class. These options can be found here. Once all that's done, you're free to use our API for any means necessary. "},{"title":"VibezAPI","type":0,"sectionRef":"#","url":"/VibezAPI/api/VibezAPI","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#types","content":" "},{"title":"groupIdResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#groupIdResponse","content":"&lt;/&gt; interface groupIdResponse { success: boolean groupId: number? }   "},{"title":"errorResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#errorResponse","content":"&lt;/&gt; interface errorResponse { success: boolean errorMessage: string }   "},{"title":"rankResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#rankResponse","content":"&lt;/&gt; interface rankResponse { newRank: { id: number, name: string, rank: number, memberCount: number }, oldRank: { id: number, name: string, rank: number, groupInformation: { id: number, name: string, memberCount: number, hasVerifiedBadge: boolean } } }   "},{"title":"responseBody​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#responseBody","content":"&lt;/&gt; type responseBody = groupIdResponse | errorResponse | rankResponse   "},{"title":"httpResponse​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#httpResponse","content":"&lt;/&gt; interface httpResponse { Body: responseBody Headers: {[string]: any} StatusCode: number StatusMessage: string? Success: boolean rawBody: string }  "},{"title":"Functions​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#functions","content":" "},{"title":"new​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#new","content":"&lt;/&gt; VibezAPI.new( apiKey: string,-- Your Vibez API key. extraOptions: extraOptionsType-- Extra settings to configure the api to work for you. ) → VibezAPI "},{"title":"Types","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI##","content":""},{"title":"​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#extraOptionsType","content":"interface extraOptionsType { isChatCommandsEnabled: boolean isUIEnabled: boolean commandPrefix: string minRank: number maxRank: number overrideGroupCheckForStudio: boolean loggingOriginName: string ignoreWarnings: boolean }  Constructs the main Vibez API class. local myKey = &quot;YOUR_API_KEY_HERE&quot; local VibezAPI = require(script.VibezAPI) local Vibez = VibezAPI(myKey)   "},{"title":"Http​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Http","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:Http( Route: string, Method: string?, Headers: {[string]: any}?, Body: {any}?, useNewApi: boolean? ) → boolean,httpResponse? Uses RequestAsync to fetch required assets to make this API wrapper work properly. Automatically handles the API key and necessary headers associated with different routes.  "},{"title":"getGroupId​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getGroupId","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Public since 0.1.0 &lt;/&gt; VibezAPI:getGroupId() → number? Fetches the group associated with the api key.  "},{"title":"getGroupFromUser​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getGroupFromUser","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:getGroupFromUser( groupId: number, userId: number ) → number Uses roblox's group service to get a player's rank.  "},{"title":"onPlayerAdded​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#onPlayerAdded","content":"Internal since 0.1.0 &lt;/&gt; VibezAPI:onPlayerAdded(Player: Player ) → () Handles players joining the game and checks for if commands/ui are enabled.  "},{"title":"onPlayerRemoved​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#onPlayerRemoved","content":"Internal since 0.1.0 &lt;/&gt; VibezAPI:onPlayerRemoved(Player: Player ) → () Handles players leaving the game and disconnects any events.  "},{"title":"isPlayerRankOkToProceed​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#isPlayerRankOkToProceed","content":"Internal since 0.1.0 &lt;/&gt; VibezAPI:isPlayerRankOkToProceed(playerRank: number) → boolean Compares a rank to the min/max ranks in settings for the commands/ui.  "},{"title":"getUserIdByName​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getUserIdByName","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:getUserIdByName(username: string) → number? Gets a player's user identifier via their username.  "},{"title":"getNameById​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getNameById","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:getNameById(userId: number) → string? Gets a player's username by their userId  "},{"title":"_createRemote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_createRemote","content":"Internal since 0.1.0 &lt;/&gt; VibezAPI:_createRemote() → RemoteRemoteFunction  Creates / Fetches a remote function in replicated storage for client communication.  "},{"title":"_getPlayers​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_getPlayers","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_getPlayers(usernames: {string}) → {Player? } Gets the closest match to a player's username who's in game.  "},{"title":"_onPlayerChatted​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_onPlayerChatted","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_onPlayerChatted( Player: Player , message: string ) → () Handles the main chatting event for commands.  "},{"title":"_checkHttp​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_checkHttp","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_checkHttp() → boolean Checks for if HTTP is enabled  "},{"title":"_setRank​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_setRank","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_setRank( userId: string | number, rankId: string | number, whoCalled: { userName: string, userId: number } ) → rankResponse Sets the rank of a player and uses &quot;whoCalled&quot; to send a message with origin logging name.  "},{"title":"_Promote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_Promote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_Promote( userId: string | number, whoCalled: { userName: string, userId: number } ) → rankResponse Promotes a player and creates a fake &quot;whoCalled&quot; variable.  "},{"title":"_Demote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_Demote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_Demote( userId: string | number, whoCalled: { userName: string, userId: number } ) → rankResponse Demotes a player and uses &quot;whoCalled&quot;, creates one if none is added.  "},{"title":"_Fire​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_Fire","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Internal since 0.1.0 &lt;/&gt; VibezAPI:_Fire( userId: string | number, whoCalled: { userName: string, userId: number } ) → rankResponse Fires a player and creates a fake &quot;whoCalled&quot; variable if none is supplied.  "},{"title":"_destroy​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_destroy","content":"Internal since 0.1.0 &lt;/&gt; VibezAPI:_destroy() → () Destroys the class.  "},{"title":"_warn​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#_warn","content":"Internal since 0.1.0 &lt;/&gt; VibezAPI:_warn(...: ...string) → () Displays a warning with the prefix of &quot;[Vibez]&quot;  "},{"title":"SetRank​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#SetRank","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Public since 0.1.0 &lt;/&gt; VibezAPI:SetRank( userId: string | number, rankId: string | number ) → Types.rankResponse Changes the rank of a player. local userId, rankId = 1, 200 Vibez:SetRank(userId, rankId)   "},{"title":"Promote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Promote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Public since 0.1.0 &lt;/&gt; VibezAPI:Promote(userId: string | number) → Types.rankResponse Promotes a player. local userId = 1 local response = Vibez:Promote(userId)   "},{"title":"Demote​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Demote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Public since 0.1.0 &lt;/&gt; VibezAPI:Demote(userId: string | number) → Types.rankResponse Demotes a player. local userId = 1 local response = Vibez:Demote(userId)   "},{"title":"Fire​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Fire","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Public since 0.1.0 &lt;/&gt; VibezAPI:Fire(userId: string | number) → Types.rankResponse Fires a player from the group.  "},{"title":"ToggleCommands​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#ToggleCommands","content":"Public since 0.1.0 &lt;/&gt; VibezAPI:ToggleCommands() → nil Toggles the usage of commands within the experience.  "},{"title":"addCommandOperation​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#addCommandOperation","content":"Chainable Public since 0.1.0 &lt;/&gt; VibezAPI:addCommandOperation( operationName: string, operationCode: string, operationFunction: ( playerToCheck: Player , incomingArgument: string ) → boolean ) → VibezAPI Adds a command operation code. -- This command operation comes by default, no need to rewrite it. Vibez:addCommandOperation( &quot;Team&quot;, -- Name of the operation. &quot;#&quot;, -- Prefix before the operation argument. function(playerToCheck: Player, incomingArgument: string) -&gt; boolean) return playerToCheck.Team ~= nil and string.sub(string.lower(playerToCheck.Team.Name), 0, #incomingArgument) == string.lower(incomingArgument) end )   "},{"title":"removeCommandOperation​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#removeCommandOperation","content":"Chainable Public since 0.1.0 &lt;/&gt; VibezAPI:removeCommandOperation(operationName: string) → VibezAPI Removes a command operation code. Vibez:removeCommandOperation(&quot;Team&quot;)   "},{"title":"UpdateLoggerTitle​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#UpdateLoggerTitle","content":"Public since 0.1.0 &lt;/&gt; VibezAPI:UpdateLoggerTitle(newTitle: string) → nil Updates the logger's origin name.  "},{"title":"UpdateKey​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#UpdateKey","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Public since 0.1.0 &lt;/&gt; VibezAPI:UpdateKey(newApiKey: string) → boolean Updates the api key.  "},{"title":"Destroy​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#Destroy","content":"Public since 0.1.0 &lt;/&gt; VibezAPI:Destroy() → () Destroys the VibezAPI class.  "},{"title":"ToggleUI​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#ToggleUI","content":"Public since 0.1.0 &lt;/&gt; VibezAPI:ToggleUI() → nil Toggles the client promote/demote/fire UI.  "},{"title":"getActivity​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#getActivity","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Public unreleased &lt;/&gt; VibezAPI:getActivity(userId: string | number) → httpResponse Gets the player's current activity.  "},{"title":"saveActivity​","type":1,"pageTitle":"VibezAPI","url":"/VibezAPI/api/VibezAPI#saveActivity","content":"Public since 0.1.0 &lt;/&gt; VibezAPI:saveActivity( userId: string | number, secondsSpent: number, messagesSent: (number | {string})?, joinTime: number?, leaveTime: number? ) → httpResponse Saves the player's current activity "}]